{"version":3,"file":"EditUser-0c45def3.js","sources":["../../../../node_modules/lodash-es/_baseIntersection.js","../../../../node_modules/lodash-es/_castArrayLikeObject.js","../../../../node_modules/lodash-es/intersectionBy.js","../../../../node_modules/lodash-es/isEmpty.js","../../src/user/UserAttributes.tsx","../../src/user/UserConsents.tsx","../../src/user/user-credentials/ResetPasswordDialog.tsx","../../src/user/user-credentials/LifespanField.tsx","../../src/user/user-credentials/ResetCredentialDialog.tsx","../../src/user/user-credentials/InlineLabelEdit.tsx","../../src/user/user-credentials/CredentialDataDialog.tsx","../../src/user/user-credentials/CredentialRow.tsx","../../src/user/user-credentials/FederatedCredentials.tsx","../../src/user/UserCredentials.tsx","../../src/user/UserGroups.tsx","../../src/user/UserIdPModal.tsx","../../src/user/UserIdentityProviderLinks.tsx","../../src/user/UserRoleMapping.tsx","../../src/user/UserSessions.tsx","../../src/user/EditUser.tsx"],"sourcesContent":["import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseIntersection;\n","import isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Casts `value` to an empty array if it's not an array like object.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array|Object} Returns the cast array-like object.\n */\nfunction castArrayLikeObject(value) {\n  return isArrayLikeObject(value) ? value : [];\n}\n\nexport default castArrayLikeObject;\n","import arrayMap from './_arrayMap.js';\nimport baseIntersection from './_baseIntersection.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseRest from './_baseRest.js';\nimport castArrayLikeObject from './_castArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.intersection` except that it accepts `iteratee`\n * which is invoked for each element of each `arrays` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n * // => [2.1]\n *\n * // The `_.property` iteratee shorthand.\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }]\n */\nvar intersectionBy = baseRest(function(arrays) {\n  var iteratee = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  if (iteratee === last(mapped)) {\n    iteratee = undefined;\n  } else {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, baseIteratee(iteratee, 2))\n    : [];\n});\n\nexport default intersectionBy;\n","import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport {\n  arrayToKeyValue,\n  keyValueToArray,\n  KeyValueType,\n} from \"../components/key-value-form/key-value-convert\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useUserProfile } from \"../realm-settings/user-profile/UserProfileContext\";\n\ntype UserAttributesProps = {\n  user: UserRepresentation;\n};\n\nexport const UserAttributes = ({ user: defaultUser }: UserAttributesProps) => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const [user, setUser] = useState<UserRepresentation>(defaultUser);\n  const form = useForm<AttributeForm>({ mode: \"onChange\" });\n  const { config } = useUserProfile();\n\n  const convertAttributes = () => {\n    return arrayToKeyValue<UserRepresentation>(user.attributes!).filter(\n      (a: KeyValueType) =>\n        !config?.attributes?.some((attribute) => attribute.name === a.key)\n    );\n  };\n\n  useEffect(() => {\n    form.setValue(\"attributes\", convertAttributes());\n  }, [user, config]);\n\n  const save = async (attributeForm: AttributeForm) => {\n    try {\n      const attributes = keyValueToArray(attributeForm.attributes!);\n      await adminClient.users.update({ id: user.id! }, { ...user, attributes });\n\n      setUser({ ...user, attributes });\n      addAlert(t(\"userSaved\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"groups:groupUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <AttributesForm\n        form={form}\n        save={save}\n        fineGrainedAccess={user.access?.manage}\n        reset={() =>\n          form.reset({\n            attributes: convertAttributes(),\n          })\n        }\n      />\n    </PageSection>\n  );\n};\n","import type UserConsentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userConsentRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { emptyFormatter } from \"../util\";\nimport useFormatDate from \"../utils/useFormatDate\";\nimport { useParams } from \"../utils/useParams\";\n\nexport const UserConsents = () => {\n  const [selectedClient, setSelectedClient] =\n    useState<UserConsentRepresentation>();\n  const { t } = useTranslation(\"roles\");\n  const { addAlert, addError } = useAlerts();\n  const formatDate = useFormatDate();\n  const [key, setKey] = useState(0);\n\n  const { adminClient } = useAdminClient();\n  const { id } = useParams<{ id: string }>();\n  const alphabetize = (consentsList: UserConsentRepresentation[]) => {\n    return sortBy(consentsList, (client) => client.clientId?.toUpperCase());\n  };\n\n  const refresh = () => setKey(new Date().getTime());\n\n  const loader = async () => {\n    const getConsents = await adminClient.users.listConsents({ id });\n\n    return alphabetize(getConsents);\n  };\n\n  const clientScopesRenderer = ({\n    grantedClientScopes,\n  }: UserConsentRepresentation) => {\n    return (\n      <ChipGroup className=\"kc-consents-chip-group\">\n        {grantedClientScopes!.map((currentChip) => (\n          <Chip\n            key={currentChip}\n            isReadOnly\n            className=\"kc-consents-chip\"\n            id=\"consents-chip-text\"\n          >\n            {currentChip}\n          </Chip>\n        ))}\n      </ChipGroup>\n    );\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"users:revokeClientScopesTitle\",\n    messageKey: t(\"users:revokeClientScopes\", {\n      clientId: selectedClient?.clientId,\n    }),\n    continueButtonLabel: \"common:revoke\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.revokeConsent({\n          id,\n          clientId: selectedClient!.clientId!,\n        });\n\n        refresh();\n\n        addAlert(t(\"deleteGrantsSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"roles:deleteGrantsError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DeleteConfirm />\n      <KeycloakDataTable\n        loader={loader}\n        key={key}\n        ariaLabelKey=\"roles:roleList\"\n        searchPlaceholderKey=\" \"\n        columns={[\n          {\n            name: \"clientId\",\n            displayKey: \"clients:Client\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(20)],\n          },\n          {\n            name: \"grantedClientScopes\",\n            displayKey: \"client-scopes:grantedClientScopes\",\n            cellFormatters: [emptyFormatter()],\n            cellRenderer: clientScopesRenderer,\n            transforms: [cellWidth(30)],\n          },\n          {\n            name: \"createDate\",\n            displayKey: \"clients:created\",\n            transforms: [cellWidth(20)],\n            cellRenderer: ({ createDate }) =>\n              createDate ? formatDate(new Date(createDate)) : \"—\",\n          },\n          {\n            name: \"lastUpdatedDate\",\n            displayKey: \"clients:lastUpdated\",\n            transforms: [cellWidth(10)],\n            cellRenderer: ({ lastUpdatedDate }) =>\n              lastUpdatedDate ? formatDate(new Date(lastUpdatedDate)) : \"—\",\n          },\n        ]}\n        actions={[\n          {\n            title: t(\"users:revoke\"),\n            onRowClick: (client) => {\n              setSelectedClient(client);\n              toggleDeleteDialog();\n            },\n          } as Action<UserConsentRepresentation>,\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            icon={CubesIcon}\n            message={t(\"users:noConsents\")}\n            instructions={t(\"users:noConsentsText\")}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport {\n  ConfirmDialogModal,\n  useConfirmDialog,\n} from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { HelpItem } from \"ui-shared\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype ResetPasswordDialogProps = {\n  user: UserRepresentation;\n  isResetPassword: boolean;\n  refresh: () => void;\n  onClose: () => void;\n};\n\nexport type CredentialsForm = {\n  password: string;\n  passwordConfirmation: string;\n  temporaryPassword: boolean;\n};\n\nconst credFormDefaultValues: CredentialsForm = {\n  password: \"\",\n  passwordConfirmation: \"\",\n  temporaryPassword: true,\n};\n\nexport const ResetPasswordDialog = ({\n  user,\n  isResetPassword,\n  refresh,\n  onClose,\n}: ResetPasswordDialogProps) => {\n  const { t } = useTranslation(\"users\");\n  const {\n    register,\n    control,\n    formState: { isValid, errors },\n    watch,\n    handleSubmit,\n  } = useForm<CredentialsForm>({\n    defaultValues: credFormDefaultValues,\n    mode: \"onChange\",\n  });\n\n  const [confirm, toggle] = useToggle(true);\n  const password = watch(\"password\", \"\");\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [toggleConfirmSaveModal, ConfirmSaveModal] = useConfirmDialog({\n    titleKey: isResetPassword\n      ? \"users:resetPasswordConfirm\"\n      : \"users:setPasswordConfirm\",\n    messageKey: isResetPassword\n      ? t(\"resetPasswordConfirmText\", { username: user.username })\n      : t(\"setPasswordConfirmText\", { username: user.username }),\n    continueButtonLabel: isResetPassword\n      ? \"users:resetPassword\"\n      : \"users:savePassword\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: () => handleSubmit(saveUserPassword)(),\n  });\n\n  const saveUserPassword = async ({\n    password,\n    temporaryPassword,\n  }: CredentialsForm) => {\n    try {\n      await adminClient.users.resetPassword({\n        id: user.id!,\n        credential: {\n          temporary: temporaryPassword,\n          type: \"password\",\n          value: password,\n        },\n      });\n      const credentials = await adminClient.users.getCredentials({\n        id: user.id!,\n      });\n      const credentialLabel = credentials.find((c) => c.type === \"password\");\n      if (credentialLabel) {\n        await adminClient.users.updateCredentialLabel(\n          {\n            id: user.id!,\n            credentialId: credentialLabel.id!,\n          },\n          t(\"defaultPasswordLabel\")\n        );\n      }\n      addAlert(\n        isResetPassword\n          ? t(\"resetCredentialsSuccess\")\n          : t(\"savePasswordSuccess\"),\n        AlertVariant.success\n      );\n      refresh();\n    } catch (error) {\n      addError(\n        isResetPassword\n          ? \"users:resetPasswordError\"\n          : \"users:savePasswordError\",\n        error\n      );\n    }\n\n    onClose();\n  };\n\n  return (\n    <>\n      <ConfirmSaveModal />\n      <ConfirmDialogModal\n        titleKey={\n          isResetPassword\n            ? t(\"resetPasswordFor\", { username: user.username })\n            : t(\"setPasswordFor\", { username: user.username })\n        }\n        open={confirm}\n        onCancel={onClose}\n        toggleDialog={toggle}\n        onConfirm={toggleConfirmSaveModal}\n        confirmButtonDisabled={!isValid}\n        continueButtonLabel=\"common:save\"\n      >\n        <Form\n          id=\"userCredentials-form\"\n          isHorizontal\n          className=\"keycloak__user-credentials__reset-form\"\n        >\n          <FormGroup\n            name=\"password\"\n            label={t(\"password\")}\n            fieldId=\"password\"\n            helperTextInvalid={t(\"common:required\")}\n            validated={\n              errors.password\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            isRequired\n          >\n            <PasswordInput\n              data-testid=\"passwordField\"\n              id=\"password\"\n              {...register(\"password\", { required: true })}\n            />\n          </FormGroup>\n          <FormGroup\n            name=\"passwordConfirmation\"\n            label={\n              isResetPassword\n                ? t(\"resetPasswordConfirmation\")\n                : t(\"passwordConfirmation\")\n            }\n            fieldId=\"passwordConfirmation\"\n            helperTextInvalid={errors.passwordConfirmation?.message}\n            validated={\n              errors.passwordConfirmation\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            isRequired\n          >\n            <PasswordInput\n              data-testid=\"passwordConfirmationField\"\n              id=\"passwordConfirmation\"\n              {...register(\"passwordConfirmation\", {\n                required: true,\n                validate: (value) =>\n                  value === password ||\n                  t(\"confirmPasswordDoesNotMatch\").toString(),\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"common:temporaryPassword\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"temporaryPasswordHelpText\")}\n                fieldLabelId=\"temporaryPassword\"\n              />\n            }\n            fieldId=\"kc-temporaryPassword\"\n          >\n            <Controller\n              name=\"temporaryPassword\"\n              defaultValue={true}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  className=\"kc-temporaryPassword\"\n                  onChange={field.onChange}\n                  isChecked={field.value}\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  aria-label={t(\"common:temporaryPassword\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </Form>\n      </ConfirmDialogModal>\n    </>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { credResetFormDefaultValues } from \"./ResetCredentialDialog\";\n\nexport const LifespanField = () => {\n  const { t } = useTranslation(\"users\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      fieldId=\"lifespan\"\n      label={t(\"lifespan\")}\n      isStack\n      labelIcon={\n        <HelpItem\n          helpText={t(\"clients-help:lifespan\")}\n          fieldLabelId=\"lifespan\"\n        />\n      }\n    >\n      <Controller\n        name=\"lifespan\"\n        defaultValue={credResetFormDefaultValues.lifespan}\n        control={control}\n        render={({ field }) => (\n          <TimeSelector\n            value={field.value}\n            units={[\"minute\", \"hour\", \"day\"]}\n            onChange={field.onChange}\n            menuAppendTo=\"parent\"\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { ModalVariant, Form, AlertVariant } from \"@patternfly/react-core\";\n\nimport type { RequiredActionAlias } from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport { RequiredActionMultiSelect } from \"./RequiredActionMultiSelect\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { LifespanField } from \"./LifespanField\";\nimport { isEmpty } from \"lodash-es\";\n\ntype ResetCredentialDialogProps = {\n  userId: string;\n  onClose: () => void;\n};\n\ntype CredentialResetForm = {\n  actions: RequiredActionAlias[];\n  lifespan: number;\n};\n\nexport const credResetFormDefaultValues: CredentialResetForm = {\n  actions: [],\n  lifespan: 43200, // 12 hours\n};\n\nexport const ResetCredentialDialog = ({\n  userId,\n  onClose,\n}: ResetCredentialDialogProps) => {\n  const { t } = useTranslation(\"users\");\n  const form = useForm<CredentialResetForm>({\n    defaultValues: credResetFormDefaultValues,\n  });\n  const { handleSubmit, control } = form;\n\n  const resetActionWatcher = useWatch({\n    control,\n    name: \"actions\",\n  });\n  const resetIsNotDisabled = !isEmpty(resetActionWatcher);\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const sendCredentialsResetEmail = async ({\n    actions,\n    lifespan,\n  }: CredentialResetForm) => {\n    if (isEmpty(actions)) {\n      return;\n    }\n\n    try {\n      await adminClient.users.executeActionsEmail({\n        id: userId,\n        actions,\n        lifespan,\n      });\n      addAlert(t(\"credentialResetEmailSuccess\"), AlertVariant.success);\n      onClose();\n    } catch (error) {\n      addError(\"users:credentialResetEmailError\", error);\n    }\n  };\n\n  return (\n    <ConfirmDialogModal\n      variant={ModalVariant.medium}\n      titleKey=\"users:credentialReset\"\n      open\n      onCancel={onClose}\n      toggleDialog={onClose}\n      continueButtonLabel=\"users:credentialResetConfirm\"\n      onConfirm={() => {\n        handleSubmit(sendCredentialsResetEmail)();\n      }}\n      confirmButtonDisabled={!resetIsNotDisabled}\n    >\n      <Form\n        id=\"userCredentialsReset-form\"\n        isHorizontal\n        data-testid=\"credential-reset-modal\"\n      >\n        <FormProvider {...form}>\n          <RequiredActionMultiSelect\n            name=\"actions\"\n            label=\"resetActions\"\n            help=\"clients-help:resetActions\"\n          />\n          <LifespanField />\n        </FormProvider>\n      </Form>\n    </ConfirmDialogModal>\n  );\n};\n","import type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport { AlertVariant, Button, Form, FormGroup } from \"@patternfly/react-core\";\nimport { CheckIcon, PencilAltIcon, TimesIcon } from \"@patternfly/react-icons\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\n\ntype UserLabelForm = {\n  userLabel: string;\n};\n\ntype InlineLabelEditProps = {\n  userId: string;\n  credential: CredentialRepresentation;\n  isEditable: boolean;\n  toggle: () => void;\n};\n\nexport const InlineLabelEdit = ({\n  userId,\n  credential,\n  isEditable,\n  toggle,\n}: InlineLabelEditProps) => {\n  const { t } = useTranslation(\"users\");\n  const { register, handleSubmit } = useForm<UserLabelForm>();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const saveUserLabel = async (userLabel: UserLabelForm) => {\n    try {\n      await adminClient.users.updateCredentialLabel(\n        {\n          id: userId,\n          credentialId: credential.id!,\n        },\n        userLabel.userLabel || \"\"\n      );\n      addAlert(t(\"updateCredentialUserLabelSuccess\"), AlertVariant.success);\n      toggle();\n    } catch (error) {\n      addError(\"users:updateCredentialUserLabelError\", error);\n    }\n  };\n\n  return (\n    <Form\n      isHorizontal\n      className=\"kc-form-userLabel\"\n      onSubmit={handleSubmit(saveUserLabel)}\n    >\n      <FormGroup fieldId=\"kc-userLabel\" className=\"kc-userLabel-row\">\n        <div className=\"kc-form-group-userLabel\">\n          {isEditable ? (\n            <>\n              <KeycloakTextInput\n                data-testid=\"userLabelFld\"\n                defaultValue={credential.userLabel}\n                className=\"kc-userLabel\"\n                aria-label={t(\"userLabel\")}\n                {...register(\"userLabel\")}\n              />\n              <div className=\"kc-userLabel-actionBtns\">\n                <Button\n                  data-testid=\"editUserLabelAcceptBtn\"\n                  variant=\"link\"\n                  className=\"kc-editUserLabelAcceptBtn\"\n                  type=\"submit\"\n                  icon={<CheckIcon />}\n                />\n                <Button\n                  data-testid=\"editUserLabelCancelBtn\"\n                  variant=\"link\"\n                  className=\"kc-editUserLabel-cancelBtn\"\n                  onClick={toggle}\n                  icon={<TimesIcon />}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              {credential.userLabel}\n              <Button\n                aria-label={t(\"editUserLabel\")}\n                variant=\"link\"\n                className=\"kc-editUserLabel-btn\"\n                onClick={toggle}\n                data-testid=\"editUserLabelBtn\"\n                icon={<PencilAltIcon />}\n              />\n            </>\n          )}\n        </div>\n      </FormGroup>\n    </Form>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Modal, ModalVariant } from \"@patternfly/react-core\";\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from \"@patternfly/react-table\";\n\ntype CredentialDataDialogProps = {\n  credentialData: [string, string][];\n  onClose: () => void;\n};\n\nexport const CredentialDataDialog = ({\n  credentialData,\n  onClose,\n}: CredentialDataDialogProps) => {\n  const { t } = useTranslation(\"users\");\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"passwordDataTitle\")}\n      data-testid=\"passwordDataDialog\"\n      isOpen\n      onClose={onClose}\n    >\n      <Table\n        aria-label={t(\"passwordDataTitle\")}\n        data-testid=\"password-data-dialog\"\n        variant={TableVariant.compact}\n        cells={[t(\"showPasswordDataName\"), t(\"showPasswordDataValue\")]}\n        rows={credentialData}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Modal>\n  );\n};\n","import { ReactNode, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Td } from \"@patternfly/react-table\";\nimport {\n  Button,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n  DropdownItem,\n} from \"@patternfly/react-core\";\n\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport useToggle from \"../../utils/useToggle\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\nimport { CredentialDataDialog } from \"./CredentialDataDialog\";\n\ntype CredentialRowProps = {\n  credential: CredentialRepresentation;\n  resetPassword: () => void;\n  toggleDelete: () => void;\n  children: ReactNode;\n};\n\nexport const CredentialRow = ({\n  credential,\n  resetPassword,\n  toggleDelete,\n  children,\n}: CredentialRowProps) => {\n  const { t } = useTranslation(\"users\");\n  const [showData, toggleShow] = useToggle();\n  const [kebabOpen, toggleKebab] = useToggle();\n  const localeSort = useLocaleSort();\n\n  const rows = useMemo(() => {\n    if (!credential.credentialData) {\n      return [];\n    }\n\n    const credentialData: Record<string, unknown> = JSON.parse(\n      credential.credentialData\n    );\n    return localeSort(Object.entries(credentialData), ([key]) => key).map<\n      [string, string]\n    >(([key, value]) => {\n      if (typeof value === \"string\") {\n        return [key, value];\n      }\n\n      return [key, JSON.stringify(value)];\n    });\n  }, [credential.credentialData]);\n\n  return (\n    <>\n      {showData && Object.keys(credential).length !== 0 && (\n        <CredentialDataDialog\n          credentialData={rows}\n          onClose={() => {\n            toggleShow();\n          }}\n        />\n      )}\n\n      <Td>{children}</Td>\n      <Td>\n        <Button\n          className=\"kc-showData-btn\"\n          variant=\"link\"\n          data-testid=\"showDataBtn\"\n          onClick={toggleShow}\n        >\n          {t(\"showDataBtn\")}\n        </Button>\n      </Td>\n      {credential.type === \"password\" ? (\n        <Td isActionCell>\n          <Button\n            variant=\"secondary\"\n            data-testid=\"resetPasswordBtn\"\n            onClick={resetPassword}\n          >\n            {t(\"resetPasswordBtn\")}\n          </Button>\n        </Td>\n      ) : (\n        <Td />\n      )}\n      <Td isActionCell>\n        <Dropdown\n          isPlain\n          position={DropdownPosition.right}\n          toggle={<KebabToggle onToggle={toggleKebab} />}\n          isOpen={kebabOpen}\n          dropdownItems={[\n            <DropdownItem\n              key={credential.id}\n              data-testid=\"deleteDropdownItem\"\n              component=\"button\"\n              onClick={() => {\n                toggleDelete();\n                toggleKebab();\n              }}\n            >\n              {t(\"deleteBtn\")}\n            </DropdownItem>,\n          ]}\n        />\n      </Td>\n    </>\n  );\n};\n","import {\n  Button,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { FederatedUserLink } from \"../FederatedUserLink\";\n\ntype FederatedCredentialsProps = {\n  user: UserRepresentation;\n  onSetPassword: () => void;\n};\n\nexport const FederatedCredentials = ({\n  user,\n  onSetPassword,\n}: FederatedCredentialsProps) => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n\n  const [credentialTypes, setCredentialTypes] = useState<string[]>();\n\n  useFetch(\n    () => adminClient.users.getUserStorageCredentialTypes({ id: user.id! }),\n    setCredentialTypes,\n    []\n  );\n\n  if (!credentialTypes) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <TableComposable variant={\"compact\"}>\n        <Thead>\n          <Tr>\n            <Th>{t(\"type\")}</Th>\n            <Th>{t(\"providedBy\")}</Th>\n            <Th />\n          </Tr>\n        </Thead>\n        <Tbody>\n          {credentialTypes.map((credential) => (\n            <Tr key={credential}>\n              <Td>\n                <b>{credential}</b>\n              </Td>\n              <Td>\n                <FederatedUserLink user={user} />\n              </Td>\n              {credential === \"password\" && (\n                <Td modifier=\"fitContent\">\n                  <Button variant=\"secondary\" onClick={onSetPassword}>\n                    {t(\"setPassword\")}\n                  </Button>\n                </Td>\n              )}\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    </PageSection>\n  );\n};\n","import {\n  DragEvent as ReactDragEvent,\n  Fragment,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n  Button,\n  ButtonVariant,\n  Divider,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { HelpItem } from \"ui-shared\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport { ResetPasswordDialog } from \"./user-credentials/ResetPasswordDialog\";\nimport { ResetCredentialDialog } from \"./user-credentials/ResetCredentialDialog\";\nimport { InlineLabelEdit } from \"./user-credentials/InlineLabelEdit\";\nimport styles from \"@patternfly/react-styles/css/components/Table/table\";\nimport { CredentialRow } from \"./user-credentials/CredentialRow\";\nimport { toUpperCase } from \"../util\";\n\nimport \"./user-credentials.css\";\nimport { FederatedCredentials } from \"./user-credentials/FederatedCredentials\";\n\ntype UserCredentialsProps = {\n  user: UserRepresentation;\n};\n\ntype ExpandableCredentialRepresentation = {\n  key: string;\n  value: CredentialRepresentation[];\n  isExpanded: boolean;\n};\n\nexport const UserCredentials = ({ user }: UserCredentialsProps) => {\n  const { t } = useTranslation(\"users\");\n  const { addAlert, addError } = useAlerts();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [isOpen, setIsOpen] = useState(false);\n  const [openCredentialReset, setOpenCredentialReset] = useState(false);\n  const { adminClient } = useAdminClient();\n  const [userCredentials, setUserCredentials] = useState<\n    CredentialRepresentation[]\n  >([]);\n  const [groupedUserCredentials, setGroupedUserCredentials] = useState<\n    ExpandableCredentialRepresentation[]\n  >([]);\n  const [selectedCredential, setSelectedCredential] =\n    useState<CredentialRepresentation>({});\n  const [isResetPassword, setIsResetPassword] = useState(false);\n  const [isUserLabelEdit, setIsUserLabelEdit] = useState<{\n    status: boolean;\n    rowKey: string;\n  }>();\n\n  const bodyRef = useRef<HTMLTableSectionElement>(null);\n  const [state, setState] = useState({\n    draggedItemId: \"\",\n    draggingToItemIndex: -1,\n    dragging: false,\n    tempItemOrder: [\"\"],\n  });\n\n  useFetch(\n    () => adminClient.users.getCredentials({ id: user.id! }),\n    (credentials) => {\n      setUserCredentials(credentials);\n\n      const groupedCredentials = credentials.reduce((r, a) => {\n        r[a.type!] = r[a.type!] || [];\n        r[a.type!].push(a);\n        return r;\n      }, Object.create(null));\n\n      const groupedCredentialsArray = Object.keys(groupedCredentials).map(\n        (key) => ({ key, value: groupedCredentials[key] })\n      );\n\n      setGroupedUserCredentials(\n        groupedCredentialsArray.map((groupedCredential) => ({\n          ...groupedCredential,\n          isExpanded: false,\n        }))\n      );\n    },\n    [key]\n  );\n\n  const passwordTypeFinder = userCredentials.find(\n    (credential) => credential.type === \"password\"\n  );\n\n  const toggleModal = () => setIsOpen(!isOpen);\n\n  const toggleCredentialsResetModal = () => {\n    setOpenCredentialReset(!openCredentialReset);\n  };\n\n  const resetPassword = () => {\n    setIsResetPassword(true);\n    toggleModal();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteCredentialsConfirmTitle\"),\n    messageKey: t(\"deleteCredentialsConfirm\"),\n    continueButtonLabel: t(\"common:delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.deleteCredential({\n          id: user.id!,\n          credentialId: selectedCredential.id!,\n        });\n        addAlert(t(\"deleteCredentialsSuccess\"), AlertVariant.success);\n        setKey((key) => key + 1);\n      } catch (error) {\n        addError(\"users:deleteCredentialsError\", error);\n      }\n    },\n  });\n\n  const Row = ({ credential }: { credential: CredentialRepresentation }) => (\n    <CredentialRow\n      key={credential.id}\n      credential={credential}\n      toggleDelete={() => {\n        setSelectedCredential(credential);\n        toggleDeleteDialog();\n      }}\n      resetPassword={resetPassword}\n    >\n      <InlineLabelEdit\n        credential={credential}\n        userId={user.id!}\n        isEditable={\n          (isUserLabelEdit?.status &&\n            isUserLabelEdit.rowKey === credential.id) ||\n          false\n        }\n        toggle={() => {\n          setIsUserLabelEdit({\n            status: !isUserLabelEdit?.status,\n            rowKey: credential.id!,\n          });\n          if (isUserLabelEdit?.status) {\n            refresh();\n          }\n        }}\n      />\n    </CredentialRow>\n  );\n\n  const itemOrder = useMemo(\n    () =>\n      groupedUserCredentials.flatMap((groupedCredential) => [\n        groupedCredential.value.map(({ id }) => id).toString(),\n        ...(groupedCredential.isExpanded\n          ? groupedCredential.value.map((c) => c.id!)\n          : []),\n      ]),\n    [groupedUserCredentials]\n  );\n\n  const onDragStart = (evt: ReactDragEvent) => {\n    evt.dataTransfer.effectAllowed = \"move\";\n    evt.dataTransfer.setData(\"text/plain\", evt.currentTarget.id);\n    const draggedItemId = evt.currentTarget.id;\n    evt.currentTarget.classList.add(styles.modifiers.ghostRow);\n    evt.currentTarget.setAttribute(\"aria-pressed\", \"true\");\n    setState({ ...state, draggedItemId, dragging: true });\n  };\n\n  const moveItem = (items: string[], targetItem: string, toIndex: number) => {\n    const fromIndex = items.indexOf(targetItem);\n    if (fromIndex === toIndex) {\n      return items;\n    }\n    const result = [...items];\n    result.splice(toIndex, 0, result.splice(fromIndex, 1)[0]);\n    return result;\n  };\n\n  const move = (itemOrder: string[]) => {\n    if (!bodyRef.current) return;\n    const ulNode = bodyRef.current;\n    const nodes = Array.from(ulNode.children);\n    if (nodes.every(({ id }, i) => id === itemOrder[i])) {\n      return;\n    }\n    ulNode.replaceChildren();\n    itemOrder.forEach((itemId) => {\n      ulNode.appendChild(nodes.find(({ id }) => id === itemId)!);\n    });\n  };\n\n  const onDragCancel = () => {\n    if (!bodyRef.current) return;\n    Array.from(bodyRef.current.children).forEach((el) => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.setAttribute(\"aria-pressed\", \"false\");\n    });\n    setState({\n      ...state,\n      draggedItemId: \"\",\n      draggingToItemIndex: -1,\n      dragging: false,\n    });\n  };\n\n  const onDragLeave = (evt: ReactDragEvent) => {\n    if (!isValidDrop(evt)) {\n      move(itemOrder);\n      setState({ ...state, draggingToItemIndex: -1 });\n    }\n  };\n\n  const isValidDrop = (evt: ReactDragEvent) => {\n    if (!bodyRef.current) return false;\n    const ulRect = bodyRef.current.getBoundingClientRect();\n    return (\n      evt.clientX > ulRect.x &&\n      evt.clientX < ulRect.x + ulRect.width &&\n      evt.clientY > ulRect.y &&\n      evt.clientY < ulRect.y + ulRect.height\n    );\n  };\n\n  const onDrop = (evt: ReactDragEvent) => {\n    if (isValidDrop(evt)) {\n      onDragFinish(state.draggedItemId, state.tempItemOrder);\n    } else {\n      onDragCancel();\n    }\n  };\n\n  const onDragOver = (evt: ReactDragEvent) => {\n    evt.preventDefault();\n    const td = evt.target as HTMLTableCellElement;\n    const curListItem = td.closest(\"tr\");\n    if (\n      !curListItem ||\n      (bodyRef.current && !bodyRef.current.contains(curListItem)) ||\n      curListItem.id === state.draggedItemId\n    ) {\n      return;\n    } else {\n      const dragId = curListItem.id;\n      const draggingToItemIndex = Array.from(\n        bodyRef.current?.children || []\n      ).findIndex((item) => item.id === dragId);\n      if (draggingToItemIndex === state.draggingToItemIndex) {\n        return;\n      }\n      const tempItemOrder = moveItem(\n        itemOrder,\n        state.draggedItemId,\n        draggingToItemIndex\n      );\n      move(tempItemOrder);\n      setState({\n        ...state,\n        draggingToItemIndex,\n        tempItemOrder,\n      });\n    }\n  };\n\n  const onDragEnd = ({ target }: ReactDragEvent) => {\n    if (!(target instanceof HTMLTableRowElement)) {\n      return;\n    }\n    target.classList.remove(styles.modifiers.ghostRow);\n    target.setAttribute(\"aria-pressed\", \"false\");\n    setState({\n      ...state,\n      draggedItemId: \"\",\n      draggingToItemIndex: -1,\n      dragging: false,\n    });\n  };\n\n  const onDragFinish = async (dragged: string, newOrder: string[]) => {\n    const oldIndex = itemOrder.findIndex((key) => key === dragged);\n    const newIndex = newOrder.findIndex((key) => key === dragged);\n    const times = newIndex - oldIndex;\n\n    const ids = dragged.split(\",\");\n\n    try {\n      for (const id of ids)\n        for (let index = 0; index < Math.abs(times); index++) {\n          if (times > 0) {\n            await adminClient.users.moveCredentialPositionDown({\n              id: user.id!,\n              credentialId: id,\n              newPreviousCredentialId: itemOrder[newIndex],\n            });\n          } else {\n            await adminClient.users.moveCredentialPositionUp({\n              id: user.id!,\n              credentialId: id,\n            });\n          }\n        }\n\n      refresh();\n      addAlert(t(\"users:updatedCredentialMoveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"users:updatedCredentialMoveError\", error);\n    }\n  };\n\n  return (\n    <>\n      {isOpen && (\n        <ResetPasswordDialog\n          user={user}\n          isResetPassword={isResetPassword}\n          refresh={refresh}\n          onClose={() => setIsOpen(false)}\n        />\n      )}\n      {openCredentialReset && (\n        <ResetCredentialDialog\n          userId={user.id!}\n          onClose={() => setOpenCredentialReset(false)}\n        />\n      )}\n      <DeleteConfirm />\n      {user.email && (\n        <Button\n          className=\"kc-resetCredentialBtn-header\"\n          variant=\"primary\"\n          data-testid=\"credentialResetBtn\"\n          onClick={() => setOpenCredentialReset(true)}\n        >\n          {t(\"credentialResetBtn\")}\n        </Button>\n      )}\n      {userCredentials.length !== 0 && passwordTypeFinder === undefined && (\n        <>\n          <Button\n            className=\"kc-setPasswordBtn-tbl\"\n            data-testid=\"setPasswordBtn-table\"\n            variant=\"primary\"\n            form=\"userCredentials-form\"\n            onClick={() => {\n              setIsOpen(true);\n            }}\n          >\n            {t(\"setPassword\")}\n          </Button>\n          <Divider />\n        </>\n      )}\n      {groupedUserCredentials.length !== 0 && (\n        <PageSection variant={PageSectionVariants.light}>\n          <TableComposable variant={\"compact\"}>\n            <Thead>\n              <Tr className=\"kc-table-header\">\n                <Th>\n                  <HelpItem\n                    helpText={t(\"users:userCredentialsHelpText\")}\n                    fieldLabelId=\"users:userCredentialsHelpTextLabel\"\n                  />\n                </Th>\n                <Th />\n                <Th>{t(\"type\")}</Th>\n                <Th>{t(\"userLabel\")}</Th>\n                <Th>{t(\"data\")}</Th>\n                <Th />\n                <Th />\n              </Tr>\n            </Thead>\n            <Tbody\n              ref={bodyRef}\n              onDragOver={onDragOver}\n              onDrop={onDragOver}\n              onDragLeave={onDragLeave}\n            >\n              {groupedUserCredentials.map((groupedCredential, rowIndex) => (\n                <Fragment key={groupedCredential.key}>\n                  <Tr\n                    id={groupedCredential.value.map(({ id }) => id).toString()}\n                    draggable={groupedUserCredentials.length > 1}\n                    onDrop={onDrop}\n                    onDragEnd={onDragEnd}\n                    onDragStart={onDragStart}\n                  >\n                    <Td\n                      className={\n                        groupedUserCredentials.length === 1 ? \"one-row\" : \"\"\n                      }\n                      draggableRow={{\n                        id: `draggable-row-${groupedCredential.value.map(\n                          ({ id }) => id\n                        )}`,\n                      }}\n                    />\n                    {groupedCredential.value.length > 1 ? (\n                      <Td\n                        className=\"kc-expandRow-btn\"\n                        expand={{\n                          rowIndex,\n                          isExpanded: groupedCredential.isExpanded,\n                          onToggle: (_, rowIndex) => {\n                            const rows = groupedUserCredentials.map(\n                              (credential, index) =>\n                                index === rowIndex\n                                  ? {\n                                      ...credential,\n                                      isExpanded: !credential.isExpanded,\n                                    }\n                                  : credential\n                            );\n                            setGroupedUserCredentials(rows);\n                          },\n                        }}\n                      />\n                    ) : (\n                      <Td />\n                    )}\n                    <Td\n                      dataLabel={`columns-${groupedCredential.key}`}\n                      className=\"kc-notExpandableRow-credentialType\"\n                      data-testid=\"credentialType\"\n                    >\n                      {toUpperCase(groupedCredential.key)}\n                    </Td>\n                    {groupedCredential.value.length <= 1 &&\n                      groupedCredential.value.map((credential) => (\n                        <Row key={credential.id} credential={credential} />\n                      ))}\n                  </Tr>\n                  {groupedCredential.isExpanded &&\n                    groupedCredential.value.map((credential) => (\n                      <Tr\n                        key={credential.id}\n                        id={credential.id}\n                        draggable\n                        onDrop={onDrop}\n                        onDragEnd={onDragEnd}\n                        onDragStart={onDragStart}\n                      >\n                        <Td />\n                        <Td\n                          className=\"kc-draggable-dropdown-type-icon\"\n                          draggableRow={{\n                            id: `draggable-row-${groupedCredential.value.map(\n                              ({ id }) => id\n                            )}`,\n                          }}\n                        />\n                        <Td\n                          dataLabel={`child-columns-${credential.id}`}\n                          className=\"kc-expandableRow-credentialType\"\n                        >\n                          {toUpperCase(credential.type!)}\n                        </Td>\n                        <Row credential={credential} />\n                      </Tr>\n                    ))}\n                </Fragment>\n              ))}\n            </Tbody>\n          </TableComposable>\n        </PageSection>\n      )}\n      {(user.federationLink || user.origin) && (\n        <FederatedCredentials user={user} onSetPassword={toggleModal} />\n      )}\n      {groupedUserCredentials.length === 0 &&\n        !(user.federationLink || user.origin) && (\n          <ListEmptyState\n            hasIcon\n            message={t(\"noCredentials\")}\n            instructions={t(\"noCredentialsText\")}\n            primaryActionText={t(\"setPassword\")}\n            onPrimaryAction={toggleModal}\n            secondaryActions={\n              user.email\n                ? [\n                    {\n                      text: t(\"credentialResetBtn\"),\n                      onClick: toggleCredentialsResetModal,\n                      type: ButtonVariant.link,\n                    },\n                  ]\n                : undefined\n            }\n          />\n        )}\n    </>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  Popover,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { intersectionBy, sortBy } from \"lodash-es\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { GroupPath } from \"../components/group/GroupPath\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { useHelp } from \"ui-shared\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { emptyFormatter } from \"../util\";\nimport { useAccess } from \"../context/access/Access\";\n\ntype UserGroupsProps = {\n  user: UserRepresentation;\n};\n\nexport const UserGroups = ({ user }: UserGroupsProps) => {\n  const { t } = useTranslation(\"users\");\n  const { addAlert, addError } = useAlerts();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    []\n  );\n  const [search, setSearch] = useState(\"\");\n\n  const [isDirectMembership, setDirectMembership] = useState(true);\n  const [directMembershipList, setDirectMembershipList] = useState<\n    GroupRepresentation[]\n  >([]);\n  const [open, setOpen] = useState(false);\n\n  const { enabled } = useHelp();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\");\n\n  const { adminClient } = useAdminClient();\n  const alphabetize = (groupsList: GroupRepresentation[]) => {\n    return sortBy(groupsList, (group) => group.path?.toUpperCase());\n  };\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max!,\n    };\n\n    const searchParam = search || \"\";\n    if (searchParam) {\n      params.search = searchParam;\n      setSearch(searchParam);\n    }\n\n    const joinedUserGroups = await adminClient.users.listGroups({\n      ...params,\n      id: user.id!,\n    });\n\n    const allCreatedGroups = await adminClient.groups.find();\n\n    const getAllPaths = joinedUserGroups.reduce(\n      (acc: string[], cur) => (cur.path && acc.push(cur.path), acc),\n      []\n    );\n    const parentGroupNames: string[] = [];\n    const allGroupMembership: string[] = [];\n    const slicedGroups: string[] = [];\n    const rootLevelGroups: GroupRepresentation[] = [...allCreatedGroups];\n    let allPaths: GroupRepresentation[] = [];\n\n    const getAllSubgroupPaths = (\n      o: any,\n      f: any,\n      context: GroupRepresentation[]\n    ): GroupRepresentation[] => {\n      f(o, context);\n      if (typeof o !== \"object\") return context;\n      if (Array.isArray(o))\n        return o.forEach((e) => getAllSubgroupPaths(e, f, context)), context;\n      for (const prop in o) getAllSubgroupPaths(o[prop], f, context);\n      return context;\n    };\n\n    const arr = getAllSubgroupPaths(\n      rootLevelGroups,\n      (\n        x: GroupRepresentation | undefined,\n        context: GroupRepresentation[][]\n      ) => {\n        if (x?.subGroups) context.push(x.subGroups);\n      },\n      []\n    );\n\n    const allSubgroups: GroupRepresentation[] = [].concat(...(arr as any));\n\n    allPaths = [...rootLevelGroups, ...allSubgroups];\n\n    getAllPaths.forEach((item) => {\n      const paths = item.split(\"/\");\n      const groups: string[] = [];\n\n      paths.reduce((acc, value) => {\n        const path = acc + \"/\" + value;\n        groups.push(path);\n        return path;\n      }, \"\");\n\n      for (let i = 1; i < groups.length; i++) {\n        slicedGroups.push(groups[i].substring(1));\n      }\n    });\n\n    allGroupMembership.push(...slicedGroups);\n\n    allPaths.forEach((item) => {\n      if (item.subGroups!.length !== 0) {\n        allPaths.push(...item!.subGroups!);\n      }\n    });\n\n    allPaths = allPaths.filter((group) =>\n      allGroupMembership.includes(group.path as any)\n    );\n\n    const topLevelGroups = allCreatedGroups.filter((value) =>\n      parentGroupNames.includes(value.name!)\n    );\n\n    const subgroupArray: any[] = [];\n\n    topLevelGroups.forEach((group) => subgroupArray.push(group.subGroups));\n\n    const directMembership = joinedUserGroups!.filter(\n      (value) => !topLevelGroups.includes(value)\n    );\n\n    setDirectMembershipList(directMembership);\n\n    const filterDupesfromGroups = allPaths.filter(\n      (thing, index, self) =>\n        index === self.findIndex((t) => t.name === thing.name)\n    );\n\n    if (!isDirectMembership) {\n      return alphabetize(filterDupesfromGroups);\n    }\n\n    return alphabetize(directMembership);\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [isDirectMembership]);\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"leaveGroup\", {\n      count: selectedGroups.length,\n      name: selectedGroups[0]?.name,\n    }),\n    messageKey: t(\"leaveGroupConfirmDialog\", {\n      count: selectedGroups.length,\n      groupname: selectedGroups[0]?.name,\n      username: user.username,\n    }),\n    continueButtonLabel: \"leave\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await Promise.all(\n          selectedGroups.map((group) =>\n            adminClient.users.delFromGroup({\n              id: user.id!,\n              groupId: group.id!,\n            })\n          )\n        );\n        refresh();\n        addAlert(t(\"removedGroupMembership\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:removedGroupMembershipError\", error);\n      }\n    },\n  });\n\n  const leave = (group: GroupRepresentation[]) => {\n    setSelectedGroups(group);\n    toggleDeleteDialog();\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]): Promise<void> => {\n    const newGroups = groups;\n\n    newGroups.forEach(async (group) => {\n      try {\n        await adminClient.users.addToGroup({\n          id: user.id!,\n          groupId: group.id!,\n        });\n        refresh();\n        addAlert(t(\"addedGroupMembership\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:addedGroupMembershipError\", error);\n      }\n    });\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      {open && (\n        <GroupPickerDialog\n          id={user.id}\n          type=\"selectMany\"\n          text={{\n            title: t(\"joinGroupsFor\", { username: user.username }),\n            ok: \"users:join\",\n          }}\n          canBrowse={isManager}\n          onClose={() => setOpen(false)}\n          onConfirm={(groups) => {\n            addGroups(groups || []);\n            setOpen(false);\n            refresh();\n          }}\n        />\n      )}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        className=\"keycloak_user-section_groups-table\"\n        isPaginated\n        ariaLabelKey=\"roles:roleList\"\n        searchPlaceholderKey=\"groups:searchGroup\"\n        canSelectAll\n        onSelect={(groups) =>\n          isDirectMembership\n            ? setSelectedGroups(groups)\n            : setSelectedGroups(\n                intersectionBy(groups, directMembershipList, \"id\")\n              )\n        }\n        isRowDisabled={(group) =>\n          !isDirectMembership &&\n          directMembershipList.every((item) => item.id !== group.id)\n        }\n        toolbarItem={\n          <>\n            <Button\n              className=\"kc-join-group-button\"\n              onClick={toggleModal}\n              data-testid=\"add-group-button\"\n              isDisabled={!user.access?.manageGroupMembership}\n            >\n              {t(\"joinGroup\")}\n            </Button>\n            <Checkbox\n              label={t(\"directMembership\")}\n              key=\"direct-membership-check\"\n              id=\"kc-direct-membership-checkbox\"\n              onChange={() => setDirectMembership(!isDirectMembership)}\n              isChecked={isDirectMembership}\n              className=\"direct-membership-check\"\n            />\n            <Button\n              onClick={() => leave(selectedGroups)}\n              data-testid=\"leave-group-button\"\n              variant=\"link\"\n              isDisabled={selectedGroups.length === 0}\n            >\n              {t(\"leave\")}\n            </Button>\n\n            {enabled && (\n              <Popover\n                aria-label=\"Basic popover\"\n                position=\"bottom\"\n                bodyContent={<div>{t(\"whoWillAppearPopoverText\")}</div>}\n              >\n                <Button\n                  variant=\"link\"\n                  className=\"kc-who-will-appear-button\"\n                  key=\"who-will-appear-button\"\n                  icon={<QuestionCircleIcon />}\n                >\n                  {t(\"whoWillAppearLinkText\")}\n                </Button>\n              </Popover>\n            )}\n          </>\n        }\n        columns={[\n          {\n            name: \"groupMembership\",\n            displayKey: \"users:groupMembership\",\n            cellRenderer: (group: GroupRepresentation) => group.name || \"\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(40)],\n          },\n          {\n            name: \"path\",\n            displayKey: \"users:path\",\n            cellRenderer: (group: GroupRepresentation) => (\n              <GroupPath group={group} />\n            ),\n            transforms: [cellWidth(45)],\n          },\n\n          {\n            name: \"\",\n            cellRenderer: (group: GroupRepresentation) => {\n              const canLeaveGroup =\n                directMembershipList.some((item) => item.id === group.id) ||\n                directMembershipList.length === 0 ||\n                isDirectMembership;\n              return canLeaveGroup ? (\n                <Button\n                  data-testid={`leave-${group.name}`}\n                  onClick={() => leave([group])}\n                  variant=\"link\"\n                  isDisabled={!user.access?.manageGroupMembership}\n                >\n                  {t(\"leave\")}\n                </Button>\n              ) : (\n                \"\"\n              );\n            },\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(20)],\n          },\n        ]}\n        emptyState={\n          !search ? (\n            <ListEmptyState\n              hasIcon={true}\n              message={t(\"noGroups\")}\n              instructions={t(\"noGroupsText\")}\n              primaryActionText={t(\"joinGroup\")}\n              onPrimaryAction={toggleModal}\n            />\n          ) : (\n            \"\"\n          )\n        }\n      />\n    </>\n  );\n};\n","import type FederatedIdentityRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/federatedIdentityRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { capitalize } from \"lodash-es\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\n\ntype UserIdpModalProps = {\n  userId: string;\n  federatedId: string;\n  onClose: () => void;\n  onRefresh: () => void;\n};\n\nexport const UserIdpModal = ({\n  userId,\n  federatedId,\n  onClose,\n  onRefresh,\n}: UserIdpModalProps) => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const {\n    register,\n    handleSubmit,\n    formState: { isValid, errors },\n  } = useForm<FederatedIdentityRepresentation>({\n    mode: \"onChange\",\n  });\n\n  const onSubmit = async (\n    federatedIdentity: FederatedIdentityRepresentation\n  ) => {\n    try {\n      await adminClient.users.addToFederatedIdentity({\n        id: userId,\n        federatedIdentityId: federatedId,\n        federatedIdentity,\n      });\n      addAlert(t(\"users:idpLinkSuccess\"), AlertVariant.success);\n      onClose();\n      onRefresh();\n    } catch (error) {\n      addError(\"users:couldNotLinkIdP\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"users:linkAccountTitle\", {\n        provider: capitalize(federatedId),\n      })}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"group-form\"\n          isDisabled={!isValid}\n        >\n          {t(\"link\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <Form id=\"group-form\" onSubmit={handleSubmit(onSubmit)}>\n        <FormGroup\n          label={t(\"users:identityProvider\")}\n          fieldId=\"identityProvider\"\n        >\n          <KeycloakTextInput\n            id=\"identityProvider\"\n            data-testid=\"idpNameInput\"\n            value={capitalize(federatedId)}\n            isReadOnly\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"users:userID\")}\n          fieldId=\"userID\"\n          helperText={t(\"users-help:userIdHelperText\")}\n          helperTextInvalid={t(\"common:required\")}\n          validated={\n            errors.userId ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            id=\"userID\"\n            data-testid=\"userIdInput\"\n            validated={\n              errors.userId ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            autoFocus\n            {...register(\"userId\", { required: true })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"users:username\")}\n          fieldId=\"username\"\n          helperText={t(\"users-help:usernameHelperText\")}\n          helperTextInvalid={t(\"common:required\")}\n          validated={\n            errors.userName ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            id=\"username\"\n            data-testid=\"usernameInput\"\n            validated={\n              errors.userName\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            {...register(\"userName\", { required: true })}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import type FederatedIdentityRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/federatedIdentityRepresentation\";\nimport type IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Label,\n  PageSection,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { capitalize } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { FormPanel } from \"../components/scroll-form/FormPanel\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { toIdentityProvider } from \"../identity-providers/routes/IdentityProvider\";\nimport { emptyFormatter, upperCaseFormatter } from \"../util\";\nimport { UserIdpModal } from \"./UserIdPModal\";\n\ntype UserIdentityProviderLinksProps = {\n  userId: string;\n};\n\nexport const UserIdentityProviderLinks = ({\n  userId,\n}: UserIdentityProviderLinksProps) => {\n  const [key, setKey] = useState(0);\n  const [federatedId, setFederatedId] = useState(\"\");\n  const [isLinkIdPModalOpen, setIsLinkIdPModalOpen] = useState(false);\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const { t } = useTranslation(\"users\");\n\n  const refresh = () => setKey(new Date().getTime());\n\n  type WithProviderId = FederatedIdentityRepresentation & {\n    providerId: string;\n  };\n\n  const identityProviders = useServerInfo().identityProviders;\n\n  const getFederatedIdentities = async () => {\n    const allProviders = await adminClient.identityProviders.find();\n\n    const allFedIds = (await adminClient.users.listFederatedIdentities({\n      id: userId,\n    })) as WithProviderId[];\n    for (const element of allFedIds) {\n      element.providerId = allProviders.find(\n        (item) => item.alias === element.identityProvider\n      )?.providerId!;\n    }\n\n    return allFedIds;\n  };\n\n  const getAvailableIdPs = async () => {\n    return (await adminClient.realms.findOne({ realm }))!.identityProviders;\n  };\n\n  const linkedIdPsLoader = async () => {\n    return getFederatedIdentities();\n  };\n\n  const availableIdPsLoader = async () => {\n    const linkedNames = (await getFederatedIdentities()).map(\n      (x) => x.identityProvider\n    );\n\n    return (await getAvailableIdPs())?.filter(\n      (item) => !linkedNames.includes(item.alias)\n    )!;\n  };\n\n  const [toggleUnlinkDialog, UnlinkConfirm] = useConfirmDialog({\n    titleKey: t(\"users:unlinkAccountTitle\", {\n      provider: capitalize(federatedId),\n    }),\n    messageKey: t(\"users:unlinkAccountConfirm\", {\n      provider: capitalize(federatedId),\n    }),\n    continueButtonLabel: \"users:unlink\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.delFromFederatedIdentity({\n          id: userId,\n          federatedIdentityId: federatedId,\n        });\n        addAlert(t(\"users:idpUnlinkSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"common:mappingDeletedError\", error);\n      }\n    },\n  });\n\n  const idpLinkRenderer = (idp: WithProviderId) => {\n    return (\n      <Link\n        to={toIdentityProvider({\n          realm,\n          providerId: idp.providerId,\n          alias: idp.identityProvider!,\n          tab: \"settings\",\n        })}\n      >\n        {capitalize(idp.identityProvider)}\n      </Link>\n    );\n  };\n\n  const badgeRenderer1 = (idp: FederatedIdentityRepresentation) => {\n    const groupName = identityProviders?.find(\n      (provider) => provider[\"id\"] === idp.identityProvider\n    )?.groupName!;\n    return (\n      <Label color={groupName === \"Social\" ? \"blue\" : \"orange\"}>\n        {groupName === \"Social\"\n          ? t(\"users:idpType.social\")\n          : t(\"users:idpType.custom\")}\n      </Label>\n    );\n  };\n\n  const badgeRenderer2 = (idp: IdentityProviderRepresentation) => {\n    const groupName = identityProviders?.find(\n      (provider) => provider[\"id\"] === idp.providerId\n    )?.groupName!;\n    return (\n      <Label color={groupName === \"User-defined\" ? \"orange\" : \"blue\"}>\n        {groupName === \"User-defined\"\n          ? \"Custom\"\n          : groupName! === \"Social\"\n          ? t(\"users:idpType.social\")\n          : groupName!}\n      </Label>\n    );\n  };\n\n  const unlinkRenderer = (fedIdentity: FederatedIdentityRepresentation) => {\n    return (\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          setFederatedId(fedIdentity.identityProvider!);\n          toggleUnlinkDialog();\n        }}\n      >\n        {t(\"unlinkAccount\")}\n      </Button>\n    );\n  };\n\n  const linkRenderer = (idp: IdentityProviderRepresentation) => {\n    return (\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          setFederatedId(idp.alias!);\n          setIsLinkIdPModalOpen(true);\n        }}\n      >\n        {t(\"linkAccount\")}\n      </Button>\n    );\n  };\n\n  return (\n    <>\n      {isLinkIdPModalOpen && (\n        <UserIdpModal\n          userId={userId}\n          federatedId={federatedId}\n          onClose={() => setIsLinkIdPModalOpen(false)}\n          onRefresh={refresh}\n        />\n      )}\n      <UnlinkConfirm />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <FormPanel title={t(\"linkedIdPs\")} className=\"kc-linked-idps\">\n          <TextContent>\n            <Text className=\"kc-available-idps-text\">\n              {t(\"linkedIdPsText\")}\n            </Text>\n          </TextContent>\n          <KeycloakDataTable\n            loader={linkedIdPsLoader}\n            key={key}\n            isPaginated={false}\n            ariaLabelKey=\"users:LinkedIdPs\"\n            className=\"kc-linked-IdPs-table\"\n            columns={[\n              {\n                name: \"identityProvider\",\n                displayKey: \"common:name\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: idpLinkRenderer,\n                transforms: [cellWidth(20)],\n              },\n              {\n                name: \"type\",\n                displayKey: \"common:type\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: badgeRenderer1,\n                transforms: [cellWidth(10)],\n              },\n              {\n                name: \"userId\",\n                displayKey: \"users:userID\",\n                cellFormatters: [emptyFormatter()],\n                transforms: [cellWidth(30)],\n              },\n              {\n                name: \"userName\",\n                displayKey: \"users:username\",\n                cellFormatters: [emptyFormatter()],\n                transforms: [cellWidth(20)],\n              },\n              {\n                name: \"\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: unlinkRenderer,\n                transforms: [cellWidth(20)],\n              },\n            ]}\n            emptyState={\n              <TextContent className=\"kc-no-providers-text\">\n                <Text>{t(\"users:noProvidersLinked\")}</Text>\n              </TextContent>\n            }\n          />\n        </FormPanel>\n        <FormPanel className=\"kc-available-idps\" title={t(\"availableIdPs\")}>\n          <TextContent>\n            <Text className=\"kc-available-idps-text\">\n              {t(\"availableIdPsText\")}\n            </Text>\n          </TextContent>\n          <KeycloakDataTable\n            loader={availableIdPsLoader}\n            key={key}\n            isPaginated={false}\n            ariaLabelKey=\"users:LinkedIdPs\"\n            className=\"kc-linked-IdPs-table\"\n            columns={[\n              {\n                name: \"alias\",\n                displayKey: \"common:name\",\n                cellFormatters: [emptyFormatter(), upperCaseFormatter()],\n                transforms: [cellWidth(20)],\n              },\n              {\n                name: \"type\",\n                displayKey: \"common:type\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: badgeRenderer2,\n                transforms: [cellWidth(60)],\n              },\n              {\n                name: \"\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: linkRenderer,\n              },\n            ]}\n            emptyState={\n              <TextContent className=\"kc-no-providers-text\">\n                <Text>{t(\"users:noAvailableIdentityProviders\")}</Text>\n              </TextContent>\n            }\n          />\n        </FormPanel>\n      </PageSection>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { AlertVariant } from \"@patternfly/react-core\";\n\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { RoleMapping, Row } from \"../components/role-mapping/RoleMapping\";\n\ntype UserRoleMappingProps = {\n  id: string;\n  name: string;\n};\n\nexport const UserRoleMapping = ({ id, name }: UserRoleMappingProps) => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.users.addRealmRoleMappings({\n        id,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.users.addClientRoleMappings({\n              id,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            })\n          )\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:roleMappingUpdatedError\", error);\n    }\n  };\n\n  return <RoleMapping name={name} id={id} type=\"users\" save={assignRoles} />;\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport SessionsTable from \"../sessions/SessionsTable\";\nimport { useParams } from \"../utils/useParams\";\nimport type { UserParams } from \"./routes/User\";\n\nexport const UserSessions = () => {\n  const { adminClient } = useAdminClient();\n  const { id } = useParams<UserParams>();\n  const { realm } = useRealm();\n  const { t } = useTranslation(\"sessions\");\n\n  const loader = () => adminClient.users.listSessions({ id, realm });\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <SessionsTable\n        loader={loader}\n        hiddenColumns={[\"username\", \"type\"]}\n        emptyInstructions={t(\"noSessionsForUser\")}\n        logoutUser={id}\n      />\n    </PageSection>\n  );\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n  Tab,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { UserProfileProvider } from \"../realm-settings/user-profile/UserProfileContext\";\nimport { useParams } from \"../utils/useParams\";\nimport { toUser, UserParams, UserTab } from \"./routes/User\";\nimport { toUsers } from \"./routes/Users\";\nimport { UserAttributes } from \"./UserAttributes\";\nimport { UserConsents } from \"./UserConsents\";\nimport { UserCredentials } from \"./UserCredentials\";\nimport { BruteForced, UserForm } from \"./UserForm\";\nimport { UserGroups } from \"./UserGroups\";\nimport { UserIdentityProviderLinks } from \"./UserIdentityProviderLinks\";\nimport {\n  isUserProfileError,\n  userProfileErrorToString,\n} from \"./UserProfileFields\";\nimport { UserRoleMapping } from \"./UserRoleMapping\";\nimport { UserSessions } from \"./UserSessions\";\n\nimport \"./user-section.css\";\n\nexport default function EditUser() {\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { id } = useParams<UserParams>();\n  const { t } = useTranslation(\"users\");\n  const [user, setUser] = useState<UserRepresentation>();\n  const [bruteForced, setBruteForced] = useState<BruteForced>();\n  const [refreshCount, setRefreshCount] = useState(0);\n  const refresh = () => setRefreshCount((count) => count + 1);\n\n  useFetch(\n    async () => {\n      const [user, currentRealm, attackDetection] = await Promise.all([\n        adminClient.users.findOne({ id: id! }),\n        adminClient.realms.findOne({ realm }),\n        adminClient.attackDetection.findOne({ id: id! }),\n      ]);\n\n      if (!user || !currentRealm || !attackDetection) {\n        throw new Error(t(\"common:notFound\"));\n      }\n\n      const isBruteForceProtected = currentRealm.bruteForceProtected;\n      const isLocked = isBruteForceProtected && attackDetection.disabled;\n\n      return { user, bruteForced: { isBruteForceProtected, isLocked } };\n    },\n    ({ user, bruteForced }) => {\n      setUser(user);\n      setBruteForced(bruteForced);\n    },\n    [refreshCount]\n  );\n\n  if (!user || !bruteForced) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <EditUserForm user={user} bruteForced={bruteForced} refresh={refresh} />\n  );\n}\n\ntype EditUserFormProps = {\n  user: UserRepresentation;\n  bruteForced: BruteForced;\n  refresh: () => void;\n};\n\nconst EditUserForm = ({ user, bruteForced, refresh }: EditUserFormProps) => {\n  const { t } = useTranslation(\"users\");\n  const { realm } = useRealm();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { hasAccess } = useAccess();\n  const userForm = useForm<UserRepresentation>({\n    mode: \"onChange\",\n    defaultValues: user,\n  });\n\n  const toTab = (tab: UserTab) =>\n    toUser({\n      realm,\n      id: user.id!,\n      tab,\n    });\n\n  const useTab = (tab: UserTab) => useRoutableTab(toTab(tab));\n\n  const settingsTab = useTab(\"settings\");\n  const attributesTab = useTab(\"attributes\");\n  const credentialsTab = useTab(\"credentials\");\n  const roleMappingTab = useTab(\"role-mapping\");\n  const groupsTab = useTab(\"groups\");\n  const consentsTab = useTab(\"consents\");\n  const identityProviderLinksTab = useTab(\"identity-provider-links\");\n  const sessionsTab = useTab(\"sessions\");\n\n  const save = async (formUser: UserRepresentation) => {\n    try {\n      await adminClient.users.update(\n        { id: user.id! },\n        {\n          ...formUser,\n          username: formUser.username?.trim(),\n          attributes: { ...user.attributes, ...formUser.attributes },\n        }\n      );\n      addAlert(t(\"userSaved\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      if (isUserProfileError(error)) {\n        addError(userProfileErrorToString(error), error);\n      } else {\n        addError(\"users:userCreateError\", error);\n      }\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"users:deleteConfirm\",\n    messageKey: \"users:deleteConfirmCurrentUser\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.del({ id: user.id! });\n        addAlert(t(\"userDeletedSuccess\"), AlertVariant.success);\n        navigate(toUsers({ realm }));\n      } catch (error) {\n        addError(\"users:userDeletedError\", error);\n      }\n    },\n  });\n\n  const [toggleImpersonateDialog, ImpersonateConfirm] = useConfirmDialog({\n    titleKey: \"users:impersonateConfirm\",\n    messageKey: \"users:impersonateConfirmDialog\",\n    continueButtonLabel: \"users:impersonate\",\n    onConfirm: async () => {\n      try {\n        const data = await adminClient.users.impersonation(\n          { id: user.id! },\n          { user: user.id!, realm }\n        );\n        if (data.sameRealm) {\n          window.location = data.redirect;\n        } else {\n          window.open(data.redirect, \"_blank\");\n        }\n      } catch (error) {\n        addError(\"users:impersonateError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <ImpersonateConfirm />\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={user.username!}\n        className=\"kc-username-view-header\"\n        divider={false}\n        dropdownItems={[\n          <DropdownItem\n            key=\"impersonate\"\n            isDisabled={!user.access?.impersonate}\n            onClick={() => toggleImpersonateDialog()}\n          >\n            {t(\"impersonate\")}\n          </DropdownItem>,\n          <DropdownItem\n            key=\"delete\"\n            isDisabled={!user.access?.manage}\n            onClick={() => toggleDeleteDialog()}\n          >\n            {t(\"common:delete\")}\n          </DropdownItem>,\n        ]}\n        onToggle={(value) => save({ ...user, enabled: value })}\n        isEnabled={user.enabled}\n      />\n\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <UserProfileProvider>\n          <FormProvider {...userForm}>\n            <RoutableTabs\n              isBox\n              mountOnEnter\n              defaultLocation={toTab(\"settings\")}\n            >\n              <Tab\n                data-testid=\"user-details-tab\"\n                title={<TabTitleText>{t(\"common:details\")}</TabTitleText>}\n                {...settingsTab}\n              >\n                <PageSection variant=\"light\">\n                  <UserForm save={save} user={user} bruteForce={bruteForced} />\n                </PageSection>\n              </Tab>\n              <Tab\n                data-testid=\"attributes\"\n                title={<TabTitleText>{t(\"common:attributes\")}</TabTitleText>}\n                {...attributesTab}\n              >\n                <UserAttributes user={user} />\n              </Tab>\n              <Tab\n                data-testid=\"credentials\"\n                isHidden={!user.access?.view}\n                title={<TabTitleText>{t(\"common:credentials\")}</TabTitleText>}\n                {...credentialsTab}\n              >\n                <UserCredentials user={user} />\n              </Tab>\n              <Tab\n                data-testid=\"role-mapping-tab\"\n                isHidden={!user.access?.mapRoles}\n                title={<TabTitleText>{t(\"roleMapping\")}</TabTitleText>}\n                {...roleMappingTab}\n              >\n                <UserRoleMapping id={user.id!} name={user.username!} />\n              </Tab>\n              {hasAccess(\"query-groups\") && (\n                <Tab\n                  data-testid=\"user-groups-tab\"\n                  title={<TabTitleText>{t(\"common:groups\")}</TabTitleText>}\n                  {...groupsTab}\n                >\n                  <UserGroups user={user} />\n                </Tab>\n              )}\n              <Tab\n                data-testid=\"user-consents-tab\"\n                title={<TabTitleText>{t(\"consents\")}</TabTitleText>}\n                {...consentsTab}\n              >\n                <UserConsents />\n              </Tab>\n              {hasAccess(\"view-identity-providers\") && (\n                <Tab\n                  data-testid=\"identity-provider-links-tab\"\n                  title={\n                    <TabTitleText>{t(\"identityProviderLinks\")}</TabTitleText>\n                  }\n                  {...identityProviderLinksTab}\n                >\n                  <UserIdentityProviderLinks userId={user.id!} />\n                </Tab>\n              )}\n              <Tab\n                data-testid=\"user-sessions-tab\"\n                title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n                {...sessionsTab}\n              >\n                <UserSessions />\n              </Tab>\n            </RoutableTabs>\n          </FormProvider>\n        </UserProfileProvider>\n      </PageSection>\n    </>\n  );\n};\n"],"names":["nativeMin","baseIntersection","arrays","iteratee","comparator","includes","arrayIncludesWith","arrayIncludes","length","othLength","othIndex","caches","maxLength","result","array","arrayMap","baseUnary","SetCache","index","seen","outer","value","computed","cacheHas","cache","castArrayLikeObject","isArrayLikeObject","intersectionBy","baseRest","last","mapped","baseIteratee","intersectionBy$1","mapTag","setTag","objectProto","hasOwnProperty","isEmpty","isArrayLike","isArray","isBuffer","isTypedArray","isArguments","tag","getTag","isPrototype","baseKeys","key","UserAttributes","defaultUser","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","user","setUser","useState","form","useForm","config","useUserProfile","convertAttributes","arrayToKeyValue","a","attribute","useEffect","save","attributeForm","attributes","keyValueToArray","AlertVariant","error","jsx","PageSection","PageSectionVariants","AttributesForm","UserConsents","selectedClient","setSelectedClient","t","formatDate","useFormatDate","setKey","id","useParams","alphabetize","consentsList","sortBy","client","refresh","loader","getConsents","clientScopesRenderer","grantedClientScopes","ChipGroup","currentChip","Chip","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","jsxs","Fragment","KeycloakDataTable","emptyFormatter","cellWidth","createDate","lastUpdatedDate","ListEmptyState","CubesIcon","credFormDefaultValues","ResetPasswordDialog","isResetPassword","onClose","register","control","isValid","errors","watch","handleSubmit","confirm","toggle","useToggle","password","toggleConfirmSaveModal","ConfirmSaveModal","saveUserPassword","temporaryPassword","credentialLabel","c","ConfirmDialogModal","Form","FormGroup","ValidatedOptions","PasswordInput","HelpItem","Controller","field","Switch","LifespanField","useFormContext","credResetFormDefaultValues","TimeSelector","ResetCredentialDialog","userId","resetActionWatcher","useWatch","resetIsNotDisabled","sendCredentialsResetEmail","actions","lifespan","ModalVariant","FormProvider","RequiredActionMultiSelect","InlineLabelEdit","credential","isEditable","saveUserLabel","userLabel","KeycloakTextInput","Button","CheckIcon","TimesIcon","PencilAltIcon","CredentialDataDialog","credentialData","Modal","Table","TableVariant","TableHeader","TableBody","CredentialRow","resetPassword","toggleDelete","children","showData","toggleShow","kebabOpen","toggleKebab","localeSort","useLocaleSort","rows","useMemo","Td","Dropdown","DropdownPosition","KebabToggle","DropdownItem","FederatedCredentials","onSetPassword","credentialTypes","setCredentialTypes","useFetch","TableComposable","Thead","Tr","Th","Tbody","FederatedUserLink","KeycloakSpinner","UserCredentials","isOpen","setIsOpen","openCredentialReset","setOpenCredentialReset","userCredentials","setUserCredentials","groupedUserCredentials","setGroupedUserCredentials","selectedCredential","setSelectedCredential","setIsResetPassword","isUserLabelEdit","setIsUserLabelEdit","bodyRef","useRef","state","setState","credentials","groupedCredentials","r","groupedCredentialsArray","groupedCredential","passwordTypeFinder","toggleModal","toggleCredentialsResetModal","Row","itemOrder","onDragStart","evt","draggedItemId","styles","moveItem","items","targetItem","toIndex","fromIndex","move","ulNode","nodes","i","itemId","onDragCancel","el","onDragLeave","isValidDrop","ulRect","onDrop","onDragFinish","onDragOver","curListItem","dragId","draggingToItemIndex","item","tempItemOrder","onDragEnd","target","dragged","newOrder","oldIndex","newIndex","times","ids","Divider","rowIndex","_","toUpperCase","UserGroups","selectedGroups","setSelectedGroups","search","setSearch","isDirectMembership","setDirectMembership","directMembershipList","setDirectMembershipList","open","setOpen","enabled","useHelp","hasAccess","useAccess","isManager","groupsList","group","first","max","params","searchParam","joinedUserGroups","allCreatedGroups","getAllPaths","acc","cur","parentGroupNames","allGroupMembership","slicedGroups","rootLevelGroups","allPaths","getAllSubgroupPaths","o","f","context","e","prop","arr","x","allSubgroups","paths","groups","path","topLevelGroups","subgroupArray","directMembership","filterDupesfromGroups","thing","self","leave","addGroups","GroupPickerDialog","Checkbox","Popover","QuestionCircleIcon","GroupPath","UserIdpModal","federatedId","onRefresh","onSubmit","federatedIdentity","capitalize","UserIdentityProviderLinks","setFederatedId","isLinkIdPModalOpen","setIsLinkIdPModalOpen","realm","useRealm","identityProviders","useServerInfo","getFederatedIdentities","allProviders","allFedIds","element","getAvailableIdPs","linkedIdPsLoader","availableIdPsLoader","linkedNames","toggleUnlinkDialog","UnlinkConfirm","idpLinkRenderer","idp","Link","toIdentityProvider","badgeRenderer1","groupName","provider","Label","badgeRenderer2","unlinkRenderer","fedIdentity","linkRenderer","FormPanel","TextContent","Text","upperCaseFormatter","UserRoleMapping","name","assignRoles","realmRoles","row","RoleMapping","UserSessions","SessionsTable","EditUser","bruteForced","setBruteForced","refreshCount","setRefreshCount","count","currentRealm","attackDetection","isBruteForceProtected","isLocked","EditUserForm","navigate","useNavigate","userForm","toTab","tab","toUser","useTab","useRoutableTab","settingsTab","attributesTab","credentialsTab","roleMappingTab","groupsTab","consentsTab","identityProviderLinksTab","sessionsTab","formUser","isUserProfileError","userProfileErrorToString","toUsers","toggleImpersonateDialog","ImpersonateConfirm","data","ViewHeader","UserProfileProvider","RoutableTabs","Tab","TabTitleText","UserForm"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}