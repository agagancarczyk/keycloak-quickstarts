{"version":3,"file":"ClientDescription-be494204.js","sources":["../../src/clients/add/CapabilityConfig.tsx","../../src/components/SwitchControl.tsx","../../src/clients/ClientDescription.tsx"],"sourcesContent":["import {\n  Checkbox,\n  FormGroup,\n  Grid,\n  GridItem,\n  InputGroup,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nimport \"./capability-config.css\";\n\ntype CapabilityConfigProps = {\n  unWrap?: boolean;\n  protocol?: string;\n};\n\nexport const CapabilityConfig = ({\n  unWrap,\n  protocol: type,\n}: CapabilityConfigProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control, watch, setValue } = useFormContext<FormFields>();\n  const protocol = type || watch(\"protocol\");\n  const clientAuthentication = watch(\"publicClient\");\n  const authorization = watch(\"authorizationServicesEnabled\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      unWrap={unWrap}\n      className=\"keycloak__capability-config__form\"\n      data-testid=\"capability-config-form\"\n    >\n      {protocol === \"openid-connect\" && (\n        <>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"clientAuthentication\")}\n            fieldId=\"kc-authentication\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:authentication\")}\n                fieldLabelId=\"clients:authentication\"\n              />\n            }\n          >\n            <Controller\n              name=\"publicClient\"\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"authentication\"\n                  id=\"kc-authentication-switch\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={!field.value}\n                  onChange={(value) => {\n                    field.onChange(!value);\n                    if (!value) {\n                      setValue(\"authorizationServicesEnabled\", false);\n                      setValue(\"serviceAccountsEnabled\", false);\n                      setValue(\n                        convertAttributeNameToForm<FormFields>(\n                          \"attributes.oidc.ciba.grant.enabled\"\n                        ),\n                        false\n                      );\n                    }\n                  }}\n                  aria-label={t(\"clientAuthentication\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"clientAuthorization\")}\n            fieldId=\"kc-authorization\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:authorization\")}\n                fieldLabelId=\"clients:authorization\"\n              />\n            }\n          >\n            <Controller\n              name=\"authorizationServicesEnabled\"\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"authorization\"\n                  id=\"kc-authorization-switch\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value && !clientAuthentication}\n                  onChange={(value) => {\n                    field.onChange(value);\n                    if (value) {\n                      setValue(\"serviceAccountsEnabled\", true);\n                    }\n                  }}\n                  isDisabled={clientAuthentication}\n                  aria-label={t(\"clientAuthorization\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"authenticationFlow\")}\n            fieldId=\"kc-flow\"\n          >\n            <Grid id=\"authenticationFlowGrid\">\n              <GridItem lg={4} sm={6}>\n                <Controller\n                  name=\"standardFlowEnabled\"\n                  defaultValue={true}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"standard\"\n                        label={t(\"standardFlow\")}\n                        id=\"kc-flow-standard\"\n                        isChecked={field.value?.toString() === \"true\"}\n                        onChange={field.onChange}\n                      />\n                      <HelpItem\n                        helpText={t(\"clients-help:standardFlow\")}\n                        fieldLabelId=\"clients:standardFlow\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name=\"directAccessGrantsEnabled\"\n                  defaultValue={true}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"direct\"\n                        label={t(\"directAccess\")}\n                        id=\"kc-flow-direct\"\n                        isChecked={field.value}\n                        onChange={field.onChange}\n                      />\n                      <HelpItem\n                        helpText={t(\"clients-help:directAccess\")}\n                        fieldLabelId=\"clients:directAccess\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={4} sm={6}>\n                <Controller\n                  name=\"implicitFlowEnabled\"\n                  defaultValue={true}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"implicit\"\n                        label={t(\"implicitFlow\")}\n                        id=\"kc-flow-implicit\"\n                        isChecked={field.value?.toString() === \"true\"}\n                        onChange={field.onChange}\n                      />\n                      <HelpItem\n                        helpText={t(\"clients-help:implicitFlow\")}\n                        fieldLabelId=\"clients:implicitFlow\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name=\"serviceAccountsEnabled\"\n                  defaultValue={false}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"service-account\"\n                        label={t(\"serviceAccount\")}\n                        id=\"kc-flow-service-account\"\n                        isChecked={\n                          field.value?.toString() === \"true\" ||\n                          (clientAuthentication && authorization)\n                        }\n                        onChange={field.onChange}\n                        isDisabled={\n                          (clientAuthentication && !authorization) ||\n                          (!clientAuthentication && authorization)\n                        }\n                      />\n                      <HelpItem\n                        helpText={t(\"clients-help:serviceAccount\")}\n                        fieldLabelId=\"clients:serviceAccount\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name={convertAttributeNameToForm<\n                    Required<ClientRepresentation[\"attributes\"]>\n                  >(\"attributes.oauth2.device.authorization.grant.enabled\")}\n                  defaultValue={false}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"oauth-device-authorization-grant\"\n                        label={t(\"oauthDeviceAuthorizationGrant\")}\n                        id=\"kc-oauth-device-authorization-grant\"\n                        name=\"oauth2.device.authorization.grant.enabled\"\n                        isChecked={field.value.toString() === \"true\"}\n                        onChange={field.onChange}\n                      />\n                      <HelpItem\n                        helpText={t(\n                          \"clients-help:oauthDeviceAuthorizationGrant\"\n                        )}\n                        fieldLabelId=\"clients:oauthDeviceAuthorizationGrant\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name={convertAttributeNameToForm<FormFields>(\n                    \"attributes.oidc.ciba.grant.enabled\"\n                  )}\n                  defaultValue={false}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"oidc-ciba-grant\"\n                        label={t(\"oidcCibaGrant\")}\n                        id=\"kc-oidc-ciba-grant\"\n                        name=\"oidc.ciba.grant.enabled\"\n                        isChecked={field.value.toString() === \"true\"}\n                        onChange={field.onChange}\n                        isDisabled={clientAuthentication}\n                      />\n                      <HelpItem\n                        helpText={t(\"clients-help:oidcCibaGrant\")}\n                        fieldLabelId=\"clients:oidcCibaGrant\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n            </Grid>\n          </FormGroup>\n        </>\n      )}\n      {protocol === \"saml\" && (\n        <>\n          <FormGroup\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:encryptAssertions\")}\n                fieldLabelId=\"clients:encryptAssertions\"\n              />\n            }\n            label={t(\"encryptAssertions\")}\n            fieldId=\"kc-encrypt\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.encrypt\"\n              )}\n              control={control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"encrypt\"\n                  id=\"kc-encrypt\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                  aria-label={t(\"encryptAssertions\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:clientSignature\")}\n                fieldLabelId=\"clients:clientSignature\"\n              />\n            }\n            label={t(\"clientSignature\")}\n            fieldId=\"kc-client-signature\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.client.signature\"\n              )}\n              control={control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"client-signature\"\n                  id=\"kc-client-signature\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                  aria-label={t(\"clientSignature\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import { SwitchProps } from \"@patternfly/react-core\";\nimport { FieldPath, FieldValues, UseControllerProps } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SwitchControl } from \"ui-shared\";\n\ntype AdminSwitchControlProps<\n  T extends FieldValues,\n  P extends FieldPath<T> = FieldPath<T>\n> = SwitchProps &\n  UseControllerProps<T, P> & {\n    name: string;\n    label?: string;\n    labelIcon?: string;\n  };\n\nexport const DefaultSwitchControl = <\n  T extends FieldValues,\n  P extends FieldPath<T> = FieldPath<T>\n>(\n  props: AdminSwitchControlProps<T, P>\n) => {\n  const { t } = useTranslation(\"common\");\n\n  return <SwitchControl {...props} labelOn={t(\"on\")} labelOff={t(\"off\")} />;\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextControl, TextAreaControl } from \"ui-shared\";\n\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { DefaultSwitchControl } from \"../components/SwitchControl\";\n\ntype ClientDescriptionProps = {\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const ClientDescription = ({\n  hasConfigureAccess: configure,\n}: ClientDescriptionProps) => {\n  const { t } = useTranslation(\"clients\");\n  return (\n    <FormAccess role=\"manage-clients\" fineGrainedAccess={configure} unWrap>\n      <TextControl\n        name=\"clientId\"\n        label={t(\"common:clientId\")}\n        labelIcon={t(\"clients-help:clientId\")}\n        rules={{ required: { value: true, message: t(\"common:required\") } }}\n      />\n      <TextControl\n        name=\"name\"\n        label={t(\"common:name\")}\n        labelIcon={t(\"clients-help:clientName\")}\n      />\n      <TextAreaControl\n        name=\"description\"\n        label={t(\"common:description\")}\n        labelIcon={t(\"clients-help:description\")}\n        rules={{\n          maxLength: {\n            value: 255,\n            message: t(\"common:maxLength\", { length: 255 }),\n          },\n        }}\n      />\n      <DefaultSwitchControl\n        name=\"alwaysDisplayInConsole\"\n        label={t(\"alwaysDisplayInUI\")}\n        labelIcon={t(\"clients-help:alwaysDisplayInUI\")}\n      />\n    </FormAccess>\n  );\n};\n"],"names":["CapabilityConfig","unWrap","type","t","useTranslation","control","watch","setValue","useFormContext","protocol","clientAuthentication","authorization","jsxs","FormAccess","Fragment","jsx","FormGroup","HelpItem","Controller","field","Switch","value","convertAttributeNameToForm","Grid","GridItem","InputGroup","Checkbox","DefaultSwitchControl","props","SwitchControl","ClientDescription","configure","TextControl","TextAreaControl"],"mappings":"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"}