{"version":3,"file":"KeyProviderForm-657f5169.js","sources":["../../src/realm-settings/keys/key-providers/KeyProviderForm.tsx"],"sourcesContent":["import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n  TextInput,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../../components/alert/Alerts\";\nimport { DynamicComponents } from \"../../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport { KEY_PROVIDER_TYPE } from \"../../../util\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { KeyProviderParams, ProviderType } from \"../../routes/KeyProvider\";\nimport { toKeysTab } from \"../../routes/KeysTab\";\n\ntype KeyProviderFormProps = {\n  id?: string;\n  providerType: ProviderType;\n  onClose?: () => void;\n};\n\nexport const KeyProviderForm = ({\n  providerType,\n  onClose,\n}: KeyProviderFormProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { id } = useParams<{ id: string }>();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const serverInfo = useServerInfo();\n  const allComponentTypes =\n    serverInfo.componentTypes?.[KEY_PROVIDER_TYPE] ?? [];\n\n  const form = useForm<ComponentRepresentation>({\n    mode: \"onChange\",\n  });\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = form;\n\n  const save = async (component: ComponentRepresentation) => {\n    if (component.config)\n      Object.entries(component.config).forEach(\n        ([key, value]) =>\n          (component.config![key] = Array.isArray(value) ? value : [value])\n      );\n    try {\n      if (id) {\n        await adminClient.components.update(\n          { id },\n          {\n            ...component,\n            providerType: KEY_PROVIDER_TYPE,\n          }\n        );\n        addAlert(t(\"saveProviderSuccess\"), AlertVariant.success);\n      } else {\n        await adminClient.components.create({\n          ...component,\n          providerId: providerType,\n          providerType: KEY_PROVIDER_TYPE,\n        });\n        addAlert(t(\"saveProviderSuccess\"), AlertVariant.success);\n        onClose?.();\n      }\n    } catch (error) {\n      addError(\"realm-settings:saveProviderError\", error);\n    }\n  };\n\n  useFetch(\n    async () => {\n      if (id) return await adminClient.components.findOne({ id });\n    },\n    (result) => {\n      if (result) {\n        reset({ ...result });\n      }\n    },\n    []\n  );\n\n  return (\n    <FormAccess isHorizontal role=\"manage-realm\" onSubmit={handleSubmit(save)}>\n      {id && (\n        <FormGroup\n          label={t(\"providerId\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"client-scopes-help:mapperName\")}\n              fieldLabelId=\"providerId\"\n            />\n          }\n          fieldId=\"providerId\"\n          isRequired\n        >\n          <KeycloakTextInput\n            id=\"providerId\"\n            data-testid=\"providerId-input\"\n            isReadOnly\n            {...register(\"id\")}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        label={t(\"common:name\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"client-scopes-help:mapperName\")}\n            fieldLabelId=\"name\"\n          />\n        }\n        fieldId=\"name\"\n        isRequired\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <Controller\n          name=\"name\"\n          control={control}\n          rules={{ required: true }}\n          defaultValue={providerType}\n          render={({ field }) => (\n            <TextInput\n              id=\"name\"\n              value={field.value}\n              onChange={field.onChange}\n              data-testid=\"name-input\"\n            />\n          )}\n        />\n      </FormGroup>\n      <FormProvider {...form}>\n        <DynamicComponents\n          properties={\n            allComponentTypes.find((type) => type.id === providerType)\n              ?.properties || []\n          }\n        />\n      </FormProvider>\n      <ActionGroup>\n        <Button\n          data-testid=\"add-provider-button\"\n          variant=\"primary\"\n          type=\"submit\"\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button onClick={() => onClose?.()} variant=\"link\">\n          {t(\"common:cancel\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n\nexport default function KeyProviderFormPage() {\n  const { t } = useTranslation(\"realm-settings\");\n  const params = useParams<KeyProviderParams>();\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <ViewHeader titleKey={t(\"editProvider\")} subKey={params.providerType} />\n      <PageSection variant=\"light\">\n        <KeyProviderForm\n          {...params}\n          onClose={() =>\n            navigate(toKeysTab({ realm: params.realm, tab: \"providers\" }))\n          }\n        />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["KeyProviderForm","providerType","onClose","useTranslation","id","useParams","adminClient","useAdminClient","addAlert","addError","useAlerts","allComponentTypes","useServerInfo","KEY_PROVIDER_TYPE","form","useForm","register","control","handleSubmit","errors","reset","save","component","key","value","AlertVariant","error","useFetch","result","jsxs","FormAccess","jsx","FormGroup","HelpItem","KeycloakTextInput","ValidatedOptions","Controller","field","TextInput","FormProvider","DynamicComponents","type","ActionGroup","Button","KeyProviderFormPage","t","params","navigate","useNavigate","Fragment","ViewHeader","PageSection","toKeysTab"],"mappings":"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"}