{"version":3,"file":"UserForm-4d660c10.js","sources":["../../src/user/FederatedUserLink.tsx","../../src/user/UserProfileFields.tsx","../../src/user/user-credentials/RequiredActionMultiSelect.tsx","../../src/user/UserForm.tsx"],"sourcesContent":["import { Button } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUserFederationLdap } from \"../user-federation/routes/UserFederationLdap\";\n\ntype FederatedUserLinkProps = {\n  user: UserRepresentation;\n};\n\nexport const FederatedUserLink = ({ user }: FederatedUserLinkProps) => {\n  const access = useAccess();\n  const { realm } = useRealm();\n  const { adminClient } = useAdminClient();\n\n  const [component, setComponent] = useState<ComponentRepresentation>();\n\n  useFetch(\n    () =>\n      access.hasAccess(\"view-realm\")\n        ? adminClient.components.findOne({\n            id: (user.federationLink || user.origin)!,\n          })\n        : adminClient.userStorageProvider.name({\n            id: (user.federationLink || user.origin)!,\n          }),\n    setComponent,\n    []\n  );\n\n  if (!component) return null;\n\n  return (\n    <Button\n      variant=\"link\"\n      isDisabled={!access.hasAccess(\"view-realm\")}\n      component={(props) => (\n        <Link\n          {...props}\n          to={toUserFederationLdap({\n            id: component.id!,\n            realm,\n          })}\n        />\n      )}\n    >\n      {component.name}\n    </Button>\n  );\n};\n","import type {\n  UserProfileAttribute,\n  UserProfileAttributeRequired,\n} from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport {\n  Form,\n  FormGroup,\n  Select,\n  SelectOption,\n  Text,\n} from \"@patternfly/react-core\";\nimport { Fragment } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { useUserProfile } from \"../realm-settings/user-profile/UserProfileContext\";\nimport useToggle from \"../utils/useToggle\";\n\nconst ROOT_ATTRIBUTES = [\"username\", \"firstName\", \"lastName\", \"email\"];\nconst DEFAULT_ROLES = [\"admin\", \"user\"];\n\ntype UserProfileFieldsProps = {\n  roles?: string[];\n};\n\nexport type UserProfileError = {\n  responseData: { errors?: { errorMessage: string }[] };\n};\n\nexport function isUserProfileError(error: unknown): error is UserProfileError {\n  return !!(error as UserProfileError).responseData.errors;\n}\n\nexport function userProfileErrorToString(error: UserProfileError) {\n  return (\n    error.responseData[\"errors\"]?.map((e) => e[\"errorMessage\"]).join(\"\\n\") || \"\"\n  );\n}\n\nexport const UserProfileFields = ({\n  roles = [\"admin\"],\n}: UserProfileFieldsProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { config } = useUserProfile();\n\n  return (\n    <ScrollForm\n      sections={[{ name: \"\" }, ...(config?.groups || [])].map((g) => ({\n        title: g.name || t(\"general\"),\n        panel: (\n          <Form>\n            {g.displayDescription && (\n              <Text className=\"pf-u-pb-lg\">{g.displayDescription}</Text>\n            )}\n            {config?.attributes?.map((attribute) => (\n              <Fragment key={attribute.name}>\n                {(attribute.group || \"\") === g.name &&\n                  (attribute.permissions?.view || DEFAULT_ROLES).some((r) =>\n                    roles.includes(r)\n                  ) && <FormField attribute={attribute} roles={roles} />}\n              </Fragment>\n            ))}\n          </Form>\n        ),\n      }))}\n    />\n  );\n};\n\ntype FormFieldProps = {\n  attribute: UserProfileAttribute;\n  roles: string[];\n};\n\nconst FormField = ({ attribute, roles }: FormFieldProps) => {\n  const { t } = useTranslation(\"users\");\n  const {\n    formState: { errors },\n    register,\n    control,\n  } = useFormContext();\n  const [open, toggle] = useToggle();\n\n  const isBundleKey = (displayName?: string) => displayName?.includes(\"${\");\n  const unWrap = (key: string) => key.substring(2, key.length - 1);\n\n  const isSelect = (attribute: UserProfileAttribute) =>\n    Object.hasOwn(attribute.validations || {}, \"options\");\n\n  const isRootAttribute = (attr?: string) =>\n    attr && ROOT_ATTRIBUTES.includes(attr);\n\n  const isRequired = (required: UserProfileAttributeRequired | undefined) =>\n    Object.keys(required || {}).length !== 0;\n\n  const fieldName = (attribute: UserProfileAttribute) =>\n    `${isRootAttribute(attribute.name) ? \"\" : \"attributes.\"}${attribute.name}`;\n\n  return (\n    <FormGroup\n      key={attribute.name}\n      label={\n        (isBundleKey(attribute.displayName)\n          ? t(unWrap(attribute.displayName!))\n          : attribute.displayName) || attribute.name\n      }\n      fieldId={attribute.name}\n      isRequired={isRequired(attribute.required)}\n      validated={errors.username ? \"error\" : \"default\"}\n      helperTextInvalid={t(\"common:required\")}\n    >\n      {isSelect(attribute) ? (\n        <Controller\n          name={fieldName(attribute)}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId={attribute.name}\n              onToggle={toggle}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                toggle();\n              }}\n              selections={field.value}\n              variant=\"single\"\n              aria-label={t(\"common:selectOne\")}\n              isOpen={open}\n              isDisabled={\n                !(attribute.permissions?.edit || DEFAULT_ROLES).some((r) =>\n                  roles.includes(r)\n                )\n              }\n            >\n              {[\n                <SelectOption key=\"empty\" value=\"\">\n                  {t(\"common:choose\")}\n                </SelectOption>,\n                ...(\n                  attribute.validations?.options as { options: string[] }\n                ).options.map((option) => (\n                  <SelectOption\n                    selected={field.value === option}\n                    key={option}\n                    value={option}\n                  >\n                    {option}\n                  </SelectOption>\n                )),\n              ]}\n            </Select>\n          )}\n        />\n      ) : (\n        <KeycloakTextInput\n          id={attribute.name}\n          isDisabled={\n            !(attribute.permissions?.edit || DEFAULT_ROLES).some((r) =>\n              roles.includes(r)\n            )\n          }\n          {...register(fieldName(attribute))}\n        />\n      )}\n    </FormGroup>\n  );\n};\n","import type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\n\ntype RequiredActionMultiSelectProps = {\n  name: string;\n  label: string;\n  help: string;\n};\n\nexport const RequiredActionMultiSelect = ({\n  name,\n  label,\n  help,\n}: RequiredActionMultiSelectProps) => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n  const [requiredActions, setRequiredActions] = useState<\n    RequiredActionProviderRepresentation[]\n  >([]);\n\n  useFetch(\n    () => adminClient.authenticationManagement.getRequiredActions(),\n    (actions) => {\n      const enabledUserActions = actions.filter((action) => {\n        return action.enabled;\n      });\n      setRequiredActions(enabledUserActions);\n    },\n    []\n  );\n\n  return (\n    <FormGroup\n      label={t(label)}\n      labelIcon={<HelpItem helpText={t(help)} fieldLabelId=\"resetActions\" />}\n      fieldId=\"actions\"\n    >\n      <Controller\n        name={name}\n        defaultValue={[]}\n        control={control}\n        render={({ field }) => (\n          <Select\n            maxHeight={375}\n            toggleId={`${name}-actions`}\n            variant={SelectVariant.typeaheadMulti}\n            chipGroupProps={{\n              numChips: 3,\n            }}\n            placeholderText={t(\"requiredActionPlaceholder\")}\n            menuAppendTo=\"parent\"\n            onToggle={(open) => setOpen(open)}\n            isOpen={open}\n            selections={field.value}\n            onSelect={(_, selectedValue) =>\n              field.onChange(\n                field.value.find((o: string) => o === selectedValue)\n                  ? field.value.filter((item: string) => item !== selectedValue)\n                  : [...field.value, selectedValue]\n              )\n            }\n            onClear={(event) => {\n              event.stopPropagation();\n              field.onChange([]);\n            }}\n            typeAheadAriaLabel={t(\"resetActions\")}\n          >\n            {requiredActions.map(({ alias, name }) => (\n              <SelectOption\n                key={alias}\n                value={alias}\n                data-testid={`${alias}-option`}\n              >\n                {name}\n              </SelectOption>\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  InputGroup,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emailRegexPattern } from \"../util\";\nimport useFormatDate from \"../utils/useFormatDate\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { FederatedUserLink } from \"./FederatedUserLink\";\nimport { UserProfileFields } from \"./UserProfileFields\";\nimport { RequiredActionMultiSelect } from \"./user-credentials/RequiredActionMultiSelect\";\n\nexport type BruteForced = {\n  isBruteForceProtected?: boolean;\n  isLocked?: boolean;\n};\n\nexport type UserFormProps = {\n  user?: UserRepresentation;\n  bruteForce?: BruteForced;\n  save: (user: UserRepresentation) => void;\n  onGroupsUpdate?: (groups: GroupRepresentation[]) => void;\n};\n\nconst EmailVerified = () => {\n  const { t } = useTranslation(\"users\");\n  const { control } = useFormContext();\n  return (\n    <FormGroup\n      label={t(\"emailVerified\")}\n      fieldId=\"kc-email-verified\"\n      helperTextInvalid={t(\"common:required\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"users-help:emailVerified\")}\n          fieldLabelId=\"users:emailVerified\"\n        />\n      }\n    >\n      <Controller\n        name=\"emailVerified\"\n        defaultValue={false}\n        control={control}\n        render={({ field }) => (\n          <Switch\n            data-testid=\"email-verified-switch\"\n            id=\"kc-user-email-verified\"\n            onChange={(value) => field.onChange(value)}\n            isChecked={field.value}\n            label={t(\"common:yes\")}\n            labelOff={t(\"common:no\")}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n\nexport const UserForm = ({\n  user,\n  bruteForce: { isBruteForceProtected, isLocked } = {\n    isBruteForceProtected: false,\n    isLocked: false,\n  },\n  save,\n  onGroupsUpdate,\n}: UserFormProps) => {\n  const { t } = useTranslation(\"users\");\n  const { realm: realmName } = useRealm();\n  const formatDate = useFormatDate();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\");\n\n  const {\n    handleSubmit,\n    register,\n    watch,\n    control,\n    reset,\n    formState: { errors },\n  } = useFormContext();\n  const watchUsernameInput = watch(\"username\");\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    []\n  );\n  const [open, setOpen] = useState(false);\n  const [locked, setLocked] = useState(isLocked);\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    (realm) => {\n      if (!realm) {\n        throw new Error(t(\"common:notFound\"));\n      }\n      setRealm(realm);\n    },\n    []\n  );\n\n  const unLockUser = async () => {\n    try {\n      await adminClient.attackDetection.del({ id: user!.id! });\n      addAlert(t(\"unlockSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"users:unlockError\", error);\n    }\n  };\n\n  const deleteItem = (id: string) => {\n    setSelectedGroups(selectedGroups.filter((item) => item.name !== id));\n    onGroupsUpdate?.(selectedGroups);\n  };\n\n  const addChips = async (groups: GroupRepresentation[]): Promise<void> => {\n    setSelectedGroups([...selectedGroups!, ...groups]);\n    onGroupsUpdate?.([...selectedGroups!, ...groups]);\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]): Promise<void> => {\n    const newGroups = groups;\n\n    newGroups.forEach(async (group) => {\n      try {\n        await adminClient.users.addToGroup({\n          id: user!.id!,\n          groupId: group.id!,\n        });\n        addAlert(t(\"users:addedGroupMembership\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:addedGroupMembershipError\", error);\n      }\n    });\n  };\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const isUserProfileEnabled =\n    isFeatureEnabled(Feature.DeclarativeUserProfile) &&\n    realm?.attributes?.userProfileEnabled === \"true\";\n\n  return (\n    <FormAccess\n      isHorizontal\n      onSubmit={handleSubmit(save)}\n      role=\"query-users\"\n      fineGrainedAccess={user?.access?.manage}\n      className=\"pf-u-mt-lg\"\n    >\n      {open && (\n        <GroupPickerDialog\n          type=\"selectMany\"\n          text={{\n            title: \"users:selectGroups\",\n            ok: \"users:join\",\n          }}\n          canBrowse={isManager}\n          onConfirm={(groups) => {\n            user?.id ? addGroups(groups || []) : addChips(groups || []);\n            setOpen(false);\n          }}\n          onClose={() => setOpen(false)}\n          filterGroups={selectedGroups}\n        />\n      )}\n      {isUserProfileEnabled && <EmailVerified />}\n      {user?.id && (\n        <>\n          <FormGroup label={t(\"common:id\")} fieldId=\"kc-id\" isRequired>\n            <KeycloakTextInput\n              id={user.id}\n              aria-label={t(\"userID\")}\n              value={user.id}\n              type=\"text\"\n              isReadOnly\n            />\n          </FormGroup>\n          <FormGroup label={t(\"createdAt\")} fieldId=\"kc-created-at\" isRequired>\n            <KeycloakTextInput\n              value={formatDate(new Date(user.createdTimestamp!))}\n              type=\"text\"\n              id=\"kc-created-at\"\n              aria-label={t(\"createdAt\")}\n              name=\"createdTimestamp\"\n              isReadOnly\n            />\n          </FormGroup>\n        </>\n      )}\n      <RequiredActionMultiSelect\n        name=\"requiredActions\"\n        label=\"requiredUserActions\"\n        help=\"users-help:requiredUserActions\"\n      />\n      {(user?.federationLink || user?.origin) && (\n        <FormGroup\n          label={t(\"federationLink\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"users-help:federationLink\")}\n              fieldLabelId=\"users:federationLink\"\n            />\n          }\n        >\n          <FederatedUserLink user={user} />\n        </FormGroup>\n      )}\n      {isUserProfileEnabled ? (\n        <UserProfileFields />\n      ) : (\n        <>\n          {!realm?.registrationEmailAsUsername && (\n            <FormGroup\n              label={t(\"username\")}\n              fieldId=\"kc-username\"\n              isRequired\n              validated={errors.username ? \"error\" : \"default\"}\n              helperTextInvalid={t(\"common:required\")}\n            >\n              <KeycloakTextInput\n                id=\"kc-username\"\n                isReadOnly={\n                  !!user?.id &&\n                  !realm?.editUsernameAllowed &&\n                  realm?.editUsernameAllowed !== undefined\n                }\n                {...register(\"username\")}\n              />\n            </FormGroup>\n          )}\n          <FormGroup\n            label={t(\"email\")}\n            fieldId=\"kc-email\"\n            validated={errors.email ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"users:emailInvalid\")}\n          >\n            <KeycloakTextInput\n              type=\"email\"\n              id=\"kc-email\"\n              data-testid=\"email-input\"\n              {...register(\"email\", {\n                pattern: emailRegexPattern,\n              })}\n            />\n          </FormGroup>\n          <EmailVerified />\n          <FormGroup\n            label={t(\"firstName\")}\n            fieldId=\"kc-firstName\"\n            validated={errors.firstName ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"common:required\")}\n          >\n            <KeycloakTextInput\n              data-testid=\"firstName-input\"\n              id=\"kc-firstName\"\n              {...register(\"firstName\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"lastName\")}\n            fieldId=\"kc-lastName\"\n            validated={errors.lastName ? \"error\" : \"default\"}\n          >\n            <KeycloakTextInput\n              data-testid=\"lastName-input\"\n              id=\"kc-lastname\"\n              aria-label={t(\"lastName\")}\n              {...register(\"lastName\")}\n            />\n          </FormGroup>\n        </>\n      )}\n      {isBruteForceProtected && (\n        <FormGroup\n          label={t(\"temporaryLocked\")}\n          fieldId=\"temporaryLocked\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"users-help:temporaryLocked\")}\n              fieldLabelId=\"users:temporaryLocked\"\n            />\n          }\n        >\n          <Switch\n            data-testid=\"user-locked-switch\"\n            id=\"temporaryLocked\"\n            onChange={(value) => {\n              unLockUser();\n              setLocked(value);\n            }}\n            isChecked={locked}\n            isDisabled={!locked}\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n          />\n        </FormGroup>\n      )}\n      {!user?.id && (\n        <FormGroup\n          label={t(\"common:groups\")}\n          fieldId=\"kc-groups\"\n          validated={errors.requiredActions ? \"error\" : \"default\"}\n          helperTextInvalid={t(\"common:required\")}\n          labelIcon={\n            <HelpItem helpText={t(\"users-help:groups\")} fieldLabelId=\"groups\" />\n          }\n        >\n          <Controller\n            name=\"groups\"\n            defaultValue={[]}\n            control={control}\n            render={() => (\n              <InputGroup>\n                <ChipGroup categoryName={\" \"}>\n                  {selectedGroups.map((currentChip) => (\n                    <Chip\n                      key={currentChip.id}\n                      onClick={() => deleteItem(currentChip.name!)}\n                    >\n                      {currentChip.path}\n                    </Chip>\n                  ))}\n                </ChipGroup>\n                <Button\n                  id=\"kc-join-groups-button\"\n                  onClick={toggleModal}\n                  variant=\"secondary\"\n                  data-testid=\"join-groups-button\"\n                >\n                  {t(\"users:joinGroups\")}\n                </Button>\n              </InputGroup>\n            )}\n          />\n        </FormGroup>\n      )}\n\n      <ActionGroup>\n        <Button\n          data-testid={!user?.id ? \"create-user\" : \"save-user\"}\n          isDisabled={\n            !user?.id &&\n            !watchUsernameInput &&\n            !realm?.registrationEmailAsUsername\n          }\n          variant=\"primary\"\n          type=\"submit\"\n        >\n          {user?.id ? t(\"common:save\") : t(\"common:create\")}\n        </Button>\n        <Button\n          data-testid=\"cancel-create-user\"\n          onClick={() =>\n            user?.id ? reset(user) : navigate(`/${realmName}/users`)\n          }\n          variant=\"link\"\n        >\n          {user?.id ? t(\"common:revert\") : t(\"common:cancel\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n"],"names":["FederatedUserLink","user","access","useAccess","realm","useRealm","adminClient","useAdminClient","component","setComponent","useState","useFetch","jsx","Button","props","Link","toUserFederationLdap","ROOT_ATTRIBUTES","DEFAULT_ROLES","isUserProfileError","error","userProfileErrorToString","e","UserProfileFields","roles","t","useTranslation","config","useUserProfile","ScrollForm","g","Form","Text","attribute","Fragment","r","FormField","errors","register","control","useFormContext","open","toggle","useToggle","isBundleKey","displayName","unWrap","key","isSelect","isRootAttribute","attr","isRequired","required","fieldName","FormGroup","Controller","field","Select","_","value","SelectOption","option","KeycloakTextInput","RequiredActionMultiSelect","name","label","help","setOpen","requiredActions","setRequiredActions","actions","enabledUserActions","action","HelpItem","SelectVariant","selectedValue","o","item","event","alias","EmailVerified","Switch","UserForm","isBruteForceProtected","isLocked","save","onGroupsUpdate","realmName","formatDate","useFormatDate","isFeatureEnabled","useIsFeatureEnabled","navigate","useNavigate","addAlert","addError","useAlerts","hasAccess","isManager","handleSubmit","watch","reset","watchUsernameInput","selectedGroups","setSelectedGroups","locked","setLocked","setRealm","unLockUser","AlertVariant","deleteItem","id","addChips","groups","addGroups","group","toggleModal","isUserProfileEnabled","Feature","jsxs","FormAccess","GroupPickerDialog","emailRegexPattern","InputGroup","ChipGroup","currentChip","Chip","ActionGroup"],"mappings":"yuBAeO,MAAMA,GAAoB,CAAC,CAAE,KAAAC,KAAmC,CACrE,MAAMC,EAASC,IACT,CAAE,MAAAC,GAAUC,IACZ,CAAE,YAAAC,GAAgBC,IAElB,CAACC,EAAWC,CAAY,EAAIC,EAAkC,SAAA,EAepE,OAbAC,EACE,IACET,EAAO,UAAU,YAAY,EACzBI,EAAY,WAAW,QAAQ,CAC7B,GAAKL,EAAK,gBAAkBA,EAAK,MAAA,CAClC,EACDK,EAAY,oBAAoB,KAAK,CACnC,GAAKL,EAAK,gBAAkBA,EAAK,MAAA,CAClC,EACPQ,EACA,CAAC,CAAA,EAGED,EAGHI,EAAA,IAACC,EAAA,CACC,QAAQ,OACR,WAAY,CAACX,EAAO,UAAU,YAAY,EAC1C,UAAYY,GACVF,EAAA,IAACG,GAAA,CACE,GAAGD,EACJ,GAAIE,GAAqB,CACvB,GAAIR,EAAU,GACd,MAAAJ,CAAA,CACD,CAAA,CACH,EAGD,SAAUI,EAAA,IAAA,CAAA,EAhBQ,IAmBzB,EClCMS,GAAkB,CAAC,WAAY,YAAa,WAAY,OAAO,EAC/DC,EAAgB,CAAC,QAAS,MAAM,EAU/B,SAASC,GAAmBC,EAA2C,CACrE,MAAA,CAAC,CAAEA,EAA2B,aAAa,MACpD,CAEO,SAASC,GAAyBD,EAAyB,CAChE,OACEA,EAAM,aAAa,QAAW,IAAKE,GAAMA,EAAE,YAAe,EAAE,KAAK;AAAA,CAAI,GAAK,EAE9E,CAEO,MAAMC,GAAoB,CAAC,CAChC,MAAAC,EAAQ,CAAC,OAAO,CAClB,IAA8B,CAC5B,KAAM,CAAE,EAAAC,CAAA,EAAMC,EAAe,gBAAgB,EACvC,CAAE,OAAAC,GAAWC,KAGjB,OAAAhB,EAAA,IAACiB,GAAA,CACC,SAAU,CAAC,CAAE,KAAM,IAAM,GAAIF,GAAQ,QAAU,CAAG,CAAA,EAAE,IAAKG,IAAO,CAC9D,MAAOA,EAAE,MAAQL,EAAE,SAAS,EAC5B,aACGM,GACE,CAAA,SAAA,CAAAD,EAAE,oBACAlB,EAAA,IAAAoB,GAAA,CAAK,UAAU,aAAc,WAAE,mBAAmB,EAEpDL,GAAQ,YAAY,IAAKM,GACvBrB,EAAAA,IAAAsB,EAAA,SAAA,CACG,UAAUD,EAAA,OAAS,MAAQH,EAAE,OAC5BG,EAAU,aAAa,MAAQf,GAAe,KAAMiB,GACnDX,EAAM,SAASW,CAAC,CAAA,SACZC,GAAU,CAAA,UAAAH,EAAsB,MAAAT,EAAc,CAJzC,EAAAS,EAAU,IAKzB,CACD,CAAA,EACH,CAAA,EAEF,CAAA,CAAA,CAGR,EAOMG,GAAY,CAAC,CAAE,UAAAH,EAAW,MAAAT,KAA4B,CAC1D,KAAM,CAAE,CAAA,EAAME,EAAe,OAAO,EAC9B,CACJ,UAAW,CAAE,OAAAW,CAAO,EACpB,SAAAC,EACA,QAAAC,GACEC,EAAe,EACb,CAACC,EAAMC,CAAM,EAAIC,GAAU,EAE3BC,EAAeC,GAAyBA,GAAa,SAAS,IAAI,EAClEC,EAAUC,GAAgBA,EAAI,UAAU,EAAGA,EAAI,OAAS,CAAC,EAEzDC,EAAYf,GAChB,OAAO,OAAOA,EAAU,aAAe,GAAI,SAAS,EAEhDgB,EAAmBC,GACvBA,GAAQjC,GAAgB,SAASiC,CAAI,EAEjCC,EAAcC,GAClB,OAAO,KAAKA,GAAY,CAAE,CAAA,EAAE,SAAW,EAEnCC,EAAapB,GACjB,GAAGgB,EAAgBhB,EAAU,IAAI,EAAI,GAAK,gBAAgBA,EAAU,OAGpE,OAAArB,EAAA,IAAC0C,EAAA,CAEC,OACGV,EAAYX,EAAU,WAAW,EAC9B,EAAEa,EAAOb,EAAU,WAAY,CAAC,EAChCA,EAAU,cAAgBA,EAAU,KAE1C,QAASA,EAAU,KACnB,WAAYkB,EAAWlB,EAAU,QAAQ,EACzC,UAAWI,EAAO,SAAW,QAAU,UACvC,kBAAmB,EAAE,iBAAiB,EAErC,SAAAW,EAASf,CAAS,EACjBrB,EAAA,IAAC2C,EAAA,CACC,KAAMF,EAAUpB,CAAS,EACzB,aAAa,GACb,QAAAM,EACA,OAAQ,CAAC,CAAE,MAAAiB,CAAA,IACT5C,EAAA,IAAC6C,EAAA,CACC,SAAUxB,EAAU,KACpB,SAAUS,EACV,SAAU,CAACgB,EAAGC,IAAU,CAChBH,EAAA,SAASG,EAAM,SAAU,CAAA,EACxBjB,GACT,EACA,WAAYc,EAAM,MAClB,QAAQ,SACR,aAAY,EAAE,kBAAkB,EAChC,OAAQf,EACR,WACE,EAAER,EAAU,aAAa,MAAQf,GAAe,KAAMiB,GACpDX,EAAM,SAASW,CAAC,CAClB,EAGD,SAAA,OACEyB,EAAyB,CAAA,MAAM,GAC7B,SAAE,EAAA,eAAe,GADF,OAElB,EACA,IACE3B,EAAU,aAAa,SACvB,QAAQ,IAAK4B,GACbjD,EAAA,IAACgD,EAAA,CACC,SAAUJ,EAAM,QAAUK,EAE1B,MAAOA,EAEN,SAAAA,CAAA,EAHIA,CAAA,CAKR,CACH,CAAA,CACF,CAAA,CAAA,EAIJjD,EAAA,IAACkD,EAAA,CACC,GAAI7B,EAAU,KACd,WACE,EAAEA,EAAU,aAAa,MAAQf,GAAe,KAAM,GACpDM,EAAM,SAAS,CAAC,CAClB,EAED,GAAGc,EAASe,EAAUpB,CAAS,CAAC,CAAA,CACnC,CAAA,EA9DGA,EAAU,IAAA,CAkErB,ECpJa8B,GAA4B,CAAC,CACxC,KAAAC,EACA,MAAAC,EACA,KAAAC,CACF,IAAsC,CACpC,KAAM,CAAE,EAAAzC,CAAA,EAAMC,EAAe,OAAO,EAC9B,CAAE,YAAApB,GAAgBC,IAClB,CAAE,QAAAgC,GAAYC,IACd,CAACC,EAAM0B,CAAO,EAAIzD,WAAS,EAAK,EAChC,CAAC0D,EAAiBC,CAAkB,EAAI3D,EAAA,SAE5C,CAAE,CAAA,EAEJ,OAAAC,EACE,IAAML,EAAY,yBAAyB,mBAAmB,EAC7DgE,GAAY,CACX,MAAMC,EAAqBD,EAAQ,OAAQE,GAClCA,EAAO,OACf,EACDH,EAAmBE,CAAkB,CACvC,EACA,CAAC,CAAA,EAID3D,EAAA,IAAC0C,EAAA,CACC,MAAO7B,EAAEwC,CAAK,EACd,gBAAYQ,EAAS,CAAA,SAAUhD,EAAEyC,CAAI,EAAG,aAAa,eAAe,EACpE,QAAQ,UAER,SAAAtD,EAAA,IAAC2C,EAAA,CACC,KAAAS,EACA,aAAc,CAAC,EACf,QAAAzB,EACA,OAAQ,CAAC,CAAE,MAAAiB,CAAA,IACT5C,EAAA,IAAC6C,EAAA,CACC,UAAW,IACX,SAAU,GAAGO,YACb,QAASU,GAAc,eACvB,eAAgB,CACd,SAAU,CACZ,EACA,gBAAiBjD,EAAE,2BAA2B,EAC9C,aAAa,SACb,SAAWgB,GAAS0B,EAAQ1B,CAAI,EAChC,OAAQA,EACR,WAAYe,EAAM,MAClB,SAAU,CAACE,EAAGiB,IACZnB,EAAM,SACJA,EAAM,MAAM,KAAMoB,GAAcA,IAAMD,CAAa,EAC/CnB,EAAM,MAAM,OAAQqB,GAAiBA,IAASF,CAAa,EAC3D,CAAC,GAAGnB,EAAM,MAAOmB,CAAa,CACpC,EAEF,QAAUG,GAAU,CAClBA,EAAM,gBAAgB,EAChBtB,EAAA,SAAS,CAAA,CAAE,CACnB,EACA,mBAAoB/B,EAAE,cAAc,EAEnC,WAAgB,IAAI,CAAC,CAAE,MAAAsD,EAAO,KAAAf,KAC7BpD,EAAA,IAACgD,EAAA,CAEC,MAAOmB,EACP,cAAa,GAAGA,WAEf,SAAAf,CAAA,EAJIe,CAAA,CAMR,CAAA,CACH,CAAA,CAEJ,CAAA,CAAA,CAGN,ECjDMC,EAAgB,IAAM,CAC1B,KAAM,CAAE,EAAAvD,CAAA,EAAMC,EAAe,OAAO,EAC9B,CAAE,QAAAa,GAAYC,IAElB,OAAA5B,EAAA,IAAC0C,EAAA,CACC,MAAO7B,EAAE,eAAe,EACxB,QAAQ,oBACR,kBAAmBA,EAAE,iBAAiB,EACtC,UACEb,EAAA,IAAC6D,EAAA,CACC,SAAUhD,EAAE,0BAA0B,EACtC,aAAa,qBAAA,CACf,EAGF,SAAAb,EAAA,IAAC2C,EAAA,CACC,KAAK,gBACL,aAAc,GACd,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAiB,CAAA,IACT5C,EAAA,IAACqE,EAAA,CACC,cAAY,wBACZ,GAAG,yBACH,SAAWtB,GAAUH,EAAM,SAASG,CAAK,EACzC,UAAWH,EAAM,MACjB,MAAO/B,EAAE,YAAY,EACrB,SAAUA,EAAE,WAAW,CAAA,CACzB,CAAA,CAEJ,CAAA,CAAA,CAGN,EAEayD,GAAW,CAAC,CACvB,KAAAjF,EACA,WAAY,CAAE,sBAAAkF,EAAuB,SAAAC,GAAa,CAChD,sBAAuB,GACvB,SAAU,EACZ,EACA,KAAAC,EACA,eAAAC,CACF,IAAqB,CACnB,KAAM,CAAE,EAAA7D,CAAA,EAAMC,EAAe,OAAO,EAC9B,CAAE,MAAO6D,CAAU,EAAIlF,EAAS,EAChCmF,EAAaC,KACbC,EAAmBC,KAEnBC,EAAWC,KACX,CAAE,YAAAvF,GAAgBC,IAClB,CAAE,SAAAuF,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,UAAAC,GAAc9F,IAChB+F,EAAYD,EAAU,cAAc,EAEpC,CACJ,aAAAE,EACA,SAAA7D,EACA,MAAA8D,EACA,QAAA7D,EACA,MAAA8D,EACA,UAAW,CAAE,OAAAhE,CAAO,GAClBG,EAAe,EACb8D,EAAqBF,EAAM,UAAU,EACrC,CAACG,EAAgBC,CAAiB,EAAI9F,EAAA,SAC1C,CAAC,CAAA,EAEG,CAAC+B,EAAM0B,CAAO,EAAIzD,WAAS,EAAK,EAChC,CAAC+F,EAAQC,CAAS,EAAIhG,WAAS0E,CAAQ,EACvC,CAAChF,EAAOuG,CAAQ,EAAIjG,EAA8B,SAAA,EAExDC,EACE,IAAML,EAAY,OAAO,QAAQ,CAAE,MAAOiF,EAAW,EACpDnF,GAAU,CACT,GAAI,CAACA,EACH,MAAM,IAAI,MAAMqB,EAAE,iBAAiB,CAAC,EAEtCkF,EAASvG,CAAK,CAChB,EACA,CAAC,CAAA,EAGH,MAAMwG,EAAa,SAAY,CACzB,GAAA,CACF,MAAMtG,EAAY,gBAAgB,IAAI,CAAE,GAAIL,EAAM,GAAK,EACvD6F,EAASrE,EAAE,eAAe,EAAGoF,EAAa,OAAO,QAC1CzF,GACP2E,EAAS,oBAAqB3E,CAAK,CACrC,CAAA,EAGI0F,EAAcC,GAAe,CACjCP,EAAkBD,EAAe,OAAQ1B,GAASA,EAAK,OAASkC,CAAE,CAAC,EACnEzB,IAAiBiB,CAAc,CAAA,EAG3BS,GAAW,MAAOC,GAAiD,CACvET,EAAkB,CAAC,GAAGD,EAAiB,GAAGU,CAAM,CAAC,EACjD3B,IAAiB,CAAC,GAAGiB,EAAiB,GAAGU,CAAM,CAAC,CAAA,EAG5CC,GAAY,MAAOD,GAAiD,CACtDA,EAER,QAAQ,MAAOE,IAAU,CAC7B,GAAA,CACI,MAAA7G,EAAY,MAAM,WAAW,CACjC,GAAIL,EAAM,GACV,QAASkH,GAAM,EAAA,CAChB,EACDrB,EAASrE,EAAE,4BAA4B,EAAGoF,EAAa,OAAO,QACvDzF,IACP2E,EAAS,kCAAmC3E,EAAK,CACnD,CAAA,CACD,CAAA,EAGGgG,GAAc,IAAM,CACxBjD,EAAQ,CAAC1B,CAAI,CAAA,EAGT4E,EACJ3B,EAAiB4B,GAAQ,sBAAsB,GAC/ClH,GAAO,YAAY,qBAAuB,OAG1C,OAAAmH,EAAA,KAACC,GAAA,CACC,aAAY,GACZ,SAAUrB,EAAad,CAAI,EAC3B,KAAK,cACL,kBAAmBpF,GAAM,QAAQ,OACjC,UAAU,aAET,SAAA,CACCwC,GAAA7B,EAAA,IAAC6G,GAAA,CACC,KAAK,aACL,KAAM,CACJ,MAAO,qBACP,GAAI,YACN,EACA,UAAWvB,EACX,UAAYe,GAAW,CACfhH,GAAA,GAAKiH,GAAUD,GAAU,CAAE,CAAA,EAAID,GAASC,GAAU,CAAA,CAAE,EAC1D9C,EAAQ,EAAK,CACf,EACA,QAAS,IAAMA,EAAQ,EAAK,EAC5B,aAAcoC,CAAA,CAChB,EAEDc,SAAyBrC,EAAc,EAAA,EACvC/E,GAAM,IAEHsH,EAAAA,KAAArF,EAAA,SAAA,CAAA,SAAA,CAACtB,EAAAA,IAAA0C,EAAA,CAAU,MAAO7B,EAAE,WAAW,EAAG,QAAQ,QAAQ,WAAU,GAC1D,SAAAb,EAAA,IAACkD,EAAA,CACC,GAAI7D,EAAK,GACT,aAAYwB,EAAE,QAAQ,EACtB,MAAOxB,EAAK,GACZ,KAAK,OACL,WAAU,EAAA,CAAA,EAEd,EACAW,EAAAA,IAAC0C,GAAU,MAAO7B,EAAE,WAAW,EAAG,QAAQ,gBAAgB,WAAU,GAClE,SAAAb,EAAA,IAACkD,EAAA,CACC,MAAO0B,EAAW,IAAI,KAAKvF,EAAK,gBAAiB,CAAC,EAClD,KAAK,OACL,GAAG,gBACH,aAAYwB,EAAE,WAAW,EACzB,KAAK,mBACL,WAAU,EAAA,CAAA,EAEd,CAAA,EACF,EAEFb,EAAA,IAACmD,GAAA,CACC,KAAK,kBACL,MAAM,sBACN,KAAK,gCAAA,CACP,GACE9D,GAAM,gBAAkBA,GAAM,SAC9BW,EAAA,IAAC0C,EAAA,CACC,MAAO7B,EAAE,gBAAgB,EACzB,UACEb,EAAA,IAAC6D,EAAA,CACC,SAAUhD,EAAE,2BAA2B,EACvC,aAAa,sBAAA,CACf,EAGF,SAAAb,EAAA,IAACZ,IAAkB,KAAAC,CAAY,CAAA,CAAA,CACjC,EAEDoH,EACCzG,EAAA,IAACW,GAAkB,CAAA,CAAA,EAGhBgG,OAAArF,EAAAA,SAAA,CAAA,SAAA,CAAA,CAAC9B,GAAO,6BACPQ,EAAA,IAAC0C,EAAA,CACC,MAAO7B,EAAE,UAAU,EACnB,QAAQ,cACR,WAAU,GACV,UAAWY,EAAO,SAAW,QAAU,UACvC,kBAAmBZ,EAAE,iBAAiB,EAEtC,SAAAb,EAAA,IAACkD,EAAA,CACC,GAAG,cACH,WACE,CAAC,CAAC7D,GAAM,IACR,CAACG,GAAO,qBACRA,GAAO,sBAAwB,OAEhC,GAAGkC,EAAS,UAAU,CAAA,CACzB,CAAA,CACF,EAEF1B,EAAA,IAAC0C,EAAA,CACC,MAAO7B,EAAE,OAAO,EAChB,QAAQ,WACR,UAAWY,EAAO,MAAQ,QAAU,UACpC,kBAAmBZ,EAAE,oBAAoB,EAEzC,SAAAb,EAAA,IAACkD,EAAA,CACC,KAAK,QACL,GAAG,WACH,cAAY,cACX,GAAGxB,EAAS,QAAS,CACpB,QAASoF,EAAA,CACV,CAAA,CACH,CAAA,CACF,QACC1C,EAAc,EAAA,EACfpE,EAAA,IAAC0C,EAAA,CACC,MAAO7B,EAAE,WAAW,EACpB,QAAQ,eACR,UAAWY,EAAO,UAAY,QAAU,UACxC,kBAAmBZ,EAAE,iBAAiB,EAEtC,SAAAb,EAAA,IAACkD,EAAA,CACC,cAAY,kBACZ,GAAG,eACF,GAAGxB,EAAS,WAAW,CAAA,CAC1B,CAAA,CACF,EACA1B,EAAA,IAAC0C,EAAA,CACC,MAAO7B,EAAE,UAAU,EACnB,QAAQ,cACR,UAAWY,EAAO,SAAW,QAAU,UAEvC,SAAAzB,EAAA,IAACkD,EAAA,CACC,cAAY,iBACZ,GAAG,cACH,aAAYrC,EAAE,UAAU,EACvB,GAAGa,EAAS,UAAU,CAAA,CACzB,CAAA,CACF,CAAA,EACF,EAED6C,GACCvE,EAAA,IAAC0C,EAAA,CACC,MAAO7B,EAAE,iBAAiB,EAC1B,QAAQ,kBACR,UACEb,EAAA,IAAC6D,EAAA,CACC,SAAUhD,EAAE,4BAA4B,EACxC,aAAa,uBAAA,CACf,EAGF,SAAAb,EAAA,IAACqE,EAAA,CACC,cAAY,qBACZ,GAAG,kBACH,SAAWtB,GAAU,CACRiD,IACXF,EAAU/C,CAAK,CACjB,EACA,UAAW8C,EACX,WAAY,CAACA,EACb,MAAOhF,EAAE,WAAW,EACpB,SAAUA,EAAE,YAAY,CAAA,CAC1B,CAAA,CACF,EAED,CAACxB,GAAM,IACNW,EAAA,IAAC0C,EAAA,CACC,MAAO7B,EAAE,eAAe,EACxB,QAAQ,YACR,UAAWY,EAAO,gBAAkB,QAAU,UAC9C,kBAAmBZ,EAAE,iBAAiB,EACtC,gBACGgD,EAAS,CAAA,SAAUhD,EAAE,mBAAmB,EAAG,aAAa,SAAS,EAGpE,SAAAb,EAAA,IAAC2C,EAAA,CACC,KAAK,SACL,aAAc,CAAC,EACf,QAAAhB,EACA,OAAQ,IACNgF,EAAAA,KAACI,GACC,CAAA,SAAA,CAAA/G,MAACgH,IAAU,aAAc,IACtB,SAAerB,EAAA,IAAKsB,GACnBjH,EAAA,IAACkH,GAAA,CAEC,QAAS,IAAMhB,EAAWe,EAAY,IAAK,EAE1C,SAAYA,EAAA,IAAA,EAHRA,EAAY,EAKpB,CAAA,EACH,EACAjH,EAAA,IAACC,EAAA,CACC,GAAG,wBACH,QAASuG,GACT,QAAQ,YACR,cAAY,qBAEX,WAAE,kBAAkB,CAAA,CACvB,CAAA,EACF,CAAA,CAEJ,CAAA,CACF,SAGDW,GACC,CAAA,SAAA,CAAAnH,EAAA,IAACC,EAAA,CACC,cAAcZ,GAAM,GAAqB,YAAhB,cACzB,WACE,CAACA,GAAM,IACP,CAACqG,GACD,CAAClG,GAAO,4BAEV,QAAQ,UACR,KAAK,SAEJ,YAAM,GAAKqB,EAAE,aAAa,EAAIA,EAAE,eAAe,CAAA,CAClD,EACAb,EAAA,IAACC,EAAA,CACC,cAAY,qBACZ,QAAS,IACPZ,GAAM,GAAKoG,EAAMpG,CAAI,EAAI2F,EAAS,IAAIL,SAAiB,EAEzD,QAAQ,OAEP,YAAM,GAAK9D,EAAE,eAAe,EAAIA,EAAE,eAAe,CAAA,CACpD,CAAA,EACF,CAAA,CAAA,CAAA,CAGN"}