{"version":3,"file":"ClientProfileForm-9d8f17ea.js","sources":["../../src/realm-settings/ClientProfileForm.tsx"],"sourcesContent":["import type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport type ClientProfilesRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfilesRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  DropdownItem,\n  Flex,\n  FlexItem,\n  FormGroup,\n  Label,\n  PageSection,\n  Text,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon, TrashIcon } from \"@patternfly/react-icons\";\nimport { Fragment, useMemo, useState } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextArea } from \"../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useParams } from \"../utils/useParams\";\nimport { toAddExecutor } from \"./routes/AddExecutor\";\nimport { toClientPolicies } from \"./routes/ClientPolicies\";\nimport { ClientProfileParams, toClientProfile } from \"./routes/ClientProfile\";\nimport { toExecutor } from \"./routes/Executor\";\n\nimport \"./realm-settings-section.css\";\n\ntype ClientProfileForm = Required<ClientProfileRepresentation>;\n\nconst defaultValues: ClientProfileForm = {\n  name: \"\",\n  description: \"\",\n  executors: [],\n};\n\nexport default function ClientProfileForm() {\n  const { t } = useTranslation(\"realm-settings\");\n  const navigate = useNavigate();\n  const {\n    handleSubmit,\n    setValue,\n    getValues,\n    register,\n    formState: { isDirty, errors },\n    control,\n  } = useForm<ClientProfileForm>({\n    defaultValues,\n    mode: \"onChange\",\n  });\n\n  const { fields: profileExecutors, remove } = useFieldArray({\n    name: \"executors\",\n    control,\n  });\n\n  const { addAlert, addError } = useAlerts();\n  const { adminClient } = useAdminClient();\n  const [profiles, setProfiles] = useState<ClientProfilesRepresentation>();\n  const [isGlobalProfile, setIsGlobalProfile] = useState(false);\n  const { realm, profileName } = useParams<ClientProfileParams>();\n  const serverInfo = useServerInfo();\n  const executorTypes = useMemo(\n    () =>\n      serverInfo.componentTypes?.[\n        \"org.keycloak.services.clientpolicy.executor.ClientPolicyExecutorProvider\"\n      ],\n    []\n  );\n  const [executorToDelete, setExecutorToDelete] = useState<{\n    idx: number;\n    name: string;\n  }>();\n  const editMode = profileName ? true : false;\n  const [key, setKey] = useState(0);\n  const reload = () => setKey(key + 1);\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({ includeGlobalProfiles: true }),\n    (profiles) => {\n      setProfiles({\n        globalProfiles: profiles.globalProfiles,\n        profiles: profiles.profiles?.filter((p) => p.name !== profileName),\n      });\n      const globalProfile = profiles.globalProfiles?.find(\n        (p) => p.name === profileName\n      );\n      const profile = profiles.profiles?.find((p) => p.name === profileName);\n      setIsGlobalProfile(globalProfile !== undefined);\n      setValue(\"name\", globalProfile?.name ?? profile?.name ?? \"\");\n      setValue(\n        \"description\",\n        globalProfile?.description ?? profile?.description ?? \"\"\n      );\n      setValue(\n        \"executors\",\n        globalProfile?.executors ?? profile?.executors ?? []\n      );\n    },\n    [key]\n  );\n\n  const save = async (form: ClientProfileForm) => {\n    const updatedProfiles = form;\n\n    try {\n      await adminClient.clientPolicies.createProfiles({\n        ...profiles,\n        profiles: [...(profiles?.profiles || []), updatedProfiles],\n      });\n\n      addAlert(\n        editMode\n          ? t(\"realm-settings:updateClientProfileSuccess\")\n          : t(\"realm-settings:createClientProfileSuccess\"),\n        AlertVariant.success\n      );\n\n      navigate(toClientProfile({ realm, profileName: form.name }));\n    } catch (error) {\n      addError(\n        editMode\n          ? \"realm-settings:updateClientProfileError\"\n          : \"realm-settings:createClientProfileError\",\n        error\n      );\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: executorToDelete?.name!\n      ? t(\"deleteExecutorProfileConfirmTitle\")\n      : t(\"deleteClientProfileConfirmTitle\"),\n    messageKey: executorToDelete?.name!\n      ? t(\"deleteExecutorProfileConfirm\", {\n          executorName: executorToDelete.name!,\n        })\n      : t(\"deleteClientProfileConfirm\", {\n          profileName,\n        }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n\n    onConfirm: async () => {\n      if (executorToDelete?.name!) {\n        remove(executorToDelete.idx);\n        try {\n          await adminClient.clientPolicies.createProfiles({\n            ...profiles,\n            profiles: [...(profiles!.profiles || []), getValues()],\n          });\n          addAlert(t(\"deleteExecutorSuccess\"), AlertVariant.success);\n          navigate(toClientProfile({ realm, profileName }));\n        } catch (error) {\n          addError(t(\"deleteExecutorError\"), error);\n        }\n      } else {\n        try {\n          await adminClient.clientPolicies.createProfiles(profiles);\n          addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n          navigate(toClientPolicies({ realm, tab: \"profiles\" }));\n        } catch (error) {\n          addError(t(\"deleteClientError\"), error);\n        }\n      }\n    },\n  });\n\n  if (!profiles) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={editMode ? profileName : t(\"newClientProfile\")}\n        badges={[\n          {\n            id: \"global-client-profile-badge\",\n            text: isGlobalProfile ? (\n              <Label color=\"blue\">{t(\"global\")}</Label>\n            ) : (\n              \"\"\n            ),\n          },\n        ]}\n        divider\n        dropdownItems={\n          editMode && !isGlobalProfile\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  value=\"delete\"\n                  onClick={toggleDeleteDialog}\n                  data-testid=\"deleteClientProfileDropdown\"\n                >\n                  {t(\"deleteClientProfile\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess isHorizontal role=\"view-realm\" className=\"pf-u-mt-lg\">\n          <FormGroup\n            label={t(\"newClientProfileName\")}\n            fieldId=\"kc-name\"\n            helperText={t(\"createClientProfileNameHelperText\")}\n            isRequired\n            helperTextInvalid={t(\"common:required\")}\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-name\"\n              data-testid=\"client-profile-name\"\n              isReadOnly={isGlobalProfile}\n              {...register(\"name\", { required: true })}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"common:description\")} fieldId=\"kc-description\">\n            <KeycloakTextArea\n              id=\"kc-description\"\n              data-testid=\"client-profile-description\"\n              isReadOnly={isGlobalProfile}\n              {...register(\"description\")}\n            />\n          </FormGroup>\n          <ActionGroup>\n            {!isGlobalProfile && (\n              <Button\n                variant=\"primary\"\n                onClick={() => handleSubmit(save)()}\n                data-testid=\"saveCreateProfile\"\n                isDisabled={!isDirty}\n              >\n                {t(\"common:save\")}\n              </Button>\n            )}\n            {editMode && !isGlobalProfile && (\n              <Button\n                id={\"reloadProfile\"}\n                variant=\"link\"\n                data-testid={\"reloadProfile\"}\n                isDisabled={!isDirty}\n                onClick={reload}\n              >\n                {t(\"realm-settings:reload\")}\n              </Button>\n            )}\n            {!editMode && !isGlobalProfile && (\n              <Button\n                id={\"cancelCreateProfile\"}\n                variant=\"link\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toClientPolicies({ realm, tab: \"profiles\" })}\n                  />\n                )}\n                data-testid={\"cancelCreateProfile\"}\n              >\n                {t(\"common:cancel\")}\n              </Button>\n            )}\n          </ActionGroup>\n          {editMode && (\n            <>\n              <Flex>\n                <FlexItem>\n                  <Text className=\"kc-executors\" component={TextVariants.h1}>\n                    {t(\"executors\")}\n                    <HelpItem\n                      helpText={t(\"realm-settings:executorsHelpText\")}\n                      fieldLabelId=\"realm-settings:executors\"\n                    />\n                  </Text>\n                </FlexItem>\n                {!isGlobalProfile && (\n                  <FlexItem align={{ default: \"alignRight\" }}>\n                    <Button\n                      id=\"addExecutor\"\n                      component={(props) => (\n                        <Link\n                          {...props}\n                          to={toAddExecutor({\n                            realm,\n                            profileName,\n                          })}\n                        />\n                      )}\n                      variant=\"link\"\n                      className=\"kc-addExecutor\"\n                      data-testid=\"addExecutor\"\n                      icon={<PlusCircleIcon />}\n                    >\n                      {t(\"realm-settings:addExecutor\")}\n                    </Button>\n                  </FlexItem>\n                )}\n              </Flex>\n              {profileExecutors.length > 0 && (\n                <>\n                  <DataList aria-label={t(\"executors\")} isCompact>\n                    {profileExecutors.map((executor, idx) => (\n                      <DataListItem\n                        aria-labelledby={\"executors-list-item\"}\n                        key={executor.executor}\n                        id={executor.executor}\n                      >\n                        <DataListItemRow data-testid=\"executors-list-row\">\n                          <DataListItemCells\n                            dataListCells={[\n                              <DataListCell\n                                key=\"executor\"\n                                data-testid=\"executor-type\"\n                              >\n                                {executor.configuration ? (\n                                  <Button\n                                    component={(props) => (\n                                      <Link\n                                        {...props}\n                                        to={toExecutor({\n                                          realm,\n                                          profileName,\n                                          executorName: executor.executor!,\n                                        })}\n                                      />\n                                    )}\n                                    variant=\"link\"\n                                    data-testid=\"editExecutor\"\n                                  >\n                                    {executor.executor}\n                                  </Button>\n                                ) : (\n                                  <span className=\"kc-unclickable-executor\">\n                                    {executor.executor}\n                                  </span>\n                                )}\n                                {executorTypes\n                                  ?.filter(\n                                    (type) => type.id === executor.executor\n                                  )\n                                  .map((type) => (\n                                    <Fragment key={type.id}>\n                                      <HelpItem\n                                        key={type.id}\n                                        helpText={type.helpText}\n                                        fieldLabelId=\"realm-settings:executorTypeTextHelpText\"\n                                      />\n                                      {!isGlobalProfile && (\n                                        <Button\n                                          variant=\"link\"\n                                          isInline\n                                          icon={\n                                            <TrashIcon\n                                              key={`executorType-trash-icon-${type.id}`}\n                                              className=\"kc-executor-trash-icon\"\n                                              data-testid=\"deleteExecutor\"\n                                            />\n                                          }\n                                          onClick={() => {\n                                            toggleDeleteDialog();\n                                            setExecutorToDelete({\n                                              idx: idx,\n                                              name: type.id,\n                                            });\n                                          }}\n                                          aria-label={t(\"common:remove\")}\n                                        />\n                                      )}\n                                    </Fragment>\n                                  ))}\n                              </DataListCell>,\n                            ]}\n                          />\n                        </DataListItemRow>\n                      </DataListItem>\n                    ))}\n                  </DataList>\n                  {isGlobalProfile && (\n                    <Button\n                      id=\"backToClientPolicies\"\n                      component={(props) => (\n                        <Link\n                          {...props}\n                          to={toClientPolicies({ realm, tab: \"profiles\" })}\n                        />\n                      )}\n                      variant=\"primary\"\n                      className=\"kc-backToPolicies\"\n                      data-testid=\"backToClientPolicies\"\n                    >\n                      {t(\"realm-settings:back\")}\n                    </Button>\n                  )}\n                </>\n              )}\n              {profileExecutors.length === 0 && (\n                <>\n                  <Divider />\n                  <Text\n                    className=\"kc-emptyExecutors\"\n                    component={TextVariants.h6}\n                  >\n                    {t(\"realm-settings:emptyExecutors\")}\n                  </Text>\n                </>\n              )}\n            </>\n          )}\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["defaultValues","ClientProfileForm","useTranslation","navigate","useNavigate","handleSubmit","setValue","getValues","register","isDirty","errors","control","useForm","profileExecutors","remove","useFieldArray","addAlert","addError","useAlerts","adminClient","useAdminClient","profiles","setProfiles","useState","isGlobalProfile","setIsGlobalProfile","realm","profileName","useParams","serverInfo","useServerInfo","executorTypes","useMemo","executorToDelete","setExecutorToDelete","editMode","key","setKey","reload","useFetch","p","globalProfile","profile","save","form","updatedProfiles","AlertVariant","toClientProfile","error","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","toClientPolicies","jsxs","Fragment","jsx","ViewHeader","Label","DropdownItem","PageSection","FormAccess","FormGroup","ValidatedOptions","KeycloakTextInput","KeycloakTextArea","ActionGroup","Button","props","Link","Flex","FlexItem","Text","TextVariants","HelpItem","toAddExecutor","PlusCircleIcon","DataList","executor","idx","DataListItem","DataListItemRow","DataListItemCells","DataListCell","toExecutor","type","TrashIcon","Divider","KeycloakSpinner"],"mappings":"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"}