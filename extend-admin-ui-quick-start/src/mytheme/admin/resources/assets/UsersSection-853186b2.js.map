{"version":3,"file":"UsersSection-853186b2.js","sources":["../../src/user/UsersSection.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  EmptyState,\n  InputGroup,\n  KebabToggle,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  InfoCircleIcon,\n  SearchIcon,\n  WarningTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { IRowData } from \"@patternfly/react-table\";\n\nimport type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emptyFormatter } from \"../util\";\nimport { toUser } from \"./routes/User\";\nimport { toAddUser } from \"./routes/AddUser\";\nimport helpUrls from \"../help-urls\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { toUsers, UserTab } from \"./routes/Users\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { useAccess } from \"../context/access/Access\";\nimport { BruteUser, findUsers } from \"../components/role-mapping/resource\";\n\nimport \"./user-section.css\";\n\nexport default function UsersSection() {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const navigate = useNavigate();\n  const [userStorage, setUserStorage] = useState<ComponentRepresentation[]>();\n  const [searchUser, setSearchUser] = useState<string>();\n  const [realm, setRealm] = useState<RealmRepresentation | undefined>();\n  const [kebabOpen, setKebabOpen] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n  const { profileInfo } = useServerInfo();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const { hasAccess } = useAccess();\n\n  // Only needs query-users access to attempt add/delete of users.\n  // This is because the user could have fine-grained access to users\n  // of a group.  There is no way to know this without searching the\n  // permissions of every group.\n  const isManager = hasAccess(\"query-users\");\n\n  useFetch(\n    async () => {\n      const testParams = {\n        type: \"org.keycloak.storage.UserStorageProvider\",\n      };\n\n      try {\n        return await Promise.all([\n          adminClient.components.find(testParams),\n          adminClient.realms.findOne({ realm: realmName }),\n        ]);\n      } catch {\n        return [[], {}] as [\n          ComponentRepresentation[],\n          RealmRepresentation | undefined\n        ];\n      }\n    },\n    ([storageProviders, realm]) => {\n      setUserStorage(\n        storageProviders.filter((p) => p.config?.enabled[0] === \"true\")\n      );\n      setRealm(realm);\n    },\n    []\n  );\n\n  const useTab = (tab: UserTab) =>\n    useRoutableTab(\n      toUsers({\n        realm: realmName,\n        tab,\n      })\n    );\n\n  const listTab = useTab(\"list\");\n  const permissionsTab = useTab(\"permissions\");\n\n  const UserDetailLink = (user: UserRepresentation) => (\n    <Link\n      key={user.username}\n      to={toUser({ realm: realmName, id: user.id!, tab: \"settings\" })}\n    >\n      {user.username}\n    </Link>\n  );\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max!,\n    };\n\n    const searchParam = search || searchUser || \"\";\n    if (searchParam) {\n      params.search = searchParam;\n    }\n\n    if (!listUsers && !searchParam) {\n      return [];\n    }\n\n    try {\n      return await findUsers({\n        adminClient,\n        briefRepresentation: true,\n        ...params,\n      });\n    } catch (error) {\n      if (userStorage?.length) {\n        addError(\"users:noUsersFoundErrorStorage\", error);\n      } else {\n        addError(\"users:noUsersFoundError\", error);\n      }\n      return [];\n    }\n  };\n\n  const [toggleUnlockUsersDialog, UnlockUsersConfirm] = useConfirmDialog({\n    titleKey: \"users:unlockAllUsers\",\n    messageKey: \"users:unlockUsersConfirm\",\n    continueButtonLabel: \"users:unlock\",\n    onConfirm: async () => {\n      try {\n        await adminClient.attackDetection.delAll();\n        refresh();\n        addAlert(t(\"unlockUsersSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:unlockUsersError\", error);\n      }\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"users:deleteConfirm\",\n    messageKey: t(\"deleteConfirmDialog\", { count: selectedRows.length }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        for (const user of selectedRows) {\n          await adminClient.users.del({ id: user.id! });\n        }\n        setSelectedRows([]);\n        refresh();\n        addAlert(t(\"userDeletedSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:userDeletedError\", error);\n      }\n    },\n  });\n\n  const StatusRow = (user: BruteUser) => {\n    return (\n      <>\n        {!user.enabled && (\n          <Label key={user.id} color=\"red\" icon={<InfoCircleIcon />}>\n            {t(\"disabled\")}\n          </Label>\n        )}\n        {user.bruteForceStatus?.disabled && (\n          <Label key={user.id} color=\"orange\" icon={<WarningTriangleIcon />}>\n            {t(\"temporaryLocked\")}\n          </Label>\n        )}\n        {user.enabled && !user.bruteForceStatus?.disabled && \"â€”\"}\n      </>\n    );\n  };\n\n  const ValidatedEmail = (user: UserRepresentation) => {\n    return (\n      <>\n        {!user.emailVerified && (\n          <Tooltip\n            key={`email-verified-${user.id}`}\n            content={<>{t(\"notVerified\")}</>}\n          >\n            <ExclamationCircleIcon className=\"keycloak__user-section__email-verified\" />\n          </Tooltip>\n        )}{\" \"}\n        {emptyFormatter()(user.email)}\n      </>\n    );\n  };\n\n  const goToCreate = () => navigate(toAddUser({ realm: realmName }));\n\n  if (!userStorage || !realm) {\n    return <KeycloakSpinner />;\n  }\n\n  //should *only* list users when no user federation is configured\n  const listUsers = !(userStorage.length > 0);\n\n  const toolbar = (\n    <>\n      <ToolbarItem>\n        <Button data-testid=\"add-user\" onClick={goToCreate}>\n          {t(\"addUser\")}\n        </Button>\n      </ToolbarItem>\n      {!realm.bruteForceProtected ? (\n        <ToolbarItem>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={toggleDeleteDialog}\n            data-testid=\"delete-user-btn\"\n            isDisabled={selectedRows.length === 0}\n          >\n            {t(\"deleteUser\")}\n          </Button>\n        </ToolbarItem>\n      ) : (\n        <ToolbarItem>\n          <Dropdown\n            toggle={<KebabToggle onToggle={(open) => setKebabOpen(open)} />}\n            isOpen={kebabOpen}\n            isPlain\n            dropdownItems={[\n              <DropdownItem\n                key=\"deleteUser\"\n                component=\"button\"\n                isDisabled={selectedRows.length === 0}\n                onClick={() => {\n                  toggleDeleteDialog();\n                  setKebabOpen(false);\n                }}\n              >\n                {t(\"deleteUser\")}\n              </DropdownItem>,\n\n              <DropdownItem\n                key=\"unlock\"\n                component=\"button\"\n                onClick={() => {\n                  toggleUnlockUsersDialog();\n                  setKebabOpen(false);\n                }}\n              >\n                {t(\"unlockAllUsers\")}\n              </DropdownItem>,\n            ]}\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      <DeleteConfirm />\n      <UnlockUsersConfirm />\n      <ViewHeader\n        titleKey=\"users:title\"\n        subKey=\"users:usersExplain\"\n        helpUrl={helpUrls.usersUrl}\n        divider={false}\n      />\n      <PageSection\n        data-testid=\"users-page\"\n        variant=\"light\"\n        className=\"pf-u-p-0\"\n      >\n        <RoutableTabs\n          data-testid=\"user-tabs\"\n          defaultLocation={toUsers({\n            realm: realmName,\n            tab: \"list\",\n          })}\n          isBox\n          mountOnEnter\n        >\n          <Tab\n            id=\"list\"\n            data-testid=\"listTab\"\n            title={<TabTitleText>{t(\"userList\")}</TabTitleText>}\n            {...listTab}\n          >\n            <KeycloakDataTable\n              key={key}\n              loader={loader}\n              isPaginated\n              ariaLabelKey=\"users:title\"\n              searchPlaceholderKey=\"users:searchForUser\"\n              canSelectAll\n              onSelect={(rows) => setSelectedRows([...rows])}\n              emptyState={\n                !listUsers ? (\n                  <>\n                    <Toolbar>\n                      <ToolbarContent>\n                        <ToolbarItem>\n                          <InputGroup>\n                            <TextInput\n                              name=\"search-input\"\n                              type=\"search\"\n                              aria-label={t(\"search\")}\n                              placeholder={t(\"users:searchForUser\")}\n                              onChange={(value) => {\n                                setSearchUser(value);\n                              }}\n                              onKeyDown={(e) => {\n                                if (e.key === \"Enter\") {\n                                  refresh();\n                                }\n                              }}\n                            />\n                            <Button\n                              variant={ButtonVariant.control}\n                              aria-label={t(\"common:search\")}\n                              onClick={refresh}\n                            >\n                              <SearchIcon />\n                            </Button>\n                          </InputGroup>\n                        </ToolbarItem>\n                        {toolbar}\n                      </ToolbarContent>\n                    </Toolbar>\n                    <EmptyState data-testid=\"empty-state\" variant=\"large\">\n                      <TextContent className=\"kc-search-users-text\">\n                        <Text>{t(\"searchForUserDescription\")}</Text>\n                      </TextContent>\n                    </EmptyState>\n                  </>\n                ) : (\n                  <ListEmptyState\n                    message={t(\"noUsersFound\")}\n                    instructions={t(\"emptyInstructions\")}\n                    primaryActionText={t(\"createNewUser\")}\n                    onPrimaryAction={goToCreate}\n                  />\n                )\n              }\n              toolbarItem={isManager ? toolbar : undefined}\n              actionResolver={(rowData: IRowData) => {\n                const user: UserRepresentation = rowData.data;\n                if (!user.access?.manage) return [];\n\n                return [\n                  {\n                    title: t(\"common:delete\"),\n                    onClick: () => {\n                      setSelectedRows([user]);\n                      toggleDeleteDialog();\n                    },\n                  },\n                ];\n              }}\n              columns={[\n                {\n                  name: \"username\",\n                  displayKey: \"users:username\",\n                  cellRenderer: UserDetailLink,\n                },\n                {\n                  name: \"email\",\n                  displayKey: \"users:email\",\n                  cellRenderer: ValidatedEmail,\n                },\n                {\n                  name: \"lastName\",\n                  displayKey: \"users:lastName\",\n                  cellFormatters: [emptyFormatter()],\n                },\n                {\n                  name: \"firstName\",\n                  displayKey: \"users:firstName\",\n                  cellFormatters: [emptyFormatter()],\n                },\n                {\n                  name: \"status\",\n                  displayKey: \"users:status\",\n                  cellRenderer: StatusRow,\n                },\n              ]}\n            />\n          </Tab>\n          {!profileInfo?.disabledFeatures?.includes(\n            \"ADMIN_FINE_GRAINED_AUTHZ\"\n          ) && (\n            <Tab\n              id=\"permissions\"\n              data-testid=\"permissionsTab\"\n              title={<TabTitleText>{t(\"common:permissions\")}</TabTitleText>}\n              {...permissionsTab}\n            >\n              <PermissionsTab type=\"users\" />\n            </Tab>\n          )}\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["UsersSection","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","realmName","useRealm","navigate","useNavigate","userStorage","setUserStorage","useState","searchUser","setSearchUser","realm","setRealm","kebabOpen","setKebabOpen","selectedRows","setSelectedRows","profileInfo","useServerInfo","key","setKey","refresh","hasAccess","useAccess","isManager","useFetch","testParams","storageProviders","p","useTab","tab","useRoutableTab","toUsers","listTab","permissionsTab","UserDetailLink","user","jsx","Link","toUser","loader","first","max","search","params","searchParam","listUsers","findUsers","error","toggleUnlockUsersDialog","UnlockUsersConfirm","useConfirmDialog","AlertVariant","toggleDeleteDialog","DeleteConfirm","ButtonVariant","StatusRow","jsxs","Fragment","Label","InfoCircleIcon","WarningTriangleIcon","ValidatedEmail","Tooltip","ExclamationCircleIcon","emptyFormatter","goToCreate","toAddUser","KeycloakSpinner","toolbar","ToolbarItem","Button","Dropdown","KebabToggle","open","DropdownItem","ViewHeader","helpUrls","PageSection","RoutableTabs","Tab","TabTitleText","KeycloakDataTable","rows","ListEmptyState","Toolbar","ToolbarContent","InputGroup","TextInput","value","e","SearchIcon","EmptyState","TextContent","Text","rowData","PermissionsTab"],"mappings":"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"}