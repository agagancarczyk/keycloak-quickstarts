{"version":3,"file":"AddSamlConnect-f9c32f49.js","sources":["../../src/identity-providers/add/SamlConnectSettings.tsx","../../src/identity-providers/add/AddSamlConnect.tsx"],"sourcesContent":["import { FormGroup, Title } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\n\nimport type IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\n\nimport { FileUploadForm } from \"../../components/json-file-upload/FileUploadForm\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport environment from \"../../environment\";\nimport { addTrailingSlash } from \"../../util\";\nimport { getAuthorizationHeaders } from \"../../utils/getAuthorizationHeaders\";\nimport { DiscoveryEndpointField } from \"../component/DiscoveryEndpointField\";\nimport { DescriptorSettings } from \"./DescriptorSettings\";\n\ntype FormFields = IdentityProviderRepresentation & {\n  discoveryError: string;\n};\n\nexport const SamlConnectSettings = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const id = \"saml\";\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const {\n    setValue,\n    register,\n    setError,\n    clearErrors,\n    formState: { errors },\n  } = useFormContext<FormFields>();\n\n  const setupForm = (result: IdentityProviderRepresentation) => {\n    Object.entries(result).map(([key, value]) =>\n      setValue(`config.${key}`, value)\n    );\n  };\n\n  const fileUpload = async (xml: string) => {\n    clearErrors(\"discoveryError\");\n    if (!xml) {\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"providerId\", id);\n    formData.append(\"file\", new Blob([xml]));\n\n    try {\n      const response = await fetch(\n        `${addTrailingSlash(\n          adminClient.baseUrl\n        )}admin/realms/${realm}/identity-provider/import-config`,\n        {\n          method: \"POST\",\n          body: formData,\n          headers: getAuthorizationHeaders(await adminClient.getAccessToken()),\n        }\n      );\n      if (response.ok) {\n        const result = await response.json();\n        setupForm(result);\n      } else {\n        setError(\"discoveryError\", {\n          type: \"manual\",\n          message: response.statusText,\n        });\n      }\n    } catch (error) {\n      setError(\"discoveryError\", {\n        type: \"manual\",\n        message: (error as Error).message,\n      });\n    }\n  };\n\n  return (\n    <>\n      <Title headingLevel=\"h4\" size=\"xl\" className=\"kc-form-panel__title\">\n        {t(\"samlSettings\")}\n      </Title>\n\n      <FormGroup\n        label={t(\"serviceProviderEntityId\")}\n        fieldId=\"kc-service-provider-entity-id\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:serviceProviderEntityId\")}\n            fieldLabelId=\"identity-providers:serviceProviderEntityId\"\n          />\n        }\n        isRequired\n        helperTextInvalid={t(\"common:required\")}\n        validated={errors.config?.entityId ? \"error\" : \"default\"}\n      >\n        <KeycloakTextInput\n          data-testid=\"serviceProviderEntityId\"\n          id=\"kc-service-provider-entity-id\"\n          validated={errors.config?.entityId ? \"error\" : \"default\"}\n          defaultValue={`${environment.authServerUrl}/realms/${realm}`}\n          {...register(\"config.entityId\", { required: true })}\n        />\n      </FormGroup>\n\n      <DiscoveryEndpointField\n        id=\"saml\"\n        fileUpload={\n          <FormGroup\n            label={t(\"importConfig\")}\n            fieldId=\"kc-import-config\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"identity-providers-help:importConfig\")}\n                fieldLabelId=\"identity-providers:importConfig\"\n              />\n            }\n            validated={errors.discoveryError ? \"error\" : \"default\"}\n            helperTextInvalid={errors.discoveryError?.message}\n          >\n            <FileUploadForm\n              id=\"kc-import-config\"\n              extension=\".xml\"\n              hideDefaultPreview\n              unWrap\n              validated={errors.discoveryError ? \"error\" : \"default\"}\n              onChange={(value) => fileUpload(value)}\n            />\n          </FormGroup>\n        }\n      >\n        {(readonly) => <DescriptorSettings readOnly={readonly} />}\n      </DiscoveryEndpointField>\n    </>\n  );\n};\n","import {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport type IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toIdentityProvider } from \"../routes/IdentityProvider\";\nimport { toIdentityProviders } from \"../routes/IdentityProviders\";\nimport { SamlConnectSettings } from \"./SamlConnectSettings\";\nimport { SamlGeneralSettings } from \"./SamlGeneralSettings\";\n\ntype DiscoveryIdentityProvider = IdentityProviderRepresentation & {\n  discoveryEndpoint?: string;\n};\n\nexport default function AddSamlConnect() {\n  const { t } = useTranslation(\"identity-providers\");\n  const navigate = useNavigate();\n  const id = \"saml\";\n\n  const form = useForm<DiscoveryIdentityProvider>({\n    defaultValues: { alias: id, config: { allowCreate: \"true\" } },\n  });\n  const {\n    handleSubmit,\n    formState: { isDirty },\n  } = form;\n\n  const { adminClient } = useAdminClient();\n  const { addAlert } = useAlerts();\n  const { realm } = useRealm();\n\n  const onSubmit = async (provider: DiscoveryIdentityProvider) => {\n    delete provider.discoveryEndpoint;\n    try {\n      await adminClient.identityProviders.create({\n        ...provider,\n        providerId: id,\n      });\n      addAlert(t(\"createSuccess\"), AlertVariant.success);\n      navigate(\n        toIdentityProvider({\n          realm,\n          providerId: id,\n          alias: provider.alias!,\n          tab: \"settings\",\n        })\n      );\n    } catch (error: any) {\n      addAlert(\n        t(\"createError\", {\n          error: error.response?.data?.errorMessage || error,\n        }),\n        AlertVariant.danger\n      );\n    }\n  };\n\n  return (\n    <>\n      <ViewHeader titleKey={t(\"addSamlProvider\")} />\n      <PageSection variant=\"light\">\n        <FormProvider {...form}>\n          <FormAccess\n            role=\"manage-identity-providers\"\n            isHorizontal\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <SamlGeneralSettings id={id} />\n            <SamlConnectSettings />\n            <ActionGroup>\n              <Button\n                isDisabled={!isDirty}\n                variant=\"primary\"\n                type=\"submit\"\n                data-testid=\"createProvider\"\n              >\n                {t(\"common:add\")}\n              </Button>\n              <Button\n                variant=\"link\"\n                data-testid=\"cancel\"\n                component={(props) => (\n                  <Link {...props} to={toIdentityProviders({ realm })} />\n                )}\n              >\n                {t(\"common:cancel\")}\n              </Button>\n            </ActionGroup>\n          </FormAccess>\n        </FormProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["SamlConnectSettings","t","useTranslation","id","adminClient","useAdminClient","realm","useRealm","setValue","register","setError","clearErrors","errors","useFormContext","setupForm","result","key","value","fileUpload","xml","formData","response","addTrailingSlash","getAuthorizationHeaders","error","jsxs","Fragment","jsx","Title","FormGroup","HelpItem","KeycloakTextInput","environment","DiscoveryEndpointField","FileUploadForm","readonly","DescriptorSettings","AddSamlConnect","navigate","useNavigate","form","useForm","handleSubmit","isDirty","addAlert","useAlerts","onSubmit","provider","AlertVariant","toIdentityProvider","ViewHeader","PageSection","FormProvider","FormAccess","SamlGeneralSettings","ActionGroup","Button","props","Link","toIdentityProviders"],"mappings":"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"}