{"version":3,"file":"AddMapper-6ffeb7ed.js","sources":["../../src/identity-providers/add/AddMapperForm.tsx","../../src/identity-providers/add/AddMapper.tsx"],"sourcesContent":["import type IdentityProviderMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperRepresentation\";\nimport type { IdentityProviderMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperTypeRepresentation\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport type { IdPMapperRepresentationWithAttributes } from \"./AddMapper\";\n\ntype AddMapperFormProps = {\n  mapperTypes: IdentityProviderMapperRepresentation[];\n  mapperType: IdentityProviderMapperTypeRepresentation;\n  id: string;\n  updateMapperType: (\n    mapperType: IdentityProviderMapperTypeRepresentation\n  ) => void;\n  form: UseFormReturn<IdPMapperRepresentationWithAttributes>;\n};\n\nexport const AddMapperForm = ({\n  mapperTypes,\n  mapperType,\n  form,\n  id,\n  updateMapperType,\n}: AddMapperFormProps) => {\n  const { t } = useTranslation(\"identity-providers\");\n\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = form;\n\n  const [mapperTypeOpen, setMapperTypeOpen] = useState(false);\n\n  const syncModes = [\"inherit\", \"import\", \"legacy\", \"force\"];\n  const [syncModeOpen, setSyncModeOpen] = useState(false);\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"common:name\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:addIdpMapperName\")}\n            fieldLabelId=\"name\"\n          />\n        }\n        fieldId=\"kc-name\"\n        isRequired\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          id=\"kc-name\"\n          isDisabled={!!id}\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          {...register(\"name\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"syncModeOverride\")}\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:syncModeOverride\")}\n            fieldLabelId=\"identity-providers:syncModeOverride\"\n          />\n        }\n        fieldId=\"syncMode\"\n      >\n        <Controller\n          name=\"config.syncMode\"\n          defaultValue={syncModes[0].toUpperCase()}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"syncMode\"\n              datatest-id=\"syncmode-select\"\n              required\n              direction=\"down\"\n              onToggle={() => setSyncModeOpen(!syncModeOpen)}\n              onSelect={(_, value) => {\n                field.onChange(value.toString().toUpperCase());\n                setSyncModeOpen(false);\n              }}\n              selections={t(`syncModes.${field.value.toLowerCase()}`)}\n              variant={SelectVariant.single}\n              aria-label={t(\"syncMode\")}\n              isOpen={syncModeOpen}\n            >\n              {syncModes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  data-testid={option}\n                  value={option.toUpperCase()}\n                >\n                  {t(`syncModes.${option}`)}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"mapperType\")}\n        labelIcon={\n          <HelpItem\n            helpText={mapperType.helpText}\n            fieldLabelId=\"identity-providers:mapperType\"\n          />\n        }\n        fieldId=\"identityProviderMapper\"\n      >\n        <Controller\n          name=\"identityProviderMapper\"\n          defaultValue={mapperTypes[0].id}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"identityProviderMapper\"\n              data-testid=\"idp-mapper-select\"\n              isDisabled={!!id}\n              required\n              onToggle={() => setMapperTypeOpen(!mapperTypeOpen)}\n              onSelect={(_, value) => {\n                const mapperType =\n                  value as IdentityProviderMapperTypeRepresentation;\n                updateMapperType(mapperType);\n                field.onChange(mapperType.id);\n                setMapperTypeOpen(false);\n              }}\n              selections={mapperType.name}\n              variant={SelectVariant.single}\n              aria-label={t(\"mapperType\")}\n              isOpen={mapperTypeOpen}\n            >\n              {mapperTypes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  datatest-id={option.id}\n                  key={option.name}\n                  value={option}\n                >\n                  {option.name}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import type IdentityProviderMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperRepresentation\";\nimport type { IdentityProviderMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperTypeRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  FormGroup,\n  PageSection,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { DynamicComponents } from \"../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport type { AttributeForm } from \"../../components/key-value-form/AttributeForm\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport { useParams } from \"../../utils/useParams\";\nimport {\n  IdentityProviderEditMapperParams,\n  toIdentityProviderEditMapper,\n} from \"../routes/EditMapper\";\nimport { toIdentityProvider } from \"../routes/IdentityProvider\";\nimport { AddMapperForm } from \"./AddMapperForm\";\n\nexport type IdPMapperRepresentationWithAttributes =\n  IdentityProviderMapperRepresentation & AttributeForm;\n\nexport type Role = RoleRepresentation & {\n  clientId?: string;\n};\n\nexport default function AddMapper() {\n  const { t } = useTranslation(\"identity-providers\");\n\n  const form = useForm<IdPMapperRepresentationWithAttributes>();\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = form;\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const localeSort = useLocaleSort();\n\n  const { realm } = useRealm();\n  const { adminClient } = useAdminClient();\n\n  const { id, providerId, alias } =\n    useParams<IdentityProviderEditMapperParams>();\n\n  const [mapperTypes, setMapperTypes] =\n    useState<IdentityProviderMapperTypeRepresentation[]>();\n\n  const [currentMapper, setCurrentMapper] =\n    useState<IdentityProviderMapperTypeRepresentation>();\n\n  const save = async (idpMapper: IdentityProviderMapperRepresentation) => {\n    const mapper = convertFormValuesToObject(idpMapper);\n\n    const identityProviderMapper = {\n      ...mapper,\n      config: {\n        ...mapper.config,\n      },\n      identityProviderAlias: alias!,\n    };\n\n    if (id) {\n      try {\n        await adminClient.identityProviders.updateMapper(\n          {\n            id: id!,\n            alias: alias!,\n          },\n          { ...identityProviderMapper, name: currentMapper?.name! }\n        );\n        addAlert(t(\"mapperSaveSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(t(\"mapperSaveError\"), error);\n      }\n    } else {\n      try {\n        const createdMapper = await adminClient.identityProviders.createMapper({\n          identityProviderMapper,\n          alias: alias!,\n        });\n\n        addAlert(t(\"mapperCreateSuccess\"), AlertVariant.success);\n        navigate(\n          toIdentityProviderEditMapper({\n            realm,\n            alias,\n            providerId: providerId,\n            id: createdMapper.id,\n          })\n        );\n      } catch (error) {\n        addError(t(\"mapperCreateError\"), error);\n      }\n    }\n  };\n\n  const [toggleDeleteMapperDialog, DeleteMapperConfirm] = useConfirmDialog({\n    titleKey: \"identity-providers:deleteProviderMapper\",\n    messageKey: t(\"identity-providers:deleteMapperConfirm\", {\n      mapper: currentMapper?.name,\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.identityProviders.delMapper({\n          alias: alias,\n          id: id!,\n        });\n        addAlert(t(\"deleteMapperSuccess\"), AlertVariant.success);\n        navigate(\n          toIdentityProvider({ providerId, alias, tab: \"mappers\", realm })\n        );\n      } catch (error) {\n        addError(\"identity-providers:deleteErrorError\", error);\n      }\n    },\n  });\n\n  useFetch(\n    () =>\n      Promise.all([\n        id ? adminClient.identityProviders.findOneMapper({ alias, id }) : null,\n        adminClient.identityProviders.findMapperTypes({ alias }),\n      ]),\n    ([mapper, mapperTypes]) => {\n      const mappers = localeSort(Object.values(mapperTypes), mapByKey(\"name\"));\n      if (mapper) {\n        setCurrentMapper(\n          mappers.find(({ id }) => id === mapper.identityProviderMapper)\n        );\n        setupForm(mapper);\n      } else {\n        setCurrentMapper(mappers[0]);\n      }\n\n      setMapperTypes(mappers);\n    },\n    []\n  );\n\n  const setupForm = (mapper: IdentityProviderMapperRepresentation) => {\n    convertToFormValues(mapper, form.setValue);\n  };\n\n  if (!mapperTypes || !currentMapper) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      <DeleteMapperConfirm />\n      <ViewHeader\n        className=\"kc-add-mapper-title\"\n        titleKey={\n          id\n            ? t(\"editIdPMapper\", {\n                providerId:\n                  providerId[0].toUpperCase() + providerId.substring(1),\n              })\n            : t(\"addIdPMapper\", {\n                providerId:\n                  providerId[0].toUpperCase() + providerId.substring(1),\n              })\n        }\n        dropdownItems={\n          id\n            ? [\n                <DropdownItem key=\"delete\" onClick={toggleDeleteMapperDialog}>\n                  {t(\"common:delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n        divider\n      />\n      <FormAccess\n        role=\"manage-identity-providers\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n        className=\"pf-u-mt-lg\"\n      >\n        {id && (\n          <FormGroup\n            label={t(\"common:id\")}\n            fieldId=\"kc-name\"\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            helperTextInvalid={t(\"common:required\")}\n          >\n            <KeycloakTextInput\n              value={currentMapper.id}\n              id=\"kc-name\"\n              isDisabled={!!id}\n              validated={\n                errors.name ? ValidatedOptions.error : ValidatedOptions.default\n              }\n              {...register(\"name\")}\n            />\n          </FormGroup>\n        )}\n        {currentMapper.properties && (\n          <>\n            <AddMapperForm\n              form={form}\n              id={id}\n              mapperTypes={mapperTypes}\n              updateMapperType={setCurrentMapper}\n              mapperType={currentMapper}\n            />\n            <FormProvider {...form}>\n              <DynamicComponents properties={currentMapper.properties!} />\n            </FormProvider>\n          </>\n        )}\n\n        <ActionGroup>\n          <Button\n            data-testid=\"new-mapper-save-button\"\n            variant=\"primary\"\n            type=\"submit\"\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            data-testid=\"new-mapper-cancel-button\"\n            variant=\"link\"\n            component={(props) => (\n              <Link\n                {...props}\n                to={toIdentityProvider({\n                  realm,\n                  providerId,\n                  alias: alias!,\n                  tab: \"mappers\",\n                })}\n              />\n            )}\n          >\n            {t(\"common:cancel\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n}\n"],"names":["AddMapperForm","mapperTypes","mapperType","form","id","updateMapperType","t","useTranslation","control","register","errors","mapperTypeOpen","setMapperTypeOpen","useState","syncModes","syncModeOpen","setSyncModeOpen","jsxs","Fragment","jsx","FormGroup","HelpItem","ValidatedOptions","KeycloakTextInput","Controller","field","Select","_","value","SelectVariant","option","SelectOption","AddMapper","useForm","handleSubmit","addAlert","addError","useAlerts","navigate","useNavigate","localeSort","useLocaleSort","realm","useRealm","adminClient","useAdminClient","providerId","alias","useParams","setMapperTypes","currentMapper","setCurrentMapper","save","idpMapper","mapper","convertFormValuesToObject","identityProviderMapper","AlertVariant","error","createdMapper","toIdentityProviderEditMapper","toggleDeleteMapperDialog","DeleteMapperConfirm","useConfirmDialog","ButtonVariant","toIdentityProvider","useFetch","mappers","mapByKey","setupForm","convertToFormValues","KeycloakSpinner","PageSection","ViewHeader","DropdownItem","FormAccess","FormProvider","DynamicComponents","ActionGroup","Button","props","Link"],"mappings":"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"}