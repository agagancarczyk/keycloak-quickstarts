{"version":3,"file":"SessionsSection-5e792dcb.js","sources":["../../src/sessions/RevocationModal.tsx","../../src/sessions/SessionsSection.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  TextContent,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\n\nimport { emailRegexPattern } from \"../util\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\n\ntype RevocationModalProps = {\n  handleModalToggle: () => void;\n  save: () => void;\n};\n\nexport const RevocationModal = ({\n  handleModalToggle,\n  save,\n}: RevocationModalProps) => {\n  const { t } = useTranslation(\"sessions\");\n  const { addAlert } = useAlerts();\n\n  const { realm: realmName } = useRealm();\n  const { adminClient } = useAdminClient();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  const [key, setKey] = useState(0);\n\n  const refresh = () => {\n    setKey(new Date().getTime());\n  };\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    (realm) => {\n      setRealm(realm);\n    },\n    [key]\n  );\n\n  const parseResult = (result: GlobalRequestResult, prefixKey: string) => {\n    const successCount = result.successRequests?.length || 0;\n    const failedCount = result.failedRequests?.length || 0;\n\n    if (successCount === 0 && failedCount === 0) {\n      addAlert(t(\"clients:noAdminUrlSet\"), AlertVariant.warning);\n    } else if (failedCount > 0) {\n      addAlert(\n        t(\"clients:\" + prefixKey + \"Success\", {\n          successNodes: result.successRequests,\n        }),\n        AlertVariant.success\n      );\n      addAlert(\n        t(\"clients:\" + prefixKey + \"Fail\", {\n          failedNodes: result.failedRequests,\n        }),\n        AlertVariant.danger\n      );\n    } else {\n      addAlert(\n        t(\"clients:\" + prefixKey + \"Success\", {\n          successNodes: result.successRequests,\n        }),\n        AlertVariant.success\n      );\n    }\n  };\n\n  const setToNow = async () => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          realm: realmName,\n          notBefore: Date.now() / 1000,\n        }\n      );\n\n      addAlert(t(\"notBeforeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addAlert(t(\"setToNowError\", { error }), AlertVariant.danger);\n    }\n  };\n\n  const clearNotBefore = async () => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          realm: realmName,\n          notBefore: 0,\n        }\n      );\n      addAlert(t(\"notBeforeClearedSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addAlert(t(\"notBeforeError\", { error }), AlertVariant.danger);\n    }\n  };\n\n  const push = async () => {\n    const result = await adminClient.realms.pushRevocation({\n      realm: realmName,\n    });\n    parseResult(result, \"notBeforePush\");\n\n    refresh();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"revocation\")}\n      isOpen={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid=\"set-to-now-button\"\n          key=\"set-to-now\"\n          variant=\"tertiary\"\n          onClick={() => {\n            setToNow();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"setToNow\")}\n        </Button>,\n        <Button\n          data-testid=\"clear-not-before-button\"\n          key=\"clear\"\n          variant=\"tertiary\"\n          onClick={() => {\n            clearNotBefore();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"clear\")}\n        </Button>,\n        <Button\n          data-testid=\"modal-test-connection-button\"\n          key=\"push\"\n          variant=\"secondary\"\n          onClick={() => {\n            push();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"push\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent className=\"kc-revocation-description-text\">\n        {t(\"revocationDescription\")}\n      </TextContent>\n      <Form\n        id=\"revocation-modal-form\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          className=\"kc-revocation-modal-form-group\"\n          label={t(\"notBefore\")}\n          name=\"notBefore\"\n          fieldId=\"not-before\"\n          validated={\n            errors.email ? ValidatedOptions.error : ValidatedOptions.default\n          }\n        >\n          <KeycloakTextInput\n            data-testid=\"not-before-input\"\n            autoFocus\n            isReadOnly\n            value={\n              realm?.notBefore === 0\n                ? (t(\"none\") as string)\n                : new Date(realm?.notBefore! * 1000).toString()\n            }\n            type=\"text\"\n            id=\"not-before\"\n            {...register(\"notBefore\", {\n              required: true,\n              pattern: emailRegexPattern,\n            })}\n            validated={\n              errors.email ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import { ClientSessionStat } from \"@keycloak/keycloak-admin-client/lib/defs/clientSessionStat\";\nimport {\n  DropdownItem,\n  PageSection,\n  Select,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { RevocationModal } from \"./RevocationModal\";\nimport SessionsTable from \"./SessionsTable\";\n\nimport \"./SessionsSection.css\";\n\ntype FilterType = \"all\" | \"regular\" | \"offline\";\n\nexport default function SessionsSection() {\n  const { t } = useTranslation(\"sessions\");\n\n  const { adminClient } = useAdminClient();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const { addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [revocationModalOpen, setRevocationModalOpen] = useState(false);\n  const [filterDropdownOpen, setFilterDropdownOpen] = useState(false);\n  const [filterType, setFilterType] = useState<FilterType>(\"all\");\n  const [noSessions, setNoSessions] = useState(false);\n\n  const handleRevocationModalToggle = () => {\n    setRevocationModalOpen(!revocationModalOpen);\n  };\n\n  async function getClientSessions(clientSessionStats: ClientSessionStat[]) {\n    const sessions = await Promise.all(\n      clientSessionStats.map((client) =>\n        adminClient.clients.listSessions({ id: client.id })\n      )\n    );\n\n    return sessions.flat();\n  }\n\n  async function getOfflineSessions(clientSessionStats: ClientSessionStat[]) {\n    const sessions = await Promise.all(\n      clientSessionStats.map((client) =>\n        adminClient.clients.listOfflineSessions({ id: client.id })\n      )\n    );\n\n    return sessions.flat();\n  }\n\n  const loader = async () => {\n    const clientSessionStats = await adminClient.realms.getClientSessionStats({\n      realm,\n    });\n\n    const [clientSessions, offlineSessions] = await Promise.all([\n      filterType !== \"offline\" ? getClientSessions(clientSessionStats) : [],\n      filterType !== \"regular\" ? getOfflineSessions(clientSessionStats) : [],\n    ]);\n\n    setNoSessions(clientSessions.length === 0 && offlineSessions.length === 0);\n\n    return [\n      ...clientSessions.map((s) => ({\n        type: t(\"sessionsType.regularSSO\"),\n        ...s,\n      })),\n      ...offlineSessions.map((s) => ({\n        type: t(\"sessionsType.offline\"),\n        ...s,\n      })),\n    ];\n  };\n\n  const [toggleLogoutDialog, LogoutConfirm] = useConfirmDialog({\n    titleKey: \"sessions:logoutAllSessions\",\n    messageKey: \"sessions:logoutAllDescription\",\n    continueButtonLabel: \"common:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.logoutAll({ realm });\n        refresh();\n      } catch (error) {\n        addError(\"sessions:logoutAllSessionsError\", error);\n      }\n    },\n  });\n\n  const dropdownItems = [\n    <DropdownItem\n      key=\"toggle-modal\"\n      data-testid=\"revocation\"\n      component=\"button\"\n      onClick={() => handleRevocationModalToggle()}\n    >\n      {t(\"revocation\")}\n    </DropdownItem>,\n    <DropdownItem\n      key=\"delete-role\"\n      data-testid=\"logout-all\"\n      component=\"button\"\n      isDisabled={noSessions}\n      onClick={toggleLogoutDialog}\n    >\n      {t(\"signOutAllActiveSessions\")}\n    </DropdownItem>,\n  ];\n\n  return (\n    <>\n      <LogoutConfirm />\n      <ViewHeader\n        dropdownItems={dropdownItems}\n        titleKey=\"sessions:title\"\n        subKey=\"sessions:sessionExplain\"\n        helpUrl={helpUrls.sessionsUrl}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        {revocationModalOpen && (\n          <RevocationModal\n            handleModalToggle={handleRevocationModalToggle}\n            save={() => {\n              handleRevocationModalToggle();\n            }}\n          />\n        )}\n        <SessionsTable\n          key={key}\n          loader={loader}\n          filter={\n            <Select\n              data-testid=\"filter-session-type-select\"\n              isOpen={filterDropdownOpen}\n              onToggle={(value) => setFilterDropdownOpen(value)}\n              toggleIcon={<FilterIcon />}\n              onSelect={(_, value) => {\n                setFilterType(value as FilterType);\n                refresh();\n                setFilterDropdownOpen(false);\n              }}\n              selections={filterType}\n            >\n              <SelectOption data-testid=\"all-sessions-option\" value=\"all\">\n                {t(\"sessionsType.allSessions\")}\n              </SelectOption>\n              <SelectOption data-testid=\"regular-sso-option\" value=\"regular\">\n                {t(\"sessionsType.regularSSO\")}\n              </SelectOption>\n              <SelectOption data-testid=\"offline-option\" value=\"offline\">\n                {t(\"sessionsType.offline\")}\n              </SelectOption>\n            </Select>\n          }\n        />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["RevocationModal","handleModalToggle","save","t","useTranslation","addAlert","useAlerts","realmName","useRealm","adminClient","useAdminClient","register","handleSubmit","errors","useForm","realm","setRealm","useState","key","setKey","refresh","useFetch","parseResult","result","prefixKey","successCount","failedCount","AlertVariant","setToNow","error","clearNotBefore","push","jsxs","Modal","ModalVariant","jsx","Button","ButtonVariant","TextContent","Form","FormGroup","ValidatedOptions","KeycloakTextInput","emailRegexPattern","SessionsSection","addError","revocationModalOpen","setRevocationModalOpen","filterDropdownOpen","setFilterDropdownOpen","filterType","setFilterType","noSessions","setNoSessions","handleRevocationModalToggle","getClientSessions","clientSessionStats","client","getOfflineSessions","loader","clientSessions","offlineSessions","s","toggleLogoutDialog","LogoutConfirm","useConfirmDialog","dropdownItems","DropdownItem","Fragment","ViewHeader","helpUrls","PageSection","SessionsTable","Select","value","FilterIcon","_","SelectOption"],"mappings":"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"}