{"version":3,"file":"GroupPickerDialog-caf8c38d.js","sources":["../../../../node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListAction.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCheck.js","../../src/components/group/GroupPath.tsx","../../src/components/group/GroupPickerDialog.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { formatBreakpointMods } from '../../helpers/util';\nexport const DataListAction = (_a) => {\n    var { children, className, visibility, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    id, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, isPlainButtonAction } = _a, \n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, [\"children\", \"className\", \"visibility\", \"id\", 'aria-label', 'aria-labelledby', \"isPlainButtonAction\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.dataListItemAction, formatBreakpointMods(visibility, styles), className) }, props), isPlainButtonAction ? React.createElement(\"div\", { className: css(styles.dataListAction) }, children) : children));\n};\nDataListAction.displayName = 'DataListAction';\n//# sourceMappingURL=DataListAction.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nexport const DataListCheck = (_a) => {\n    var { className = '', \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onChange = (checked, event) => { }, isValid = true, isDisabled = false, isChecked = false, checked = false, defaultChecked, otherControls = false } = _a, props = __rest(_a, [\"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"checked\", \"defaultChecked\", \"otherControls\"]);\n    const check = (React.createElement(\"div\", { className: css(styles.dataListCheck) },\n        React.createElement(\"input\", Object.assign({}, props, { type: \"checkbox\", onChange: event => onChange(event.currentTarget.checked, event), \"aria-invalid\": !isValid, disabled: isDisabled }, ([true, false].includes(defaultChecked) && { defaultChecked }), (![true, false].includes(defaultChecked) && { checked: isChecked || checked })))));\n    return (React.createElement(React.Fragment, null,\n        !otherControls && React.createElement(\"div\", { className: css(styles.dataListItemControl, className) }, check),\n        otherControls && check));\n};\nDataListCheck.displayName = 'DataListCheck';\n//# sourceMappingURL=DataListCheck.js.map","import { useState } from \"react\";\nimport { Tooltip } from \"@patternfly/react-core\";\nimport type { TableTextProps } from \"@patternfly/react-table\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\n\ntype GroupPathProps = TableTextProps & {\n  group: GroupRepresentation;\n};\n\nexport const GroupPath = ({\n  group: { path },\n  onMouseEnter: onMouseEnterProp,\n  ...props\n}: GroupPathProps) => {\n  const [tooltip, setTooltip] = useState(\"\");\n  const onMouseEnter = (event: any) => {\n    setTooltip(path!);\n    onMouseEnterProp?.(event);\n  };\n  const text = (\n    <span onMouseEnter={onMouseEnter} {...props}>\n      {path}\n    </span>\n  );\n\n  return tooltip !== \"\" ? (\n    <Tooltip content={tooltip} isVisible>\n      {text}\n    </Tooltip>\n  ) : (\n    text\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  DataList,\n  DataListAction,\n  DataListCell,\n  DataListCheck,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { AngleRightIcon } from \"@patternfly/react-icons\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\nimport { PaginatingTableToolbar } from \"../table-toolbar/PaginatingTableToolbar\";\nimport { GroupPath } from \"./GroupPath\";\n\nimport \"./group-picker-dialog.css\";\n\nexport type GroupPickerDialogProps = {\n  id?: string;\n  type: \"selectOne\" | \"selectMany\";\n  filterGroups?: GroupRepresentation[];\n  text: { title: string; ok: string };\n  canBrowse?: boolean;\n  onConfirm: (groups: GroupRepresentation[] | undefined) => void;\n  onClose: () => void;\n};\n\ntype SelectableGroup = GroupRepresentation & {\n  checked?: boolean;\n};\n\nexport const GroupPickerDialog = ({\n  id,\n  type,\n  filterGroups,\n  text,\n  canBrowse = true,\n  onClose,\n  onConfirm,\n}: GroupPickerDialogProps) => {\n  const { t } = useTranslation();\n  const { adminClient } = useAdminClient();\n  const [selectedRows, setSelectedRows] = useState<SelectableGroup[]>([]);\n\n  const [navigation, setNavigation] = useState<SelectableGroup[]>([]);\n  const [groups, setGroups] = useState<SelectableGroup[]>([]);\n  const [filter, setFilter] = useState(\"\");\n  const [joinedGroups, setJoinedGroups] = useState<GroupRepresentation[]>([]);\n  const [groupId, setGroupId] = useState<string>();\n  const [isSearching, setIsSearching] = useState(false);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n\n  const currentGroup = () => navigation[navigation.length - 1];\n\n  useFetch(\n    async () => {\n      let group;\n      let groups;\n      let existingUserGroups;\n      if (!groupId) {\n        groups = await adminClient.groups.find({\n          first,\n          max: max + 1,\n          search: isSearching ? filter : \"\",\n        });\n      } else {\n        group = await adminClient.groups.findOne({ id: groupId });\n        if (!group) {\n          throw new Error(t(\"common:notFound\"));\n        }\n        groups = group.subGroups!;\n      }\n\n      if (id) {\n        existingUserGroups = await adminClient.users.listGroups({\n          id,\n        });\n      }\n\n      return { group, groups, existingUserGroups };\n    },\n    async ({ group: selectedGroup, groups, existingUserGroups }) => {\n      setJoinedGroups(existingUserGroups || []);\n      if (selectedGroup) {\n        setNavigation([...navigation, selectedGroup]);\n      }\n\n      groups.forEach((group: SelectableGroup) => {\n        group.checked = !!selectedRows.find((r) => r.id === group.id);\n      });\n      setGroups(groups);\n    },\n    [groupId, filter, first, max]\n  );\n\n  const isRowDisabled = (row?: GroupRepresentation) => {\n    return [\n      ...joinedGroups.map((item) => item.id),\n      ...(filterGroups || []).map((group) => group.id),\n    ].some((group) => group === row?.id);\n  };\n\n  const hasSubgroups = (group: GroupRepresentation) =>\n    group.subGroups?.length !== 0;\n\n  const expandGroup = (\n    group: GroupRepresentation,\n    name: string\n  ): GroupRepresentation => {\n    if (group.name?.includes(name)) {\n      return group;\n    }\n    if (group.subGroups) {\n      for (const g of group.subGroups) {\n        const found = expandGroup(g, name);\n        return found;\n      }\n    }\n    return group;\n  };\n\n  return (\n    <Modal\n      variant={isSearching ? ModalVariant.medium : ModalVariant.small}\n      title={t(text.title, {\n        group1: filterGroups?.[0]?.name,\n        group2: navigation.length ? currentGroup().name : t(\"root\"),\n      })}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid={`${text.ok}-button`}\n          key=\"confirm\"\n          variant=\"primary\"\n          form=\"group-form\"\n          onClick={() => {\n            onConfirm(\n              type === \"selectMany\"\n                ? selectedRows\n                : navigation.length\n                ? [currentGroup()]\n                : undefined\n            );\n          }}\n          isDisabled={type === \"selectMany\" && selectedRows.length === 0}\n        >\n          {t(text.ok)}\n        </Button>,\n      ]}\n    >\n      <PaginatingTableToolbar\n        count={groups.length}\n        first={first}\n        max={max}\n        onNextClick={setFirst}\n        onPreviousClick={setFirst}\n        onPerPageSelect={(first, max) => {\n          setFirst(first);\n          setMax(max);\n        }}\n        inputGroupName={\"common:search\"}\n        inputGroupOnEnter={(search) => {\n          setFilter(search);\n          setIsSearching(search !== \"\");\n          setFirst(0);\n          setMax(10);\n          setNavigation([]);\n          setGroupId(undefined);\n        }}\n        inputGroupPlaceholder={t(\"users:searchForGroups\")}\n      >\n        <Breadcrumb>\n          {navigation.length > 0 && (\n            <BreadcrumbItem key=\"home\">\n              <Button\n                variant=\"link\"\n                onClick={() => {\n                  setGroupId(undefined);\n                  setNavigation([]);\n                }}\n              >\n                {t(\"groups\")}\n              </Button>\n            </BreadcrumbItem>\n          )}\n          {navigation.map((group, i) => (\n            <BreadcrumbItem key={i}>\n              {navigation.length - 1 !== i && (\n                <Button\n                  variant=\"link\"\n                  onClick={() => {\n                    setGroupId(group.id);\n                    setNavigation([...navigation].slice(0, i));\n                  }}\n                >\n                  {group.name}\n                </Button>\n              )}\n              {navigation.length - 1 === i && group.name}\n            </BreadcrumbItem>\n          ))}\n        </Breadcrumb>\n        <DataList aria-label={t(\"groups\")} isCompact>\n          {groups.slice(0, max).map((group: SelectableGroup) => (\n            <DataListItem\n              className={`join-group-dialog-row-${\n                isRowDisabled(group) ? \"disabled\" : \"\"\n              }`}\n              aria-labelledby={group.name}\n              key={group.id}\n              id={group.id}\n              onClick={(e) => {\n                const g = isSearching ? expandGroup(group, filter) : group;\n                if (isRowDisabled(g)) return;\n                if (type === \"selectOne\") {\n                  setGroupId(g.id);\n                } else if (\n                  hasSubgroups(group) &&\n                  (e.target as HTMLInputElement).type !== \"checkbox\"\n                ) {\n                  setGroupId(\n                    isSearching ? expandGroup(group, filter).id : group.id\n                  );\n                  setIsSearching(false);\n                }\n              }}\n            >\n              <DataListItemRow\n                className={`join-group-dialog-row-${\n                  isRowDisabled(group) ? \"m-disabled\" : \"\"\n                }`}\n                data-testid={group.name}\n              >\n                {type === \"selectMany\" && (\n                  <DataListCheck\n                    className=\"kc-join-group-modal-check\"\n                    data-testid={`${group.name}-check`}\n                    aria-label={group.name}\n                    checked={group.checked}\n                    isDisabled={isRowDisabled(group)}\n                    onChange={(checked) => {\n                      group.checked = checked;\n                      let newSelectedRows: SelectableGroup[] = [];\n                      if (!group.checked) {\n                        newSelectedRows = selectedRows.filter(\n                          (r) => r.id !== group.id\n                        );\n                      } else {\n                        newSelectedRows = [\n                          ...selectedRows,\n                          isSearching ? expandGroup(group, filter) : group,\n                        ];\n                      }\n\n                      setSelectedRows(newSelectedRows);\n                    }}\n                    aria-labelledby={`select-${group.name}`}\n                  />\n                )}\n\n                <DataListItemCells\n                  dataListCells={[\n                    <DataListCell\n                      key={`name-${group.id}`}\n                      className=\"keycloak-groups-group-path\"\n                    >\n                      {isSearching ? (\n                        <GroupPath\n                          id={`select-${group.name}`}\n                          group={expandGroup(group, filter)}\n                        />\n                      ) : (\n                        <span id={`select-${group.name}`}>{group.name}</span>\n                      )}\n                    </DataListCell>,\n                  ]}\n                />\n                <DataListAction\n                  id=\"actions\"\n                  aria-labelledby={`select-${group.name}`}\n                  aria-label={t(\"groupName\")}\n                  isPlainButtonAction\n                >\n                  {((hasSubgroups(group) && canBrowse) ||\n                    type === \"selectOne\") && (\n                    <Button\n                      isDisabled\n                      variant=\"link\"\n                      aria-label={t(\"common:select\")}\n                    >\n                      <AngleRightIcon />\n                    </Button>\n                  )}\n                </DataListAction>\n              </DataListItemRow>\n            </DataListItem>\n          ))}\n        </DataList>\n        {groups.length === 0 && !isSearching && (\n          <ListEmptyState\n            hasIcon={false}\n            message={t(\"groups:moveGroupEmpty\")}\n            instructions={t(\"groups:moveGroupEmptyInstructions\")}\n          />\n        )}\n        {groups.length === 0 && isSearching && (\n          <ListEmptyState\n            message={t(\"common:noSearchResults\")}\n            instructions={t(\"common:noSearchResultsInstructions\")}\n          />\n        )}\n      </PaginatingTableToolbar>\n    </Modal>\n  );\n};\n"],"names":["DataListAction","_a","children","className","visibility","id","ariaLabel","ariaLabelledBy","isPlainButtonAction","props","__rest","React.createElement","css","styles","formatBreakpointMods","DataListCheck","onChange","checked","event","isValid","isDisabled","isChecked","defaultChecked","otherControls","check","React.Fragment","GroupPath","path","onMouseEnterProp","tooltip","setTooltip","useState","onMouseEnter","text","jsx","Tooltip","GroupPickerDialog","type","filterGroups","canBrowse","onClose","onConfirm","useTranslation","adminClient","useAdminClient","selectedRows","setSelectedRows","navigation","setNavigation","groups","setGroups","filter","setFilter","joinedGroups","setJoinedGroups","groupId","setGroupId","isSearching","setIsSearching","max","setMax","first","setFirst","currentGroup","useFetch","group","existingUserGroups","selectedGroup","r","isRowDisabled","row","item","hasSubgroups","expandGroup","name","g","Modal","ModalVariant","Button","jsxs","PaginatingTableToolbar","search","Breadcrumb","BreadcrumbItem","i","DataList","DataListItem","e","DataListItemRow","newSelectedRows","DataListItemCells","DataListCell","AngleRightIcon","ListEmptyState"],"mappings":"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","x_google_ignoreList":[0,1]}