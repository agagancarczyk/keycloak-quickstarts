{"version":3,"file":"ClientDetails-ace2097d.js","sources":["../../../../node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs","../../../../node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js","../../src/components/download-dialog/DownloadDialog.tsx","../../src/clients/advanced/TokenLifespan.tsx","../../src/clients/advanced/AdvancedSettings.tsx","../../src/clients/advanced/AuthenticationOverrides.tsx","../../src/clients/advanced/AddHostDialog.tsx","../../src/clients/advanced/ClusteringPanel.tsx","../../src/clients/advanced/ApplicationUrls.tsx","../../src/clients/advanced/FineGrainOpenIdConnect.tsx","../../src/clients/advanced/FineGrainSamlEndpointConfig.tsx","../../src/clients/advanced/OpenIdConnectCompatibilityModes.tsx","../../src/clients/advanced/RevocationPanel.tsx","../../src/clients/AdvancedTab.tsx","../../src/clients/authorization/AuthorizationEvaluateResourcePolicies.tsx","../../src/clients/authorization/AuthorizationEvaluateResource.tsx","../../src/clients/authorization/AuthorizationDataModal.tsx","../../src/clients/authorization/evaluate/Results.tsx","../../src/clients/authorization/KeyBasedAttributeInput.tsx","../../src/clients/authorization/AuthorizationEvaluate.tsx","../../src/clients/authorization/AuthorizationExport.tsx","../../src/clients/authorization/SearchDropdown.tsx","../../src/clients/authorization/MoreLabel.tsx","../../src/clients/authorization/DetailDescription.tsx","../../src/clients/authorization/EmptyPermissionsState.tsx","../../src/clients/authorization/Permissions.tsx","../../src/clients/authorization/NewPolicyDialog.tsx","../../src/clients/authorization/Policies.tsx","../../src/clients/authorization/DetailCell.tsx","../../src/clients/authorization/Resources.tsx","../../src/clients/authorization/Scopes.tsx","../../src/clients/advanced/SaveReset.tsx","../../src/clients/authorization/ImportDialog.tsx","../../src/clients/authorization/Settings.tsx","../../src/clients/ClientSessions.tsx","../../src/clients/add/SamlConfig.tsx","../../src/clients/add/SamlSignature.tsx","../../src/clients/add/AccessSettings.tsx","../../src/clients/add/LoginSettingsPanel.tsx","../../src/clients/add/LogoutPanel.tsx","../../src/clients/ClientSettings.tsx","../../src/clients/scopes/CopyToClipboardButton.tsx","../../src/clients/credentials/ClientSecret.tsx","../../src/clients/credentials/SignedJWT.tsx","../../src/clients/credentials/X509.tsx","../../src/clients/credentials/Credentials.tsx","../../src/clients/keys/Certificate.tsx","../../src/clients/keys/StoreSettings.tsx","../../src/clients/keys/GenerateKeyDialog.tsx","../../src/clients/keys/ImportKeyDialog.tsx","../../src/clients/keys/Keys.tsx","../../src/clients/keys/ExportSamlKeyDialog.tsx","../../src/clients/keys/SamlKeysDialog.tsx","../../src/clients/keys/SamlImportKeyDialog.tsx","../../src/clients/keys/SamlKeys.tsx","../../src/clients/scopes/ClientScopes.tsx","../../src/clients/scopes/GeneratedCodeTab.tsx","../../src/clients/scopes/EvaluateScopes.tsx","../../src/clients/service-account/ServiceAccount.tsx","../../src/clients/ClientDetails.tsx"],"sourcesContent":["import './code-block.css';\nexport default {\n  \"codeBlock\": \"pf-c-code-block\",\n  \"codeBlockActions\": \"pf-c-code-block__actions\",\n  \"codeBlockCode\": \"pf-c-code-block__code\",\n  \"codeBlockContent\": \"pf-c-code-block__content\",\n  \"codeBlockHeader\": \"pf-c-code-block__header\",\n  \"codeBlockPre\": \"pf-c-code-block__pre\"\n};","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/CodeBlock/code-block';\nimport { css } from '@patternfly/react-styles';\nexport const CodeBlock = (_a) => {\n    var { children = null, className, actions = null } = _a, props = __rest(_a, [\"children\", \"className\", \"actions\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.codeBlock, className) }, props),\n        React.createElement(\"div\", { className: css(styles.codeBlockHeader) },\n            React.createElement(\"div\", { className: css(styles.codeBlockActions) }, actions && actions)),\n        React.createElement(\"div\", { className: css(styles.codeBlockContent) }, children)));\n};\nCodeBlock.displayName = 'CodeBlock';\n//# sourceMappingURL=CodeBlock.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport const CodeBlockAction = (_a) => {\n    var { children = null, className } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css('pf-c-code-block__actions-item', className) }, props), children));\n};\nCodeBlockAction.displayName = 'CodeBlockAction';\n//# sourceMappingURL=CodeBlockAction.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Content/content';\nimport { css } from '@patternfly/react-styles';\nexport var TextListVariants;\n(function (TextListVariants) {\n    TextListVariants[\"ul\"] = \"ul\";\n    TextListVariants[\"ol\"] = \"ol\";\n    TextListVariants[\"dl\"] = \"dl\";\n})(TextListVariants || (TextListVariants = {}));\nexport const TextList = (_a) => {\n    var { children = null, className = '', component = TextListVariants.ul, isPlain = false } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isPlain\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(isPlain && styles.modifiers.plain, className) }), children));\n};\nTextList.displayName = 'TextList';\n//# sourceMappingURL=TextList.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListItemVariants;\n(function (TextListItemVariants) {\n    TextListItemVariants[\"li\"] = \"li\";\n    TextListItemVariants[\"dt\"] = \"dt\";\n    TextListItemVariants[\"dd\"] = \"dd\";\n})(TextListItemVariants || (TextListItemVariants = {}));\nexport const TextListItem = (_a) => {\n    var { children = null, className = '', component = TextListItemVariants.li } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(className) }), children));\n};\nTextListItem.displayName = 'TextListItem';\n//# sourceMappingURL=TextListItem.js.map","import {\n  Form,\n  FormGroup,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { addTrailingSlash, prettyPrintJSON } from \"../../util\";\nimport { getAuthorizationHeaders } from \"../../utils/getAuthorizationHeaders\";\nimport { ConfirmDialogModal } from \"../confirm-dialog/ConfirmDialog\";\nimport { useHelp, HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../keycloak-text-area/KeycloakTextArea\";\n\ntype DownloadDialogProps = {\n  id: string;\n  protocol?: string;\n  open: boolean;\n  toggleDialog: () => void;\n};\n\nexport const DownloadDialog = ({\n  id,\n  open,\n  toggleDialog,\n  protocol = \"openid-connect\",\n}: DownloadDialogProps) => {\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { t } = useTranslation(\"common\");\n  const { enabled } = useHelp();\n  const serverInfo = useServerInfo();\n\n  const configFormats = serverInfo.clientInstallations![protocol];\n  const [selected, setSelected] = useState(\n    configFormats[configFormats.length - 1].id\n  );\n  const [snippet, setSnippet] = useState<string | ArrayBuffer>();\n  const [openType, setOpenType] = useState(false);\n\n  const selectedConfig = useMemo(\n    () => configFormats.find((config) => config.id === selected) ?? null,\n    [selected]\n  );\n\n  const sanitizeSnippet = (snippet: string) =>\n    snippet.replace(\n      /<PrivateKeyPem>.*<\\/PrivateKeyPem>/gs,\n      `<PrivateKeyPem>${t(\"clients:privateKeyMask\")}</PrivateKeyPem>`\n    );\n\n  useFetch(\n    async () => {\n      if (selectedConfig?.mediaType === \"application/zip\") {\n        const response = await fetch(\n          `${addTrailingSlash(\n            adminClient.baseUrl\n          )}admin/realms/${realm}/clients/${id}/installation/providers/${selected}`,\n          {\n            method: \"GET\",\n            headers: getAuthorizationHeaders(\n              await adminClient.getAccessToken()\n            ),\n          }\n        );\n\n        return response.arrayBuffer();\n      } else {\n        const snippet = await adminClient.clients.getInstallationProviders({\n          id,\n          providerId: selected,\n        });\n        if (typeof snippet === \"string\") {\n          return sanitizeSnippet(snippet);\n        } else {\n          return prettyPrintJSON(snippet);\n        }\n      }\n    },\n    (snippet) => setSnippet(snippet),\n    [id, selected]\n  );\n\n  // Clear snippet when selected config changes, this prevents old snippets from being displayed during fetch.\n  useEffect(() => setSnippet(\"\"), [id, selected]);\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"clients:downloadAdaptorTitle\")}\n      continueButtonLabel={t(\"download\")}\n      onConfirm={() => {\n        saveAs(\n          new Blob([snippet!], { type: selectedConfig?.mediaType }),\n          selectedConfig?.filename\n        );\n      }}\n      open={open}\n      toggleDialog={toggleDialog}\n      variant={ModalVariant.medium}\n    >\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <FormGroup\n              fieldId=\"type\"\n              label={t(\"clients:formatOption\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:downloadType\")}\n                  fieldLabelId=\"clients:formatOption\"\n                />\n              }\n            >\n              <Select\n                toggleId=\"type\"\n                isOpen={openType}\n                onToggle={(isExpanded) => setOpenType(isExpanded)}\n                variant={SelectVariant.single}\n                value={selected}\n                selections={selected}\n                onSelect={(_, value) => {\n                  setSelected(value.toString());\n                  setOpenType(false);\n                }}\n                aria-label=\"Select Input\"\n                menuAppendTo={() => document.body}\n              >\n                {configFormats.map((configFormat) => (\n                  <SelectOption\n                    key={configFormat.id}\n                    value={configFormat.id}\n                    isSelected={selected === configFormat.id}\n                    description={enabled ? configFormat.helpText : undefined}\n                  >\n                    {configFormat.displayType}\n                  </SelectOption>\n                ))}\n              </Select>\n            </FormGroup>\n          </StackItem>\n          {!selectedConfig?.downloadOnly && (\n            <StackItem isFilled>\n              <FormGroup\n                fieldId=\"details\"\n                label={t(\"details\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"clients-help:details\")}\n                    fieldLabelId=\"clients:details\"\n                  />\n                }\n              >\n                <KeycloakTextArea\n                  id=\"details\"\n                  readOnly\n                  rows={12}\n                  resizeOrientation=\"vertical\"\n                  value={snippet && typeof snippet === \"string\" ? snippet : \"\"}\n                  aria-label=\"text area example\"\n                />\n              </FormGroup>\n            </StackItem>\n          )}\n        </Stack>\n      </Form>\n    </ConfirmDialogModal>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport {\n  TimeSelector,\n  Unit,\n} from \"../../components/time-selector/TimeSelector\";\n\ntype TokenLifespanProps = {\n  id: string;\n  name: string;\n  defaultValue?: number;\n  units?: Unit[];\n};\n\nconst inherited = \"tokenLifespan.inherited\";\nconst never = \"tokenLifespan.never\";\nconst expires = \"tokenLifespan.expires\";\n\nexport const TokenLifespan = ({\n  id,\n  name,\n  defaultValue,\n  units,\n}: TokenLifespanProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [open, setOpen] = useState(false);\n\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n\n  const { control } = useFormContext();\n  const isExpireSet = (value: string | number) =>\n    (typeof value === \"number\" && value !== -1) ||\n    (typeof value === \"string\" && value !== \"\" && value !== \"-1\") ||\n    focused;\n\n  return (\n    <FormGroup\n      label={t(id)}\n      fieldId={id}\n      labelIcon={\n        <HelpItem\n          helpText={t(`clients-help:${id}`)}\n          fieldLabelId={`clients:${id}`}\n        />\n      }\n    >\n      <Controller\n        name={name}\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <Split hasGutter>\n            <SplitItem>\n              <Select\n                variant={SelectVariant.single}\n                onToggle={setOpen}\n                isOpen={open}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  setOpen(false);\n                }}\n                selections={[\n                  isExpireSet(field.value)\n                    ? t(expires)\n                    : field.value === \"\"\n                    ? t(inherited)\n                    : t(never),\n                ]}\n              >\n                <SelectOption value=\"\">{t(inherited)}</SelectOption>\n                <SelectOption value={-1}>{t(never)}</SelectOption>\n                <SelectOption value={60}>{t(expires)}</SelectOption>\n              </Select>\n            </SplitItem>\n            <SplitItem>\n              {field.value !== \"-1\" && field.value !== -1 && (\n                <TimeSelector\n                  units={units}\n                  value={field.value === \"\" ? defaultValue : field.value}\n                  onChange={field.onChange}\n                  onFocus={onFocus}\n                  onBlur={onBlur}\n                  min={1}\n                  isDisabled={field.value === \"\"}\n                />\n              )}\n            </SplitItem>\n          </Split>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeyValueInput } from \"../../components/key-value-form/KeyValueInput\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { TokenLifespan } from \"./TokenLifespan\";\n\ntype AdvancedSettingsProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AdvancedSettings = ({\n  save,\n  reset,\n  protocol,\n  hasConfigureAccess,\n}: AdvancedSettingsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [open, setOpen] = useState(false);\n\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const { realm: realmName } = useRealm();\n  const { adminClient } = useAdminClient();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    setRealm,\n    []\n  );\n\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-realm\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      {protocol !== \"openid-connect\" && (\n        <FormGroup\n          label={t(\"assertionLifespan\")}\n          fieldId=\"assertionLifespan\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:assertionLifespan\")}\n              fieldLabelId=\"clients:assertionLifespan\"\n            />\n          }\n        >\n          <Controller\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.assertion.lifespan\"\n            )}\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <TimeSelector\n                units={[\"minute\", \"day\", \"hour\"]}\n                value={field.value}\n                onChange={field.onChange}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <TokenLifespan\n            id=\"accessTokenLifespan\"\n            name={convertAttributeNameToForm(\n              \"attributes.access.token.lifespan\"\n            )}\n            defaultValue={realm?.accessTokenLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.idle.timeout\"\n            )}\n            defaultValue={realm?.clientSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientSessionMax\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.max.lifespan\"\n            )}\n            defaultValue={realm?.clientSessionMaxLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientOfflineSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.offline.session.idle.timeout\"\n            )}\n            defaultValue={realm?.offlineSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientOfflineSessionMax\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.offline.session.max.lifespan\"\n            )}\n            defaultValue={realm?.offlineSessionMaxLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <FormGroup\n            label={t(\"oAuthMutual\")}\n            fieldId=\"oAuthMutual\"\n            hasNoPaddingTop\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:oAuthMutual\")}\n                fieldLabelId=\"clients:oAuthMutual\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.tls.client.certificate.bound.access.tokens\"\n              )}\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"oAuthMutual-switch\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(\"\" + value)}\n                  aria-label={t(\"oAuthMutual\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"keyForCodeExchange\")}\n            fieldId=\"keyForCodeExchange\"\n            hasNoPaddingTop\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:keyForCodeExchange\")}\n                fieldLabelId=\"clients:keyForCodeExchange\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.pkce.code.challenge.method\"\n              )}\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"keyForCodeExchange\"\n                  variant={SelectVariant.single}\n                  onToggle={setOpen}\n                  isOpen={open}\n                  onSelect={(_, value) => {\n                    field.onChange(value);\n                    setOpen(false);\n                  }}\n                  selections={[field.value || t(\"common:choose\")]}\n                >\n                  {[\"\", \"S256\", \"plain\"].map((v) => (\n                    <SelectOption key={v} value={v}>\n                      {v || t(\"common:choose\")}\n                    </SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"pushedAuthorizationRequestRequired\")}\n            fieldId=\"pushedAuthorizationRequestRequired\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:pushedAuthorizationRequestRequired\")}\n                fieldLabelId=\"clients:pushedAuthorizationRequestRequired\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.require.pushed.authorization.requests\"\n              )}\n              defaultValue=\"false\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"pushedAuthorizationRequestRequired\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"pushedAuthorizationRequestRequired\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"acrToLoAMapping\")}\n            fieldId=\"acrToLoAMapping\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:acrToLoAMapping\")}\n                fieldLabelId=\"clients:acrToLoAMapping\"\n              />\n            }\n          >\n            <KeyValueInput\n              name={convertAttributeNameToForm(\"attributes.acr.loa.map\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultACRValues\")}\n            fieldId=\"defaultACRValues\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:defaultACRValues\")}\n                fieldLabelId=\"clients:defaultACRValues\"\n              />\n            }\n          >\n            <MultiLineInput\n              id=\"defaultACRValues\"\n              aria-label=\"defaultACRValues\"\n              name={convertAttributeNameToForm(\"attributes.default.acr.values\")}\n              stringify\n            />\n          </FormGroup>\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAdvancedSave\"\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"OIDCAdvancedRevert\">\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\n\ntype AuthenticationOverridesProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AuthenticationOverrides = ({\n  protocol,\n  save,\n  reset,\n  hasConfigureAccess,\n}: AuthenticationOverridesProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation(\"clients\");\n  const [flows, setFlows] = useState<JSX.Element[]>([]);\n  const [browserFlowOpen, setBrowserFlowOpen] = useState(false);\n  const [directGrantOpen, setDirectGrantOpen] = useState(false);\n\n  const { control } = useFormContext();\n\n  useFetch(\n    () => adminClient.authenticationManagement.getFlows(),\n    (flows) => {\n      let filteredFlows = [\n        ...flows.filter((flow) => flow.providerId !== \"client-flow\"),\n      ];\n      filteredFlows = sortBy(filteredFlows, [(f) => f.alias]);\n      setFlows([\n        <SelectOption key=\"empty\" value=\"\">\n          {t(\"common:choose\")}\n        </SelectOption>,\n        ...filteredFlows.map((flow) => (\n          <SelectOption key={flow.id} value={flow.id}>\n            {flow.alias}\n          </SelectOption>\n        )),\n      ]);\n    },\n    []\n  );\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"browserFlow\")}\n        fieldId=\"browserFlow\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:browserFlow\")}\n            fieldLabelId=\"clients:browserFlow\"\n          />\n        }\n      >\n        <Controller\n          name=\"authenticationFlowBindingOverrides.browser\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"browserFlow\"\n              variant={SelectVariant.single}\n              onToggle={setBrowserFlowOpen}\n              isOpen={browserFlowOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setBrowserFlowOpen(false);\n              }}\n              selections={[field.value]}\n            >\n              {flows}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {protocol === \"openid-connect\" && (\n        <FormGroup\n          label={t(\"directGrant\")}\n          fieldId=\"directGrant\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:directGrant\")}\n              fieldLabelId=\"clients:directGrant\"\n            />\n          }\n        >\n          <Controller\n            name=\"authenticationFlowBindingOverrides.direct_grant\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"directGrant\"\n                variant={SelectVariant.single}\n                onToggle={setDirectGrantOpen}\n                isOpen={directGrantOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  setDirectGrantOpen(false);\n                }}\n                selections={[field.value]}\n              >\n                {flows}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAuthFlowOverrideSave\"\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCAuthFlowOverrideRevert\"\n        >\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\n\ntype FormFields = {\n  node: string;\n};\n\ntype AddHostDialogProps = {\n  clientId: string;\n  isOpen: boolean;\n  onAdded: (host: string) => void;\n  onClose: () => void;\n};\n\nexport const AddHostDialog = ({\n  clientId: id,\n  isOpen,\n  onAdded,\n  onClose,\n}: AddHostDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    handleSubmit,\n    formState: { isDirty, isValid },\n  } = useForm<FormFields>();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  async function onSubmit({ node }: FormFields) {\n    try {\n      await adminClient.clients.addClusterNode({\n        id,\n        node,\n      });\n      onAdded(node);\n      addAlert(t(\"addedNodeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:addedNodeFail\", error);\n    }\n\n    onClose();\n  }\n\n  return (\n    <Modal\n      title={t(\"addNode\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      variant=\"small\"\n      actions={[\n        <Button\n          key=\"confirm\"\n          id=\"add-node-confirm\"\n          type=\"submit\"\n          form=\"add-host-form\"\n          isDisabled={!isDirty || !isValid}\n        >\n          {t(\"common:save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          id=\"add-node-cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id=\"add-host-form\" onSubmit={handleSubmit(onSubmit)} isHorizontal>\n        <FormGroup label={t(\"nodeHost\")} fieldId=\"nodeHost\" isRequired>\n          <KeycloakTextInput\n            id=\"nodeHost\"\n            {...register(\"node\", { required: true })}\n            isRequired\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  ExpandableSection,\n  FormGroup,\n  Split,\n  SplitItem,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { AddHostDialog } from \".././advanced/AddHostDialog\";\nimport { AdvancedProps, parseResult } from \"../AdvancedTab\";\n\ntype Node = {\n  host: string;\n  registration: string;\n};\n\nexport const ClusteringPanel = ({\n  save,\n  client: { id, registeredNodes, access },\n}: AdvancedProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const formatDate = useFormatDate();\n\n  const [nodes, setNodes] = useState(registeredNodes || {});\n  const [expanded, setExpanded] = useState(false);\n  const [selectedNode, setSelectedNode] = useState(\"\");\n  const [addNodeOpen, setAddNodeOpen] = useState(false);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const testCluster = async () => {\n    const result = await adminClient.clients.testNodesAvailable({ id: id! });\n    parseResult(result, \"testCluster\", addAlert, t);\n  };\n\n  const [toggleDeleteNodeConfirm, DeleteNodeConfirm] = useConfirmDialog({\n    titleKey: \"clients:deleteNode\",\n    messageKey: t(\"deleteNodeBody\", {\n      node: selectedNode,\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.deleteClusterNode({\n          id: id!,\n          node: selectedNode,\n        });\n        setNodes({\n          ...Object.keys(nodes).reduce((object: any, key) => {\n            if (key !== selectedNode) {\n              object[key] = nodes[key];\n            }\n            return object;\n          }, {}),\n        });\n        refresh();\n        addAlert(t(\"deleteNodeSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"clients:deleteNodeFail\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <FormAccess\n        role=\"manage-clients\"\n        fineGrainedAccess={access?.configure}\n        isHorizontal\n      >\n        <FormGroup\n          label={t(\"nodeReRegistrationTimeout\")}\n          fieldId=\"kc-node-reregistration-timeout\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:nodeReRegistrationTimeout\")}\n              fieldLabelId=\"clients:nodeReRegistrationTimeout\"\n            />\n          }\n        >\n          <Split hasGutter>\n            <SplitItem>\n              <Controller\n                name=\"nodeReRegistrationTimeout\"\n                defaultValue=\"\"\n                control={control}\n                render={({ field }) => (\n                  <TimeSelector value={field.value} onChange={field.onChange} />\n                )}\n              />\n            </SplitItem>\n            <SplitItem>\n              <Button variant={ButtonVariant.secondary} onClick={() => save()}>\n                {t(\"common:save\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        </FormGroup>\n      </FormAccess>\n      <>\n        <DeleteNodeConfirm />\n        <AddHostDialog\n          clientId={id!}\n          isOpen={addNodeOpen}\n          onAdded={(node) => {\n            nodes[node] = Date.now() / 1000;\n            refresh();\n          }}\n          onClose={() => setAddNodeOpen(false)}\n        />\n        <ExpandableSection\n          toggleText={t(\"registeredClusterNodes\")}\n          onToggle={setExpanded}\n          isExpanded={expanded}\n        >\n          <KeycloakDataTable\n            key={key}\n            ariaLabelKey=\"registeredClusterNodes\"\n            loader={() =>\n              Promise.resolve<Node[]>(\n                Object.entries(nodes || {}).map((entry) => {\n                  return { host: entry[0], registration: entry[1] };\n                })\n              )\n            }\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <Button\n                    id=\"testClusterAvailability\"\n                    onClick={testCluster}\n                    variant={ButtonVariant.secondary}\n                    isDisabled={Object.keys(nodes).length === 0}\n                  >\n                    {t(\"testClusterAvailability\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    id=\"registerNodeManually\"\n                    onClick={() => setAddNodeOpen(true)}\n                    variant={ButtonVariant.tertiary}\n                  >\n                    {t(\"registerNodeManually\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n            actions={[\n              {\n                title: t(\"common:delete\"),\n                onRowClick: (node) => {\n                  setSelectedNode(node.host);\n                  toggleDeleteNodeConfirm();\n                },\n              } as Action<Node>,\n            ]}\n            columns={[\n              {\n                name: \"host\",\n                displayKey: \"clients:nodeHost\",\n              },\n              {\n                name: \"registration\",\n                displayKey: \"clients:lastRegistration\",\n                cellFormatters: [\n                  (value) =>\n                    value\n                      ? formatDate(\n                          new Date(parseInt(value.toString()) * 1000),\n                          FORMAT_DATE_AND_TIME\n                        )\n                      : \"\",\n                ],\n              },\n            ]}\n            emptyState={\n              <ListEmptyState\n                message={t(\"noNodes\")}\n                instructions={t(\"noNodesInstructions\")}\n                primaryActionText={t(\"registerNodeManually\")}\n                onPrimaryAction={() => setAddNodeOpen(true)}\n              />\n            }\n          />\n        </ExpandableSection>\n      </>\n    </>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype ApplicationUrlsProps = {\n  isDisabled?: boolean;\n};\n\nexport const ApplicationUrls = (props: ApplicationUrlsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { register } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"logoUrl\")}\n        fieldId=\"logoUrl\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:logoUrl\")}\n            fieldLabelId=\"clients:logoUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"logoUrl\"\n          type=\"url\"\n          data-testid=\"logoUrl\"\n          {...register(\n            convertAttributeNameToForm<FormFields>(\"attributes.logoUri\")\n          )}\n          {...props}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"policyUrl\")}\n        fieldId=\"policyUrl\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:policyUrl\")}\n            fieldLabelId=\"clients:policyUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"policyUrl\"\n          data-testid=\"policyUrl\"\n          type=\"url\"\n          {...register(\n            convertAttributeNameToForm<FormFields>(\"attributes.policyUri\")\n          )}\n          {...props}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"termsOfServiceUrl\")}\n        fieldId=\"termsOfServiceUrl\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:termsOfServiceUrl\")}\n            fieldLabelId=\"clients:termsOfServiceUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"termsOfServiceUrl\"\n          type=\"url\"\n          data-testid=\"termsOfServiceUrl\"\n          {...register(\n            convertAttributeNameToForm<FormFields>(\"attributes.tosUri\")\n          )}\n          {...props}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, sortProviders } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainOpenIdConnectProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const FineGrainOpenIdConnect = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: FineGrainOpenIdConnectProps) => {\n  const { t } = useTranslation(\"clients\");\n  const providers = useServerInfo().providers;\n  const clientSignatureProviders = providers?.clientSignature.providers;\n  const contentEncryptionProviders = providers?.contentencryption.providers;\n  const cekManagementProviders = providers?.cekmanagement.providers;\n  const signatureProviders = providers?.signature.providers;\n  const [accessTokenOpen, setAccessTokenOpen] = useState(false);\n  const [idTokenOpen, setIdTokenOpen] = useState(false);\n  const [idTokenKeyManagementOpen, setIdTokenKeyManagementOpen] =\n    useState(false);\n  const [idTokenContentOpen, setIdTokenContentOpen] = useState(false);\n  const [userInfoSignedResponseOpen, setUserInfoSignedResponseOpen] =\n    useState(false);\n  const [requestObjectSignatureOpen, setRequestObjectSignatureOpen] =\n    useState(false);\n  const [requestObjectRequiredOpen, setRequestObjectRequiredOpen] =\n    useState(false);\n  const [requestObjectEncryptionOpen, setRequestObjectEncryptionOpen] =\n    useState(false);\n  const [requestObjectEncodingOpen, setRequestObjectEncodingOpen] =\n    useState(false);\n  const [authorizationSignedOpen, setAuthorizationSignedOpen] = useState(false);\n  const [authorizationEncryptedOpen, setAuthorizationEncryptedOpen] =\n    useState(false);\n  const [\n    authorizationEncryptedResponseOpen,\n    setAuthorizationEncryptedResponseOpen,\n  ] = useState(false);\n\n  const [\n    userInfoResponseEncryptionKeyManagementOpen,\n    setUserInfoResponseEncryptionKeyManagementOpen,\n  ] = useState(false);\n\n  const [\n    userInfoResponseEncryptionContentEncryptionOpen,\n    setUserInfoResponseEncryptionContentEncryptionOpen,\n  ] = useState(false);\n\n  const { control } = useFormContext();\n\n  const keyOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"common:choose\")}\n    </SelectOption>,\n    ...sortProviders(clientSignatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n  const cekManagementOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"common:choose\")}\n    </SelectOption>,\n    ...sortProviders(cekManagementProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n  const signatureOptions = [\n    <SelectOption key=\"unsigned\" value=\"\">\n      {t(\"unsigned\")}\n    </SelectOption>,\n    ...sortProviders(signatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n  const contentOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"common:choose\")}\n    </SelectOption>,\n    ...sortProviders(contentEncryptionProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectOptions = [\n    <SelectOption key=\"any\" value=\"any\">\n      {t(\"common:any\")}\n    </SelectOption>,\n    <SelectOption key=\"none\" value=\"none\">\n      {t(\"common:none\")}\n    </SelectOption>,\n    ...sortProviders(clientSignatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectEncryptionOptions = [\n    <SelectOption key=\"any\" value=\"any\">\n      {t(\"common:any\")}\n    </SelectOption>,\n    ...sortProviders(cekManagementProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectEncodingOptions = [\n    <SelectOption key=\"any\" value=\"any\">\n      {t(\"common:any\")}\n    </SelectOption>,\n    ...sortProviders(contentEncryptionProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const authorizationSignedResponseOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"common:choose\")}\n    </SelectOption>,\n    ...sortProviders(signatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectRequiredOptions = [\n    \"not required\",\n    \"request or request_uri\",\n    \"request only\",\n    \"request_uri only\",\n  ].map((p) => (\n    <SelectOption key={p} value={p}>\n      {t(`requestObject.${p}`)}\n    </SelectOption>\n  ));\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <ApplicationUrls />\n      <FormGroup\n        label={t(\"accessTokenSignatureAlgorithm\")}\n        fieldId=\"accessTokenSignatureAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:accessTokenSignatureAlgorithm\")}\n            fieldLabelId=\"clients:accessTokenSignatureAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.access.token.signed.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"accessTokenSignatureAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setAccessTokenOpen}\n              isOpen={accessTokenOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAccessTokenOpen(false);\n              }}\n              selections={field.value}\n            >\n              {keyOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"idTokenSignatureAlgorithm\")}\n        fieldId=\"kc-id-token-signature\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:idTokenSignatureAlgorithm\")}\n            fieldLabelId=\"clients:idTokenSignatureAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.id.token.signed.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"idTokenSignatureAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setIdTokenOpen}\n              isOpen={idTokenOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setIdTokenOpen(false);\n              }}\n              selections={field.value}\n            >\n              {keyOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"idTokenEncryptionKeyManagementAlgorithm\")}\n        fieldId=\"idTokenEncryptionKeyManagementAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:idTokenEncryptionKeyManagementAlgorithm\")}\n            fieldLabelId=\"clients:idTokenEncryptionKeyManagementAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.id.token.encrypted.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"idTokenEncryptionKeyManagementAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setIdTokenKeyManagementOpen}\n              isOpen={idTokenKeyManagementOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setIdTokenKeyManagementOpen(false);\n              }}\n              selections={field.value}\n            >\n              {cekManagementOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"idTokenEncryptionContentEncryptionAlgorithm\")}\n        fieldId=\"idTokenEncryptionContentEncryptionAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\n              \"clients-help:idTokenEncryptionContentEncryptionAlgorithm\"\n            )}\n            fieldLabelId=\"clients:idTokenEncryptionContentEncryptionAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.id.token.encrypted.response.enc\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"idTokenEncryptionContentEncryptionAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setIdTokenContentOpen}\n              isOpen={idTokenContentOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setIdTokenContentOpen(false);\n              }}\n              selections={field.value}\n            >\n              {contentOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"userInfoSignedResponseAlgorithm\")}\n        fieldId=\"userInfoSignedResponseAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:userInfoSignedResponseAlgorithm\")}\n            fieldLabelId=\"clients:userInfoSignedResponseAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.user.info.response.signature.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"userInfoSignedResponseAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setUserInfoSignedResponseOpen}\n              isOpen={userInfoSignedResponseOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setUserInfoSignedResponseOpen(false);\n              }}\n              selections={field.value}\n            >\n              {signatureOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"userInfoResponseEncryptionKeyManagementAlgorithm\")}\n        fieldId=\"userInfoResponseEncryptionKeyManagementAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\n              \"clients-help:userInfoResponseEncryptionKeyManagementAlgorithm\"\n            )}\n            fieldLabelId=\"clients:userInfoResponseEncryptionKeyManagementAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.user.info.encrypted.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"userInfoResponseEncryptionKeyManagementAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setUserInfoResponseEncryptionKeyManagementOpen}\n              isOpen={userInfoResponseEncryptionKeyManagementOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setUserInfoResponseEncryptionKeyManagementOpen(false);\n              }}\n              selections={field.value}\n            >\n              {cekManagementOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"userInfoResponseEncryptionContentEncryptionAlgorithm\")}\n        fieldId=\"userInfoResponseEncryptionContentEncryptionAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\n              \"clients-help:userInfoResponseEncryptionContentEncryptionAlgorithm\"\n            )}\n            fieldLabelId=\"clients:userInfoResponseEncryptionContentEncryptionAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.user.info.encrypted.response.enc\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"userInfoResponseEncryptionContentEncryptionAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setUserInfoResponseEncryptionContentEncryptionOpen}\n              isOpen={userInfoResponseEncryptionContentEncryptionOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setUserInfoResponseEncryptionContentEncryptionOpen(false);\n              }}\n              selections={field.value}\n            >\n              {contentOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectSignatureAlgorithm\")}\n        fieldId=\"requestObjectSignatureAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:requestObjectSignatureAlgorithm\")}\n            fieldLabelId=\"clients:requestObjectSignatureAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.signature.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectSignatureAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectSignatureOpen}\n              isOpen={requestObjectSignatureOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectSignatureOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectEncryption\")}\n        fieldId=\"requestObjectEncryption\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:requestObjectEncryption\")}\n            fieldLabelId=\"clients:requestObjectEncryption\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.encryption.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectEncryption\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectEncryptionOpen}\n              isOpen={requestObjectEncryptionOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectEncryptionOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectEncryptionOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectEncoding\")}\n        fieldId=\"requestObjectEncoding\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:requestObjectEncoding\")}\n            fieldLabelId=\"clients:requestObjectEncoding\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.encryption.enc\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectEncoding\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectEncodingOpen}\n              isOpen={requestObjectEncodingOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectEncodingOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectEncodingOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectRequired\")}\n        fieldId=\"requestObjectRequired\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:requestObjectRequired\")}\n            fieldLabelId=\"clients:requestObjectRequired\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.required\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectRequired\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectRequiredOpen}\n              isOpen={requestObjectRequiredOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectRequiredOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectRequiredOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"validRequestURIs\")}\n        fieldId=\"validRequestURIs\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:validRequestURIs\")}\n            fieldLabelId=\"clients:validRequestURIs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name={convertAttributeNameToForm(\"attributes.request.uris\")}\n          aria-label={t(\"validRequestURIs\")}\n          addButtonLabel=\"clients:addRequestUri\"\n          stringify\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authorizationSignedResponseAlg\")}\n        fieldId=\"authorizationSignedResponseAlg\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:authorizationSignedResponseAlg\")}\n            fieldLabelId=\"clients:authorizationSignedResponseAlg\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.authorization.signed.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"authorizationSignedResponseAlg\"\n              variant={SelectVariant.single}\n              onToggle={setAuthorizationSignedOpen}\n              isOpen={authorizationSignedOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAuthorizationSignedOpen(false);\n              }}\n              selections={field.value}\n            >\n              {authorizationSignedResponseOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authorizationEncryptedResponseAlg\")}\n        fieldId=\"authorizationEncryptedResponseAlg\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:authorizationEncryptedResponseAlg\")}\n            fieldLabelId=\"clients:authorizationEncryptedResponseAlg\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.authorization.encrypted.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"authorizationEncryptedResponseAlg\"\n              variant={SelectVariant.single}\n              onToggle={setAuthorizationEncryptedOpen}\n              isOpen={authorizationEncryptedOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAuthorizationEncryptedOpen(false);\n              }}\n              selections={field.value}\n            >\n              {cekManagementOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authorizationEncryptedResponseEnc\")}\n        fieldId=\"authorizationEncryptedResponseEnc\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:authorizationEncryptedResponseEnc\")}\n            fieldLabelId=\"clients:authorizationEncryptedResponseEnc\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.authorization.encrypted.response.enc\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"authorizationEncryptedResponseEnc\"\n              variant={SelectVariant.single}\n              onToggle={setAuthorizationEncryptedResponseOpen}\n              isOpen={authorizationEncryptedResponseOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAuthorizationEncryptedResponseOpen(false);\n              }}\n              selections={field.value}\n            >\n              {contentOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button variant=\"secondary\" id=\"fineGrainSave\" onClick={save}>\n          {t(\"common:save\")}\n        </Button>\n        <Button id=\"fineGrainRevert\" variant=\"link\" onClick={reset}>\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button, FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainSamlEndpointConfigProps = {\n  save: () => void;\n  reset: () => void;\n};\n\nexport const FineGrainSamlEndpointConfig = ({\n  save,\n  reset,\n}: FineGrainSamlEndpointConfigProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { register } = useFormContext();\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <ApplicationUrls />\n      <FormGroup\n        label={t(\"assertionConsumerServicePostBindingURL\")}\n        fieldId=\"assertionConsumerServicePostBindingURL\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:assertionConsumerServicePostBindingURL\")}\n            fieldLabelId=\"clients:assertionConsumerServicePostBindingURL\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"assertionConsumerServicePostBindingURL\"\n          type=\"url\"\n          {...register(\"attributes.saml_assertion_consumer_url_post\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"assertionConsumerServiceRedirectBindingURL\")}\n        fieldId=\"assertionConsumerServiceRedirectBindingURL\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\n              \"clients-help:assertionConsumerServiceRedirectBindingURL\"\n            )}\n            fieldLabelId=\"clients:assertionConsumerServiceRedirectBindingURL\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"assertionConsumerServiceRedirectBindingURL\"\n          type=\"url\"\n          {...register(\"attributes.saml_assertion_consumer_url_redirect\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"logoutServicePostBindingURL\")}\n        fieldId=\"logoutServicePostBindingURL\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:logoutServicePostBindingURL\")}\n            fieldLabelId=\"clients:logoutServicePostBindingURL\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"logoutServicePostBindingURL\"\n          type=\"url\"\n          {...register(\"attributes.saml_single_logout_service_url_post\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"logoutServiceRedirectBindingURL\")}\n        fieldId=\"logoutServiceRedirectBindingURL\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:logoutServiceRedirectBindingURL\")}\n            fieldLabelId=\"clients:logoutServiceRedirectBindingURL\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"logoutServiceRedirectBindingURL\"\n          type=\"url\"\n          {...register(\"attributes.saml_single_logout_service_url_redirect\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"logoutServiceSoapBindingUrl\")}\n        fieldId=\"logoutServiceSoapBindingUrl\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:logoutServiceSoapBindingUrl\"\n            fieldLabelId=\"clients:logoutServiceSoapBindingUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"logoutServiceSoapBindingUrl\"\n          type=\"url\"\n          {...register(\"attributes.saml_single_logout_service_url_soap\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"logoutServiceArtifactBindingUrl\")}\n        fieldId=\"logoutServiceArtifactBindingUrl\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:logoutServiceArtifactBindingUrl\")}\n            fieldLabelId=\"clients:logoutServiceArtifactBindingUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"logoutServiceArtifactBindingUrl\"\n          type=\"url\"\n          {...register(\"attributes.saml_single_logout_service_url_artifact\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"artifactBindingUrl\")}\n        fieldId=\"artifactBindingUrl\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:artifactBindingUrl\")}\n            fieldLabelId=\"clients:artifactBindingUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"artifactBindingUrl\"\n          type=\"url\"\n          {...register(\"attributes.saml_artifact_binding_url\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"artifactResolutionService\")}\n        fieldId=\"artifactResolutionService\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:artifactResolutionService\")}\n            fieldLabelId=\"clients:artifactResolutionService\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"artifactResolutionService\"\n          type=\"url\"\n          {...register(\"attributes.saml_artifact_resolution_service_url\")}\n        />\n      </FormGroup>\n\n      <ActionGroup>\n        <Button variant=\"tertiary\" onClick={save}>\n          {t(\"common:save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset}>\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype OpenIdConnectCompatibilityModesProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const OpenIdConnectCompatibilityModes = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: OpenIdConnectCompatibilityModesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n        fieldId=\"excludeSessionStateFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\n              \"clients-help:excludeSessionStateFromAuthenticationResponse\"\n            )}\n            fieldLabelId=\"clients:excludeSessionStateFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.session.state.from.auth.response\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeSessionStateFromAuthenticationResponse-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokens\")}\n        fieldId=\"useRefreshTokens\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:useRefreshTokens\")}\n            fieldLabelId=\"clients:useRefreshTokens\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.use.refresh.tokens\"\n          )}\n          defaultValue=\"true\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokens\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokens\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n        fieldId=\"useRefreshTokenForClientCredentialsGrant\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\n              \"clients-help:useRefreshTokenForClientCredentialsGrant\"\n            )}\n            fieldLabelId=\"clients:useRefreshTokenForClientCredentialsGrant\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.client_credentials.use_refresh_token\"\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokenForClientCredentialsGrant\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useLowerCaseBearerType\")}\n        fieldId=\"useLowerCaseBearerType\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:useLowerCaseBearerType\")}\n            fieldLabelId=\"clients:useLowerCaseBearerType\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.token.response.type.bearer.lower-case\"\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useLowerCaseBearerType\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"useLowerCaseBearerType\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCCompatabilitySave\"\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCCompatabilityRevert\"\n        >\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  InputGroup,\n  Text,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { useEffect, useRef } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { AdvancedProps, parseResult } from \"../AdvancedTab\";\nimport { toClient } from \"../routes/Client\";\n\nexport const RevocationPanel = ({\n  save,\n  client: { id, adminUrl, access },\n}: AdvancedProps) => {\n  const revocationFieldName = \"notBefore\";\n  const pushRevocationButtonRef = useRef<HTMLElement>();\n\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert } = useAlerts();\n  const formatDate = useFormatDate();\n\n  const { getValues, setValue, register } = useFormContext();\n\n  const setNotBefore = (time: number, messageKey: string) => {\n    setValue(revocationFieldName, time);\n    save({ messageKey });\n  };\n\n  useEffect(() => {\n    register(revocationFieldName);\n  }, [register]);\n\n  const getNotBeforeValue = () => {\n    const date = getValues(revocationFieldName);\n    if (date > 0) {\n      return formatDate(new Date(date * 1000), FORMAT_DATE_AND_TIME);\n    } else {\n      return t(\"common:none\");\n    }\n  };\n\n  const push = async () => {\n    const result = await adminClient.clients.pushRevocation({\n      id: id!,\n    });\n    parseResult(result, \"notBeforePush\", addAlert, t);\n  };\n\n  return (\n    <>\n      <Text className=\"pf-u-pb-lg\">\n        <Trans i18nKey=\"clients-help:notBeforeIntro\">\n          In order to successfully push setup url on\n          <Link to={toClient({ realm, clientId: id!, tab: \"settings\" })}>\n            {t(\"settings\")}\n          </Link>\n          tab\n        </Trans>\n      </Text>\n      <FormAccess\n        role=\"manage-clients\"\n        fineGrainedAccess={access?.configure}\n        isHorizontal\n      >\n        <FormGroup\n          label={t(\"notBefore\")}\n          fieldId=\"kc-not-before\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:notBefore\")}\n              fieldLabelId=\"clients:notBefore\"\n            />\n          }\n        >\n          <InputGroup>\n            <KeycloakTextInput\n              type=\"text\"\n              id=\"kc-not-before\"\n              name=\"notBefore\"\n              isReadOnly\n              value={getNotBeforeValue()}\n            />\n            <Button\n              id=\"setToNow\"\n              variant=\"control\"\n              onClick={() => {\n                setNotBefore(Date.now() / 1000, \"notBeforeSetToNow\");\n              }}\n            >\n              {t(\"setToNow\")}\n            </Button>\n            <Button\n              id=\"clear\"\n              variant=\"control\"\n              onClick={() => {\n                setNotBefore(0, \"notBeforeNowClear\");\n              }}\n            >\n              {t(\"clear\")}\n            </Button>\n          </InputGroup>\n        </FormGroup>\n        <ActionGroup>\n          {!adminUrl && (\n            <Tooltip\n              reference={pushRevocationButtonRef}\n              content={t(\"clients-help:notBeforeTooltip\")}\n            />\n          )}\n          <Button\n            id=\"push\"\n            variant=\"secondary\"\n            onClick={push}\n            isAriaDisabled={!adminUrl}\n            ref={pushRevocationButtonRef}\n          >\n            {t(\"push\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import { AlertVariant, PageSection, Text } from \"@patternfly/react-core\";\nimport type { TFunction } from \"i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\n\nimport type { AddAlertFunction } from \"../components/alert/Alerts\";\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { convertAttributeNameToForm, toUpperCase } from \"../util\";\nimport { AdvancedSettings } from \"./advanced/AdvancedSettings\";\nimport { AuthenticationOverrides } from \"./advanced/AuthenticationOverrides\";\nimport { ClusteringPanel } from \"./advanced/ClusteringPanel\";\nimport { FineGrainOpenIdConnect } from \"./advanced/FineGrainOpenIdConnect\";\nimport { FineGrainSamlEndpointConfig } from \"./advanced/FineGrainSamlEndpointConfig\";\nimport { OpenIdConnectCompatibilityModes } from \"./advanced/OpenIdConnectCompatibilityModes\";\nimport { RevocationPanel } from \"./advanced/RevocationPanel\";\nimport type { FormFields, SaveOptions } from \"./ClientDetails\";\n\nexport const parseResult = (\n  result: GlobalRequestResult,\n  prefixKey: string,\n  addAlert: AddAlertFunction,\n  t: TFunction\n) => {\n  const successCount = result.successRequests?.length || 0;\n  const failedCount = result.failedRequests?.length || 0;\n\n  if (successCount === 0 && failedCount === 0) {\n    addAlert(t(\"noAdminUrlSet\"), AlertVariant.warning);\n  } else if (failedCount > 0) {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success\n    );\n    addAlert(\n      t(prefixKey + \"Fail\", { failedNodes: result.failedRequests }),\n      AlertVariant.danger\n    );\n  } else {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success\n    );\n  }\n};\n\nexport type AdvancedProps = {\n  save: (options?: SaveOptions) => void;\n  client: ClientRepresentation;\n};\n\nexport const AdvancedTab = ({ save, client }: AdvancedProps) => {\n  const { t } = useTranslation(\"clients\");\n  const openIdConnect = \"openid-connect\";\n\n  const { setValue } = useFormContext();\n  const {\n    publicClient,\n    attributes,\n    protocol,\n    authenticationFlowBindingOverrides,\n  } = client;\n\n  const resetFields = (names: string[]) => {\n    for (const name of names) {\n      setValue(\n        convertAttributeNameToForm<FormFields>(`attributes.${name}`),\n        attributes?.[name] || \"\"\n      );\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-py-0\">\n      <ScrollForm\n        sections={[\n          {\n            title: t(\"revocation\"),\n            isHidden: protocol !== openIdConnect,\n            panel: <RevocationPanel client={client} save={save} />,\n          },\n          {\n            title: t(\"clustering\"),\n            isHidden: !publicClient,\n            panel: <ClusteringPanel client={client} save={save} />,\n          },\n          {\n            title: t(\"fineGrainOpenIdConnectConfiguration\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"clients-help:fineGrainOpenIdConnectConfiguration\")}\n                </Text>\n                <FineGrainOpenIdConnect\n                  save={save}\n                  reset={() => {\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"access.token.signed.response.alg\",\n                      \"id.token.signed.response.alg\",\n                      \"id.token.encrypted.response.alg\",\n                      \"id.token.encrypted.response.enc\",\n                      \"user.info.response.signature.alg\",\n                      \"user.info.encrypted.response.alg\",\n                      \"user.info.encrypted.response.enc\",\n                      \"request.object.signature.alg\",\n                      \"request.object.encryption.alg\",\n                      \"request.object.encryption.enc\",\n                      \"request.object.required\",\n                      \"request.uris\",\n                      \"authorization.signed.response.alg\",\n                      \"authorization.encrypted.response.alg\",\n                      \"authorization.encrypted.response.enc\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"openIdConnectCompatibilityModes\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"clients-help:openIdConnectCompatibilityModes\")}\n                </Text>\n                <OpenIdConnectCompatibilityModes\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"exclude.session.state.from.auth.response\",\n                      \"use.refresh.tokens\",\n                      \"client_credentials.use_refresh_token\",\n                      \"token.response.type.bearer.lower-case\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"fineGrainSamlEndpointConfig\"),\n            isHidden: protocol === openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"clients-help:fineGrainSamlEndpointConfig\")}\n                </Text>\n                <FineGrainSamlEndpointConfig\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"saml_assertion_consumer_url_post\",\n                      \"saml_assertion_consumer_url_redirect\",\n                      \"saml_single_logout_service_url_post\",\n                      \"saml_single_logout_service_url_redirect\",\n                      \"saml_single_logout_service_url_artifact\",\n                      \"saml_artifact_binding_url\",\n                      \"saml_artifact_resolution_service_url\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"advancedSettings\"),\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\n                    \"clients-help:advancedSettings\" +\n                      toUpperCase(protocol || \"\")\n                  )}\n                </Text>\n                <AdvancedSettings\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    resetFields([\n                      \"saml.assertion.lifespan\",\n                      \"access.token.lifespan\",\n                      \"tls.client.certificate.bound.access.tokens\",\n                      \"pkce.code.challenge.method\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"authenticationOverrides\"),\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"clients-help:authenticationOverrides\")}\n                </Text>\n                <AuthenticationOverrides\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    setValue(\n                      \"authenticationFlowBindingOverrides.browser\",\n                      authenticationFlowBindingOverrides?.browser\n                    );\n                    setValue(\n                      \"authenticationFlowBindingOverrides.direct_grant\",\n                      authenticationFlowBindingOverrides?.direct_grant\n                    );\n                  }}\n                />\n              </>\n            ),\n          },\n        ]}\n        borders\n      />\n    </PageSection>\n  );\n};\n","import type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport { DecisionEffect } from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\nimport {\n  capitalize,\n  DescriptionList,\n  TextContent,\n  TextList,\n  TextListItem,\n} from \"@patternfly/react-core\";\nimport { ExpandableRowContent, Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\n\ntype Props = {\n  idx: number;\n  rowIndex: number;\n  outerPolicy: PolicyResultRepresentation;\n  resource: EvaluationResultRepresentation;\n};\n\nexport const AuthorizationEvaluateResourcePolicies = ({\n  idx,\n  rowIndex,\n  outerPolicy,\n  resource,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation(\"clients\");\n  const { realm } = useRealm();\n  const { clientId } = useParams<ClientParams>();\n\n  return (\n    <Tbody key={idx} isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          <Link\n            to={toPermissionDetails({\n              realm,\n              id: clientId,\n              permissionType: outerPolicy.policy?.type!,\n              permissionId: outerPolicy.policy?.id!,\n            })}\n          >\n            {outerPolicy.policy?.name}\n          </Link>\n        </Td>\n        <Td id={outerPolicy.status?.toLowerCase()}>\n          {t(outerPolicy.status?.toLowerCase() as string)}\n        </Td>\n        <Td>{t(`${outerPolicy.policy?.decisionStrategy?.toLowerCase()}`)}</Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Permit\n            ? resource.policies?.[rowIndex]?.scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Deny &&\n          resource.policies?.[rowIndex]?.scopes?.length\n            ? resource.policies[rowIndex].scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          {expanded && (\n            <ExpandableRowContent>\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <TextContent>\n                  <TextList>\n                    {outerPolicy.associatedPolicies?.map((item) => (\n                      <TextListItem key=\"policyDetails\">\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: item.policy?.type!,\n                            policyId: item.policy?.id!,\n                          })}\n                        >\n                          {item.policy?.name}\n                        </Link>\n\n                        {t(\"votedToStatus\", {\n                          status: capitalize(item.status as string),\n                        })}\n                      </TextListItem>\n                    ))}\n                  </TextList>\n                </TextContent>\n              </DescriptionList>\n            </ExpandableRowContent>\n          )}\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { useState } from \"react\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { DescriptionList } from \"@patternfly/react-core/dist/esm/components\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthorizationEvaluateResourcePolicies } from \"./AuthorizationEvaluateResourcePolicies\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\n\ntype Props = {\n  rowIndex: number;\n  resource: EvaluationResultRepresentation;\n  evaluateResults: any;\n};\n\nexport const AuthorizationEvaluateResource = ({\n  rowIndex,\n  resource,\n  evaluateResults,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation(\"clients\");\n\n  return (\n    <Tbody isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          {resource.resource?.name}\n        </Td>\n        <Td id={resource.status?.toLowerCase()}>\n          {t(`${resource.status?.toLowerCase()}`)}\n        </Td>\n        <Td>\n          {resource.allowedScopes?.length\n            ? resource.allowedScopes.map((item) => item.name)\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          <ExpandableRowContent>\n            {expanded && (\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <TableComposable aria-label={t(\"evaluationResults\")}>\n                  <Thead>\n                    <Tr>\n                      <Th />\n                      <Th>{t(\"permission\")}</Th>\n                      <Th>{t(\"results\")}</Th>\n                      <Th>{t(\"decisionStrategy\")}</Th>\n                      <Th>{t(\"grantedScopes\")}</Th>\n                      <Th>{t(\"deniedScopes\")}</Th>\n                      <Th />\n                    </Tr>\n                  </Thead>\n                  {Object.values(evaluateResults[rowIndex].policies).map(\n                    (outerPolicy, idx) => (\n                      <AuthorizationEvaluateResourcePolicies\n                        key={idx}\n                        idx={idx}\n                        rowIndex={rowIndex}\n                        outerPolicy={outerPolicy as PolicyResultRepresentation}\n                        resource={resource}\n                      />\n                    )\n                  )}\n                </TableComposable>\n              </DescriptionList>\n            )}\n          </ExpandableRowContent>\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\n\nimport type AccessTokenRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/accessTokenRepresentation\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport useToggle from \"../../utils/useToggle\";\nimport { prettyPrintJSON } from \"../../util\";\n\ntype AuthorizationDataModalProps = {\n  data: AccessTokenRepresentation;\n};\n\nexport const AuthorizationDataModal = ({\n  data,\n}: AuthorizationDataModalProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [show, toggle] = useToggle();\n\n  return (\n    <>\n      <Button\n        data-testid=\"authorization-revert\"\n        onClick={toggle}\n        variant=\"secondary\"\n      >\n        {t(\"showAuthData\")}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        isOpen={show}\n        aria-label={t(\"authData\")}\n        header={\n          <TextContent>\n            <Text component={TextVariants.h1}>{t(\"authData\")}</Text>\n            <Text>{t(\"authDataDescription\")}</Text>\n          </TextContent>\n        }\n        onClose={toggle}\n        actions={[\n          <Button\n            data-testid=\"cancel\"\n            id=\"modal-cancel\"\n            key=\"cancel\"\n            onClick={toggle}\n          >\n            {t(\"common:cancel\")}\n          </Button>,\n        ]}\n      >\n        <KeycloakTextArea readOnly rows={20} value={prettyPrintJSON(data)} />\n      </Modal>\n    </>\n  );\n};\n","import { KeyboardEvent, useMemo, useState } from \"react\";\nimport {\n  Select,\n  SelectVariant,\n  SelectOption,\n  PageSection,\n  ActionGroup,\n  Button,\n  TextInput,\n  ButtonVariant,\n  InputGroup,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Divider,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { TableComposable, Th, Thead, Tr } from \"@patternfly/react-table\";\n\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport { AuthorizationEvaluateResource } from \"../AuthorizationEvaluateResource\";\nimport { ListEmptyState } from \"../../../components/list-empty-state/ListEmptyState\";\nimport { AuthorizationDataModal } from \"../AuthorizationDataModal\";\nimport useToggle from \"../../../utils/useToggle\";\n\ntype ResultProps = {\n  evaluateResult: PolicyEvaluationResponse;\n  refresh: () => void;\n  back: () => void;\n};\n\nenum ResultsFilter {\n  All = \"ALL\",\n  StatusDenied = \"STATUS_DENIED\",\n  StatusPermitted = \"STATUS_PERMITTED\",\n}\n\nfunction filterResults(\n  results: EvaluationResultRepresentation[],\n  filter: ResultsFilter\n) {\n  switch (filter) {\n    case ResultsFilter.StatusPermitted:\n      return results.filter(({ status }) => status === \"PERMIT\");\n    case ResultsFilter.StatusDenied:\n      return results.filter(({ status }) => status === \"DENY\");\n    default:\n      return results;\n  }\n}\n\nexport const Results = ({ evaluateResult, refresh, back }: ResultProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  const [filterDropdownOpen, toggleFilterDropdown] = useToggle();\n\n  const [filter, setFilter] = useState(ResultsFilter.All);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const confirmSearchQuery = () => {\n    setSearchQuery(searchInput);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      confirmSearchQuery();\n    }\n  };\n\n  const filteredResources = useMemo(\n    () =>\n      filterResults(evaluateResult.results!, filter).filter(\n        ({ resource }) => resource?.name?.includes(searchQuery) ?? false\n      ),\n    [evaluateResult.results, filter, searchQuery]\n  );\n\n  const noEvaluatedData = evaluateResult.results!.length === 0;\n  const noFilteredData = filteredResources.length === 0;\n\n  return (\n    <PageSection>\n      <Toolbar>\n        <ToolbarGroup className=\"providers-toolbar\">\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                name={\"inputGroupName\"}\n                id={\"inputGroupName\"}\n                type=\"search\"\n                aria-label={t(\"common:search\")}\n                placeholder={t(\"common:search\")}\n                onChange={setSearchInput}\n                onKeyDown={handleKeyDown}\n              />\n              <Button\n                variant={ButtonVariant.control}\n                aria-label={t(\"common:search\")}\n                onClick={() => confirmSearchQuery()}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              width={300}\n              data-testid=\"filter-type-select\"\n              isOpen={filterDropdownOpen}\n              className=\"kc-filter-type-select\"\n              variant={SelectVariant.single}\n              onToggle={toggleFilterDropdown}\n              onSelect={(_, value) => {\n                setFilter(value as ResultsFilter);\n                toggleFilterDropdown();\n                refresh();\n              }}\n              selections={filter}\n            >\n              <SelectOption\n                data-testid=\"all-results-option\"\n                value={ResultsFilter.All}\n                isPlaceholder\n              >\n                {t(\"allResults\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"result-permit-option\"\n                value={ResultsFilter.StatusPermitted}\n              >\n                {t(\"resultPermit\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"result-deny-option\"\n                value={ResultsFilter.StatusDenied}\n              >\n                {t(\"resultDeny\")}\n              </SelectOption>\n            </Select>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n      {!noFilteredData && (\n        <TableComposable aria-label={t(\"evaluationResults\")}>\n          <Thead>\n            <Tr>\n              <Th />\n              <Th>{t(\"resource\")}</Th>\n              <Th>{t(\"overallResults\")}</Th>\n              <Th>{t(\"scopes\")}</Th>\n              <Th />\n            </Tr>\n          </Thead>\n          {filteredResources.map((resource, rowIndex) => (\n            <AuthorizationEvaluateResource\n              key={rowIndex}\n              rowIndex={rowIndex}\n              resource={resource}\n              evaluateResults={evaluateResult.results}\n            />\n          ))}\n        </TableComposable>\n      )}\n      {(noFilteredData || noEvaluatedData) && (\n        <>\n          <Divider />\n          <ListEmptyState\n            isSearchVariant\n            message={t(\"common:noSearchResults\")}\n            instructions={t(\"common:noSearchResultsInstructions\")}\n          />\n        </>\n      )}\n      <ActionGroup className=\"kc-evaluated-options\">\n        <Button data-testid=\"authorization-eval\" id=\"back-btn\" onClick={back}>\n          {t(\"common:back\")}\n        </Button>\n        <Button\n          data-testid=\"authorization-reevaluate\"\n          id=\"reevaluate-btn\"\n          variant=\"secondary\"\n          onClick={refresh}\n        >\n          {t(\"clients:reevaluate\")}\n        </Button>\n        <AuthorizationDataModal data={evaluateResult.rpt!} />\n      </ActionGroup>\n    </PageSection>\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFieldArray, useFormContext } from \"react-hook-form\";\nimport {\n  Button,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { camelCase } from \"lodash-es\";\n\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport { defaultContextAttributes } from \"../utils\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nimport \"./key-based-attribute-input.css\";\n\nexport type AttributeType = {\n  key?: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype AttributeInputProps = {\n  name: string;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\ntype ValueInputProps = {\n  name: string;\n  rowIndex: number;\n  attribute: any;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\nconst ValueInput = ({\n  name,\n  rowIndex,\n  attribute,\n  selectableValues,\n  resources,\n}: ValueInputProps) => {\n  const { t } = useTranslation(\"common\");\n  const { control, register, getValues } = useFormContext();\n  const [isValueOpenArray, setIsValueOpenArray] = useState([false]);\n\n  const toggleValueSelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isValueOpenArray];\n    arr[rowIndex] = open;\n    setIsValueOpenArray(arr);\n  };\n\n  const attributeValues = useMemo(() => {\n    let values: AttributeType[] | undefined = [];\n\n    if (selectableValues) {\n      values = defaultContextAttributes.find(\n        (attr) => attr.key === getValues().context?.[rowIndex]?.key\n      )?.values;\n    }\n\n    return values;\n  }, [getValues]);\n\n  const renderSelectOptionType = () => {\n    const scopeValues = resources?.find(\n      (resource) => resource.name === getValues().resources?.[rowIndex]?.key\n    )?.scopes;\n\n    if (attributeValues?.length && !resources) {\n      return attributeValues.map((attr) => (\n        <SelectOption key={attr.key} value={attr.key}>\n          {attr.name}\n        </SelectOption>\n      ));\n    } else if (scopeValues?.length) {\n      return scopeValues.map((scope) => (\n        <SelectOption key={scope.name} value={scope.name}>\n          {scope.name}\n        </SelectOption>\n      ));\n    }\n  };\n\n  const getMessageBundleKey = (attributeName: string) =>\n    camelCase(attributeName).replace(/\\W/g, \"\");\n\n  return (\n    <Td>\n      {resources || attributeValues?.length ? (\n        <Controller\n          name={`${name}.${rowIndex}.value`}\n          defaultValue={[]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId={`${attribute.id}-value`}\n              className=\"kc-attribute-value-selectable\"\n              name={`${name}.${rowIndex}.value`}\n              chipGroupProps={{\n                numChips: 1,\n                expandedText: t(\"common:hide\"),\n                collapsedText: t(\"common:showRemaining\"),\n              }}\n              onToggle={(open) => toggleValueSelect(rowIndex, open)}\n              isOpen={isValueOpenArray[rowIndex]}\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={t(\"clients:selectOrTypeAKey\")}\n              placeholderText={t(\"clients:selectOrTypeAKey\")}\n              selections={field.value}\n              onSelect={(_, v) => {\n                field.onChange(v);\n\n                toggleValueSelect(rowIndex, false);\n              }}\n            >\n              {renderSelectOptionType()}\n            </Select>\n          )}\n        />\n      ) : (\n        <KeycloakTextInput\n          id={`${getMessageBundleKey(attribute.key)}-value`}\n          className=\"value-input\"\n          defaultValue={attribute.value}\n          data-testid=\"attribute-value-input\"\n          aria-label={t(\"common:value\")}\n          {...register(`${name}.${rowIndex}.value`)}\n        />\n      )}\n    </Td>\n  );\n};\n\nexport const KeyBasedAttributeInput = ({\n  name,\n  selectableValues,\n  resources,\n}: AttributeInputProps) => {\n  const { t } = useTranslation(\"common\");\n  const { control, watch } = useFormContext();\n  const { fields, append, remove } = useFieldArray({\n    control: control,\n    name,\n  });\n\n  const [isKeyOpenArray, setIsKeyOpenArray] = useState([false]);\n  const toggleKeySelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isKeyOpenArray];\n    arr[rowIndex] = open;\n    setIsKeyOpenArray(arr);\n  };\n\n  useEffect(() => {\n    if (!fields.length) {\n      append({ key: \"\", value: \"\" }, { shouldFocus: false });\n    }\n  }, [fields]);\n\n  const watchLastValue = watch(`${name}.${fields.length - 1}.value`, \"\");\n\n  return (\n    <TableComposable\n      className=\"kc-attributes__table\"\n      aria-label=\"Role attribute keys and values\"\n      variant=\"compact\"\n    >\n      <Thead>\n        <Tr>\n          <Th width={40}>{t(\"key\")}</Th>\n          <Th width={40}>{t(\"value\")}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {fields.map((attribute, rowIndex) => (\n          <Tr key={attribute.id} data-testid=\"attribute-row\">\n            <Td>\n              <Controller\n                name={`${name}.${rowIndex}.key`}\n                defaultValue=\"\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    toggleId={`${name}.${rowIndex}.key`}\n                    className=\"kc-attribute-key-selectable\"\n                    name={`${name}.${rowIndex}.key`}\n                    onToggle={(open) => toggleKeySelect(rowIndex, open)}\n                    isOpen={isKeyOpenArray[rowIndex]}\n                    variant={SelectVariant.typeahead}\n                    typeAheadAriaLabel={t(\"clients:selectOrTypeAKey\")}\n                    placeholderText={t(\"clients:selectOrTypeAKey\")}\n                    selections={field.value}\n                    onSelect={(_, v) => {\n                      field.onChange(v.toString());\n\n                      toggleKeySelect(rowIndex, false);\n                    }}\n                  >\n                    {selectableValues?.map((attribute) => (\n                      <SelectOption\n                        selected={attribute.name === field.value}\n                        key={attribute.key}\n                        value={resources ? attribute.name : attribute.key}\n                      >\n                        {attribute.name}\n                      </SelectOption>\n                    ))}\n                  </Select>\n                )}\n              />\n            </Td>\n            <ValueInput\n              name={name}\n              attribute={attribute}\n              rowIndex={rowIndex}\n              selectableValues={selectableValues}\n              resources={resources}\n            />\n            <Td>\n              <Button\n                id={`${name}-minus-button-${rowIndex}`}\n                variant=\"link\"\n                className=\"kc-attributes__minus-icon\"\n                onClick={() => remove(rowIndex)}\n                aria-label={t(\"common:remove\")}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n        <Tr>\n          <Td>\n            <Button\n              aria-label={t(\"addAttribute\")}\n              id={`${name}-plus-icon`}\n              variant=\"link\"\n              className=\"kc-attributes__plus-icon\"\n              onClick={() => {\n                append({ key: \"\", value: \"\" });\n                setIsKeyOpenArray([...isKeyOpenArray, false]);\n              }}\n              icon={<PlusCircleIcon />}\n              isDisabled={!watchLastValue}\n              data-testid=\"attribute-add-row\"\n            >\n              {t(\"addAttribute\")}\n            </Button>\n          </Td>\n        </Tr>\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  ExpandableSection,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport type ResourceEvaluation from \"@keycloak/keycloak-admin-client/lib/defs/resourceEvaluation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\n\nimport { ClientSelect } from \"../../components/client/ClientSelect\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport {\n  keyValueToArray,\n  KeyValueType,\n} from \"../../components/key-value-form/key-value-convert\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { FormPanel } from \"../../components/scroll-form/FormPanel\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { ForbiddenSection } from \"../../ForbiddenSection\";\nimport { FormFields } from \"../ClientDetails\";\nimport { defaultContextAttributes } from \"../utils\";\nimport { Results } from \"./evaluate/Results\";\nimport { KeyBasedAttributeInput } from \"./KeyBasedAttributeInput\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\n\nimport \"./auth-evaluate.css\";\n\ninterface EvaluateFormInputs\n  extends Omit<ResourceEvaluation, \"context\" | \"resources\"> {\n  alias: string;\n  authScopes: string[];\n  context: {\n    attributes: Record<string, string>[];\n  };\n  resources?: Record<string, string>[];\n  client: FormFields;\n  user: string[];\n}\n\nexport type AttributeType = {\n  key: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n};\n\nexport type AttributeForm = Omit<\n  EvaluateFormInputs,\n  \"context\" | \"resources\"\n> & {\n  context: {\n    attributes?: KeyValueType[];\n  };\n  resources?: KeyValueType[];\n};\n\ntype Props = ClientSettingsProps & EvaluationResultRepresentation;\n\nexport const AuthorizationEvaluate = ({ client }: Props) => {\n  const form = useForm<EvaluateFormInputs>({ mode: \"onChange\" });\n  const {\n    control,\n    register,\n    reset,\n    trigger,\n    formState: { isValid, errors },\n  } = form;\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addError } = useAlerts();\n  const realm = useRealm();\n\n  const [scopesDropdownOpen, setScopesDropdownOpen] = useState(false);\n\n  const [roleDropdownOpen, setRoleDropdownOpen] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [applyToResourceType, setApplyToResourceType] = useState(false);\n  const [resources, setResources] = useState<ResourceRepresentation[]>([]);\n  const [scopes, setScopes] = useState<ScopeRepresentation[]>([]);\n  const [evaluateResult, setEvaluateResult] =\n    useState<PolicyEvaluationResponse>();\n\n  const [clientRoles, setClientRoles] = useState<RoleRepresentation[]>([]);\n\n  const { hasAccess } = useAccess();\n  if (!hasAccess(\"view-users\"))\n    return <ForbiddenSection permissionNeeded=\"view-users\" />;\n\n  useFetch(\n    () => adminClient.roles.find(),\n    (roles) => {\n      setClientRoles(roles);\n    },\n    []\n  );\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listResources({\n          id: client.id!,\n        }),\n        adminClient.clients.listAllScopes({\n          id: client.id!,\n        }),\n      ]),\n    ([resources, scopes]) => {\n      setResources(resources);\n      setScopes(scopes);\n    },\n    []\n  );\n\n  const evaluate = async () => {\n    if (!(await trigger())) {\n      return;\n    }\n    const formValues = form.getValues();\n    const keys = keyValueToArray(formValues.resources as KeyValueType[]);\n    const resEval: ResourceEvaluation = {\n      roleIds: formValues.roleIds ?? [],\n      clientId: formValues.client.id!,\n      userId: formValues.user![0],\n      resources: resources\n        .filter((resource) => Object.keys(keys).includes(resource.name!))\n        .map((r) => ({\n          ...r,\n          scopes: r.scopes?.filter((s) =>\n            Object.values(keys)\n              .flatMap((v) => v)\n              .includes(s.name!)\n          ),\n        })),\n      entitlements: false,\n      context: {\n        attributes: Object.fromEntries(\n          formValues.context.attributes\n            .filter((item) => item.key || item.value !== \"\")\n            .map(({ key, value }) => [key, value])\n        ),\n      },\n    };\n\n    try {\n      const evaluation = await adminClient.clients.evaluateResource(\n        { id: client.id!, realm: realm.realm },\n        resEval\n      );\n\n      setEvaluateResult(evaluation);\n    } catch (error) {\n      addError(\"clients:evaluateError\", error);\n    }\n  };\n\n  const user = useWatch({ control, name: \"user\", defaultValue: [] });\n  const roles = useWatch({ control, name: \"roleIds\", defaultValue: [] });\n\n  if (evaluateResult) {\n    return (\n      <Results\n        evaluateResult={evaluateResult}\n        refresh={evaluate}\n        back={() => setEvaluateResult(undefined)}\n      />\n    );\n  }\n\n  return (\n    <PageSection>\n      <FormProvider {...form}>\n        <FormPanel\n          className=\"kc-identity-information\"\n          title={t(\"clients:identityInformation\")}\n        >\n          <FormAccess isHorizontal role=\"view-clients\">\n            <ClientSelect\n              name=\"client\"\n              label=\"client\"\n              namespace=\"clients\"\n              helpText={\"clients-help:client\"}\n              defaultValue={client.clientId}\n            />\n            <UserSelect\n              name=\"user\"\n              label=\"users\"\n              helpText={t(\"clients-help:selectUser\")}\n              defaultValue={[]}\n              variant={SelectVariant.typeahead}\n              isRequired={roles?.length === 0}\n            />\n            <FormGroup\n              label={t(\"roles\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:roles\")}\n                  fieldLabelId=\"clients:roles\"\n                />\n              }\n              fieldId=\"realmRole\"\n              validated={errors.roleIds ? \"error\" : \"default\"}\n              helperTextInvalid={t(\"common:required\")}\n              isRequired={user.length === 0}\n            >\n              <Controller\n                name=\"roleIds\"\n                control={control}\n                defaultValue={[]}\n                rules={{\n                  validate: (value) =>\n                    (value || \"\").length > 0 || user.length > 0,\n                }}\n                render={({ field }) => (\n                  <Select\n                    placeholderText={t(\"selectARole\")}\n                    variant={SelectVariant.typeaheadMulti}\n                    toggleId=\"role\"\n                    onToggle={setRoleDropdownOpen}\n                    selections={field.value}\n                    onSelect={(_, v) => {\n                      const option = v.toString();\n                      if (field.value?.includes(option)) {\n                        field.onChange(\n                          field.value.filter((item: string) => item !== option)\n                        );\n                      } else {\n                        field.onChange([...(field.value || []), option]);\n                      }\n                      setRoleDropdownOpen(false);\n                    }}\n                    onClear={(event) => {\n                      event.stopPropagation();\n                      field.onChange([]);\n                    }}\n                    aria-label={t(\"realmRole\")}\n                    isOpen={roleDropdownOpen}\n                  >\n                    {clientRoles.map((role) => (\n                      <SelectOption\n                        selected={role.name === field.value}\n                        key={role.name}\n                        value={role.name}\n                      />\n                    ))}\n                  </Select>\n                )}\n              />\n            </FormGroup>\n          </FormAccess>\n        </FormPanel>\n        <FormPanel className=\"kc-permissions\" title={t(\"common:permissions\")}>\n          <FormAccess isHorizontal role=\"view-clients\">\n            <FormGroup\n              label={t(\"applyToResourceType\")}\n              fieldId=\"applyToResourceType\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:applyToResourceType\")}\n                  fieldLabelId=\"clients:applyToResourceType\"\n                />\n              }\n            >\n              <Switch\n                id=\"applyToResource-switch\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                isChecked={applyToResourceType}\n                onChange={setApplyToResourceType}\n                aria-label={t(\"applyToResourceType\")}\n              />\n            </FormGroup>\n\n            {!applyToResourceType ? (\n              <FormGroup\n                label={t(\"resourcesAndScopes\")}\n                id=\"resourcesAndScopes\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"clients-help:contextualAttributes\")}\n                    fieldLabelId={`resourcesAndScopes`}\n                  />\n                }\n                fieldId=\"resourcesAndScopes\"\n              >\n                <KeyBasedAttributeInput\n                  selectableValues={resources.map<AttributeType>((item) => ({\n                    name: item.name!,\n                    key: item._id!,\n                  }))}\n                  resources={resources}\n                  name=\"resources\"\n                />\n              </FormGroup>\n            ) : (\n              <>\n                <FormGroup\n                  label={t(\"resourceType\")}\n                  isRequired\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"clients-help:resourceType\")}\n                      fieldLabelId=\"clients:resourceType\"\n                    />\n                  }\n                  fieldId=\"client\"\n                  validated={errors.alias ? \"error\" : \"default\"}\n                  helperTextInvalid={t(\"common:required\")}\n                >\n                  <KeycloakTextInput\n                    id=\"alias\"\n                    aria-label=\"resource-type\"\n                    data-testid=\"alias\"\n                    {...register(\"alias\", { required: true })}\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t(\"authScopes\")}\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"clients-help:scopesSelect\")}\n                      fieldLabelId=\"clients:client\"\n                    />\n                  }\n                  fieldId=\"authScopes\"\n                >\n                  <Controller\n                    name=\"authScopes\"\n                    defaultValue={[]}\n                    control={control}\n                    render={({ field }) => (\n                      <Select\n                        toggleId=\"authScopes\"\n                        onToggle={setScopesDropdownOpen}\n                        onSelect={(_, v) => {\n                          const option = v.toString();\n                          if (field.value.includes(option)) {\n                            field.onChange(\n                              field.value.filter(\n                                (item: string) => item !== option\n                              )\n                            );\n                          } else {\n                            field.onChange([...field.value, option]);\n                          }\n                          setScopesDropdownOpen(false);\n                        }}\n                        selections={field.value}\n                        variant={SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel={t(\"authScopes\")}\n                        isOpen={scopesDropdownOpen}\n                      >\n                        {scopes.map((scope) => (\n                          <SelectOption\n                            selected={field.value.includes(scope.name!)}\n                            key={scope.id}\n                            value={scope.name}\n                          />\n                        ))}\n                      </Select>\n                    )}\n                  />\n                </FormGroup>\n              </>\n            )}\n            <ExpandableSection\n              toggleText={t(\"contextualInfo\")}\n              onToggle={() => setIsExpanded(!isExpanded)}\n              isExpanded={isExpanded}\n            >\n              <FormGroup\n                label={t(\"contextualAttributes\")}\n                id=\"contextualAttributes\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"clients-help:contextualAttributes\")}\n                    fieldLabelId={`contextualAttributes`}\n                  />\n                }\n                helperTextInvalid={t(\"common:required\")}\n                fieldId=\"contextualAttributes\"\n              >\n                <KeyBasedAttributeInput\n                  selectableValues={defaultContextAttributes}\n                  name=\"context.attributes\"\n                />\n              </FormGroup>\n            </ExpandableSection>\n          </FormAccess>\n          <ActionGroup>\n            <Button\n              data-testid=\"authorization-eval\"\n              id=\"authorization-eval\"\n              className=\"pf-u-mr-md\"\n              isDisabled={!isValid}\n              onClick={() => evaluate()}\n            >\n              {t(\"evaluate\")}\n            </Button>\n            <Button\n              data-testid=\"authorization-revert\"\n              id=\"authorization-revert\"\n              className=\"pf-u-mr-md\"\n              variant=\"link\"\n              onClick={() => reset()}\n            >\n              {t(\"common:revert\")}\n            </Button>\n          </ActionGroup>\n        </FormPanel>\n      </FormProvider>\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\n\nimport \"./authorization-details.css\";\n\nexport const AuthorizationExport = () => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { clientId } = useParams<ClientParams>();\n  const { addAlert, addError } = useAlerts();\n\n  const [code, setCode] = useState<string>();\n  const [authorizationDetails, setAuthorizationDetails] =\n    useState<ResourceServerRepresentation>();\n\n  useFetch(\n    () =>\n      adminClient.clients.exportResource({\n        id: clientId,\n      }),\n\n    (authDetails) => {\n      setCode(JSON.stringify(authDetails, null, 2));\n      setAuthorizationDetails(authDetails);\n    },\n    []\n  );\n\n  const exportAuthDetails = () => {\n    try {\n      saveAs(\n        new Blob([prettyPrintJSON(authorizationDetails)], {\n          type: \"application/json\",\n        }),\n        \"test-authz-config.json\"\n      );\n      addAlert(t(\"exportAuthDetailsSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"exportAuthDetailsError\", error);\n    }\n  };\n\n  if (!code) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection>\n      <FormAccess isHorizontal role=\"view-realm\" className=\"pf-u-mt-lg\">\n        <FormGroup\n          label={t(\"authDetails\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:authDetails\")}\n              fieldLabelId=\"clients:authDetails\"\n            />\n          }\n          fieldId=\"client\"\n        >\n          <KeycloakTextArea\n            id=\"authorizationDetails\"\n            readOnly\n            resizeOrientation=\"vertical\"\n            value={code}\n            aria-label={t(\"authDetails\")}\n          />\n        </FormGroup>\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-export-download\"\n            onClick={() => exportAuthDetails()}\n          >\n            {t(\"common:download\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-export-copy\"\n            variant=\"secondary\"\n            onClick={async () => {\n              try {\n                await navigator.clipboard.writeText(code!);\n                addAlert(t(\"copied\"), AlertVariant.success);\n              } catch (error) {\n                addError(t(\"copyError\"), error);\n              }\n            }}\n          >\n            {t(\"copy\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  Dropdown,\n  DropdownToggle,\n  Form,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./search-dropdown.css\";\n\nexport type SearchForm = {\n  name?: string;\n  resource?: string;\n  scope?: string;\n  type?: string;\n  uri?: string;\n  owner?: string;\n};\n\ntype SearchDropdownProps = {\n  types?: PolicyProviderRepresentation[] | PolicyProviderRepresentation[];\n  search: SearchForm;\n  onSearch: (form: SearchForm) => void;\n  isResource?: boolean;\n};\n\nexport const SearchDropdown = ({\n  types,\n  search,\n  onSearch,\n  isResource = false,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    control,\n    reset,\n    formState: { isDirty },\n    handleSubmit,\n  } = useForm<SearchForm>({ mode: \"onChange\" });\n\n  const [open, toggle] = useToggle();\n  const [typeOpen, toggleType] = useToggle();\n\n  const submit = (form: SearchForm) => {\n    toggle();\n    onSearch(form);\n  };\n\n  useEffect(() => reset(search), [search]);\n\n  const typeOptions = (value?: string) => [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"allTypes\")}\n    </SelectOption>,\n    ...(types || []).map((type) => (\n      <SelectOption\n        selected={type.type === value}\n        key={type.type}\n        value={type.type}\n      >\n        {type.name}\n      </SelectOption>\n    )),\n  ];\n\n  return (\n    <Dropdown\n      data-testid=\"searchdropdown_dorpdown\"\n      className=\"pf-u-ml-md\"\n      toggle={\n        <DropdownToggle\n          onToggle={toggle}\n          className=\"keycloak__client_authentication__searchdropdown\"\n        >\n          {t(\"searchForPermission\")}\n        </DropdownToggle>\n      }\n      isOpen={open}\n    >\n      <Form\n        isHorizontal\n        className=\"keycloak__client_authentication__searchdropdown_form\"\n        onSubmit={handleSubmit(submit)}\n      >\n        <FormGroup label={t(\"common:name\")} fieldId=\"name\">\n          <KeycloakTextInput\n            id=\"name\"\n            data-testid=\"searchdropdown_name\"\n            {...register(\"name\")}\n          />\n        </FormGroup>\n        {isResource && (\n          <>\n            <FormGroup label={t(\"common:type\")} fieldId=\"type\">\n              <KeycloakTextInput\n                id=\"type\"\n                data-testid=\"searchdropdown_type\"\n                {...register(\"type\")}\n              />\n            </FormGroup>\n            <FormGroup label={t(\"uris\")} fieldId=\"uri\">\n              <KeycloakTextInput\n                id=\"uri\"\n                data-testid=\"searchdropdown_uri\"\n                {...register(\"uri\")}\n              />\n            </FormGroup>\n            <FormGroup label={t(\"owner\")} fieldId=\"owner\">\n              <KeycloakTextInput\n                id=\"owner\"\n                data-testid=\"searchdropdown_owner\"\n                {...register(\"owner\")}\n              />\n            </FormGroup>\n          </>\n        )}\n        {!isResource && (\n          <FormGroup label={t(\"resource\")} fieldId=\"resource\">\n            <KeycloakTextInput\n              id=\"resource\"\n              data-testid=\"searchdropdown_resource\"\n              {...register(\"resource\")}\n            />\n          </FormGroup>\n        )}\n        <FormGroup label={t(\"scope\")} fieldId=\"scope\">\n          <KeycloakTextInput\n            id=\"scope\"\n            data-testid=\"searchdropdown_scope\"\n            {...register(\"scope\")}\n          />\n        </FormGroup>\n        {!isResource && (\n          <FormGroup label={t(\"common:type\")} fieldId=\"type\">\n            <Controller\n              name=\"type\"\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"type\"\n                  onToggle={toggleType}\n                  onSelect={(event, value) => {\n                    event.stopPropagation();\n                    field.onChange(value);\n                    toggleType();\n                  }}\n                  selections={field.value || t(\"allTypes\")}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"common:type\")}\n                  isOpen={typeOpen}\n                >\n                  {typeOptions(field.value)}\n                </Select>\n              )}\n            />\n          </FormGroup>\n        )}\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"search-btn\"\n            isDisabled={!isDirty}\n          >\n            {t(\"common:search\")}\n          </Button>\n          <Button\n            variant=\"link\"\n            data-testid=\"revert-btn\"\n            onClick={() => onSearch({})}\n          >\n            {t(\"common:clear\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </Dropdown>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Label } from \"@patternfly/react-core\";\n\ntype MoreLabelProps = {\n  array: unknown[] | undefined;\n};\n\nexport const MoreLabel = ({ array }: MoreLabelProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  if (!array || array.length <= 1) {\n    return null;\n  }\n  return (\n    <Label color=\"blue\">{t(\"common:more\", { count: array.length - 1 })}</Label>\n  );\n};\n","import {\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, Path } from \"react-router-dom\";\n\ntype DetailDescriptionProps<T> = {\n  name: string;\n  array?: string[] | T[];\n  convert?: (obj: T) => string;\n};\n\nexport function DetailDescription<T>(props: DetailDescriptionProps<T>) {\n  return <DetailDescriptionLink {...props} />;\n}\n\ntype DetailDescriptionLinkProps<T> = DetailDescriptionProps<T> & {\n  link?: (element: T) => Partial<Path>;\n};\n\nexport function DetailDescriptionLink<T>({\n  name,\n  array,\n  convert,\n  link,\n}: DetailDescriptionLinkProps<T>) {\n  const { t } = useTranslation(\"clients\");\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTerm>{t(name)}</DescriptionListTerm>\n      <DescriptionListDescription>\n        {array?.map((element) => {\n          const value =\n            typeof element === \"string\" ? element : convert!(element);\n          return link ? (\n            <Link key={value} to={link(element as T)} className=\"pf-u-pr-sm\">\n              {value}\n            </Link>\n          ) : (\n            <span key={value} className=\"pf-u-pr-sm\">\n              {value}\n            </span>\n          );\n        })}\n        {array?.length === 0 && <i>{t(\"common:none\")}</i>}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n}\n","import { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  Button,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\n\nimport { PermissionType, toNewPermission } from \"../routes/NewPermission\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\n\ntype EmptyButtonProps = {\n  permissionType: PermissionType;\n  disabled?: boolean;\n  clientId: string;\n};\n\nconst EmptyButton = ({\n  permissionType,\n  disabled = false,\n  clientId,\n}: EmptyButtonProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  return (\n    <Button\n      data-testid={`create-${permissionType}`}\n      className={\n        disabled ? \"keycloak__permissions__empty_state \" : \"\" + \"pf-u-m-sm\"\n      }\n      variant=\"secondary\"\n      onClick={() =>\n        !disabled &&\n        navigate(toNewPermission({ realm, id: clientId, permissionType }))\n      }\n    >\n      {t(`create${toUpperCase(permissionType)}BasedPermission`)}\n    </Button>\n  );\n};\n\nconst TooltipEmptyButton = ({\n  permissionType,\n  disabled,\n  ...props\n}: EmptyButtonProps) => {\n  const { t } = useTranslation(\"clients\");\n  return disabled ? (\n    <Tooltip content={t(`no${toUpperCase(permissionType)}CreateHint`)}>\n      <EmptyButton\n        {...props}\n        disabled={disabled}\n        permissionType={permissionType}\n      />\n    </Tooltip>\n  ) : (\n    <EmptyButton\n      {...props}\n      disabled={disabled}\n      permissionType={permissionType}\n    />\n  );\n};\n\ntype EmptyPermissionsStateProps = {\n  clientId: string;\n  isResourceEnabled?: boolean;\n  isScopeEnabled?: boolean;\n};\n\nexport const EmptyPermissionsState = ({\n  clientId,\n  isResourceEnabled,\n  isScopeEnabled,\n}: EmptyPermissionsStateProps) => {\n  const { t } = useTranslation(\"clients\");\n  return (\n    <EmptyState data-testid=\"empty-state\" variant=\"large\">\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        {t(\"emptyPermissions\")}\n      </Title>\n      <EmptyStateBody>{t(\"emptyPermissionInstructions\")}</EmptyStateBody>\n      <TooltipEmptyButton\n        permissionType=\"resource\"\n        disabled={isResourceEnabled}\n        clientId={clientId}\n      />\n      <br />\n      <TooltipEmptyButton\n        permissionType=\"scope\"\n        disabled={isScopeEnabled}\n        clientId={clientId}\n      />\n    </EmptyState>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  AlertVariant,\n  ButtonVariant,\n  DescriptionList,\n  Dropdown,\n  DropdownItem,\n  DropdownSeparator,\n  DropdownToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport useToggle from \"../../utils/useToggle\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { EmptyPermissionsState } from \"./EmptyPermissionsState\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\n\nimport \"./permissions.css\";\n\ntype PermissionsProps = {\n  clientId: string;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  associatedPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst AssociatedPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.associatedPolicies?.[0]?.name}{\" \"}\n      <MoreLabel array={row.associatedPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPermissions = ({ clientId }: PermissionsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [permissions, setPermissions] =\n    useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPermission, setSelectedPermission] =\n    useState<PolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n  const [disabledCreate, setDisabledCreate] = useState<{\n    resources: boolean;\n    scopes: boolean;\n  }>();\n  const [createOpen, toggleCreate] = useToggle();\n  const [search, setSearch] = useState<SearchForm>({});\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n\n  useFetch(\n    async () => {\n      const permissions = await adminClient.clients.findPermissions({\n        first,\n        max: max + 1,\n        id: clientId,\n        ...search,\n      });\n\n      return await Promise.all(\n        permissions.map(async (permission) => {\n          const associatedPolicies =\n            await adminClient.clients.getAssociatedPolicies({\n              id: clientId,\n              permissionId: permission.id!,\n            });\n\n          return {\n            ...permission,\n            associatedPolicies,\n            isExpanded: false,\n          };\n        })\n      );\n    },\n    setPermissions,\n    [key, search, first, max]\n  );\n\n  useFetch(\n    async () => {\n      const params = {\n        first: 0,\n        max: 1,\n      };\n      const [policies, resources, scopes] = await Promise.all([\n        adminClient.clients.listPolicyProviders({\n          id: clientId,\n        }),\n        adminClient.clients.listResources({ ...params, id: clientId }),\n        adminClient.clients.listAllScopes({ ...params, id: clientId }),\n      ]);\n      return {\n        policies: policies.filter(\n          (p) => p.type === \"resource\" || p.type === \"scope\"\n        ),\n        resources: resources.length !== 1,\n        scopes: scopes.length !== 1,\n      };\n    },\n    ({ policies, resources, scopes }) => {\n      setPolicyProviders(policies);\n      setDisabledCreate({ resources, scopes });\n    },\n    []\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:deletePermission\",\n    messageKey: t(\"deletePermissionConfirm\", {\n      permission: selectedPermission?.name,\n    }),\n    continueButtonVariant: ButtonVariant.danger,\n    continueButtonLabel: \"clients:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPermission({\n          id: clientId,\n          type: selectedPermission?.type!,\n          permissionId: selectedPermission?.id!,\n        });\n        addAlert(t(\"permissionDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:permissionDeletedError\", error);\n      }\n    },\n  });\n\n  if (!permissions) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = permissions.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={permissions.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  types={policyProviders}\n                  search={search}\n                  onSearch={setSearch}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  toggle={\n                    <DropdownToggle\n                      onToggle={toggleCreate}\n                      isPrimary\n                      data-testid=\"permissionCreateDropdown\"\n                    >\n                      {t(\"createPermission\")}\n                    </DropdownToggle>\n                  }\n                  isOpen={createOpen}\n                  dropdownItems={[\n                    <DropdownItem\n                      data-testid=\"create-resource\"\n                      key=\"createResourceBasedPermission\"\n                      isDisabled={disabledCreate?.resources}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"resource\",\n                          })\n                        )\n                      }\n                    >\n                      {t(\"createResourceBasedPermission\")}\n                    </DropdownItem>,\n                    <DropdownSeparator key=\"separator\" />,\n                    <DropdownItem\n                      data-testid=\"create-scope\"\n                      key=\"createScopeBasedPermission\"\n                      isDisabled={disabledCreate?.scopes}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"scope\",\n                          })\n                        )\n                      }\n                    >\n                      {t(\"createScopeBasedPermission\")}\n                      {disabledCreate?.scopes && (\n                        <Alert\n                          className=\"pf-u-mt-sm\"\n                          variant=\"warning\"\n                          isInline\n                          isPlain\n                          title={t(\"noScopeCreateHint\")}\n                        />\n                      )}\n                    </DropdownItem>,\n                  ]}\n                />\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <TableComposable aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th />\n                  <Th>{t(\"common:name\")}</Th>\n                  <Th>{t(\"common:type\")}</Th>\n                  <Th>{t(\"associatedPolicy\")}</Th>\n                  <Th>{t(\"common:description\")}</Th>\n                  <Th />\n                </Tr>\n              </Thead>\n              {permissions.map((permission, rowIndex) => (\n                <Tbody key={permission.id} isExpanded={permission.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: permission.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = permissions.map((p, index) =>\n                            index === rowIndex\n                              ? { ...p, isExpanded: !p.isExpanded }\n                              : p\n                          );\n                          setPermissions(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${permission.name}`}>\n                      <Link\n                        to={toPermissionDetails({\n                          realm,\n                          id: clientId,\n                          permissionType: permission.type!,\n                          permissionId: permission.id!,\n                        })}\n                      >\n                        {permission.name}\n                      </Link>\n                    </Td>\n                    <Td>\n                      {\n                        policyProviders?.find((p) => p.type === permission.type)\n                          ?.name\n                      }\n                    </Td>\n                    <Td>\n                      <AssociatedPoliciesRenderer row={permission} />\n                    </Td>\n                    <Td>{permission.description}</Td>\n                    <Td\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"common:delete\"),\n                            onClick: async () => {\n                              setSelectedPermission(permission);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    ></Td>\n                  </Tr>\n                  <Tr\n                    key={`child-${permission.id}`}\n                    isExpanded={permission.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={5}>\n                      <ExpandableRowContent>\n                        {permission.isExpanded && (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"associatedPolicy\"\n                              array={permission.associatedPolicies}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPolicyDetails({\n                                  id: clientId,\n                                  realm,\n                                  policyId: p.id!,\n                                  policyType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </TableComposable>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <EmptyPermissionsState\n          clientId={clientId}\n          isResourceEnabled={disabledCreate?.resources}\n          isScopeEnabled={disabledCreate?.scopes}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"common:noSearchResults\")}\n          instructions={t(\"common:noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { isValidComponentType } from \"./policy/PolicyDetails\";\nimport { useMemo } from \"react\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\n\ntype NewPolicyDialogProps = {\n  policyProviders?: PolicyProviderRepresentation[];\n  toggleDialog: () => void;\n  onSelect: (provider: PolicyProviderRepresentation) => void;\n};\n\nexport const NewPolicyDialog = ({\n  policyProviders,\n  onSelect,\n  toggleDialog,\n}: NewPolicyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const localeSort = useLocaleSort();\n\n  const sortedPolicies = useMemo(\n    () =>\n      policyProviders ? localeSort(policyProviders, mapByKey(\"name\")) : [],\n    [policyProviders]\n  );\n\n  return (\n    <Modal\n      aria-labelledby={t(\"addPredefinedMappers\")}\n      variant={ModalVariant.medium}\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"chooseAPolicyType\")}</Text>\n          <Text>{t(\"chooseAPolicyTypeInstructions\")}</Text>\n        </TextContent>\n      }\n      isOpen\n      onClose={toggleDialog}\n    >\n      <TableComposable aria-label={t(\"policies\")} variant=\"compact\">\n        <Thead>\n          <Tr>\n            <Th>{t(\"common:name\")}</Th>\n            <Th>{t(\"common:description\")}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {sortedPolicies.map((provider) => (\n            <Tr\n              key={provider.type}\n              data-testid={provider.type}\n              onRowClick={() => onSelect(provider)}\n              isHoverable\n            >\n              <Td>{provider.name}</Td>\n              <Td>\n                {isValidComponentType(provider.type!) &&\n                  t(`policyProvider.${provider.type}`)}\n              </Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { toUpperCase } from \"../../util\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport useToggle from \"../../utils/useToggle\";\nimport { NewPolicyDialog } from \"./NewPolicyDialog\";\nimport { toCreatePolicy } from \"../routes/NewPolicy\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\n\ntype PoliciesProps = {\n  clientId: string;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  dependentPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst DependentPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.dependentPolicies?.[0]?.name}{\" \"}\n      <MoreLabel array={row.dependentPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPolicies = ({ clientId }: PoliciesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n\n  const [policies, setPolicies] = useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ExpandablePolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n  const [newDialog, toggleDialog] = useToggle();\n\n  useFetch(\n    async () => {\n      const policies = await adminClient.clients.listPolicies({\n        first,\n        max: max + 1,\n        id: clientId,\n        permission: \"false\",\n        ...search,\n      });\n\n      return await Promise.all([\n        adminClient.clients.listPolicyProviders({ id: clientId }),\n        ...(policies || []).map(async (policy) => {\n          const dependentPolicies =\n            await adminClient.clients.listDependentPolicies({\n              id: clientId,\n              policyId: policy.id!,\n            });\n\n          return {\n            ...policy,\n            dependentPolicies,\n            isExpanded: false,\n          };\n        }),\n      ]);\n    },\n    ([providers, ...policies]) => {\n      setPolicyProviders(\n        providers.filter((p) => p.type !== \"resource\" && p.type !== \"scope\")\n      );\n      setPolicies(policies);\n    },\n    [key, search, first, max]\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:deletePolicy\",\n    children: (\n      <>\n        {t(\"deletePolicyConfirm\")}\n        {selectedPolicy?.dependentPolicies &&\n          selectedPolicy.dependentPolicies.length > 0 && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\"deletePolicyWarning\")}\n              className=\"pf-u-pt-lg\"\n            >\n              <p className=\"pf-u-pt-xs\">\n                {selectedPolicy.dependentPolicies.map((policy) => (\n                  <strong key={policy.id} className=\"pf-u-pr-md\">\n                    {policy.name}\n                  </strong>\n                ))}\n              </p>\n            </Alert>\n          )}\n      </>\n    ),\n    continueButtonLabel: \"clients:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPolicy({\n          id: clientId,\n          policyId: selectedPolicy?.id!,\n        });\n        addAlert(t(\"policyDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:policyDeletedError\", error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = policies.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! })\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n\n          <PaginatingTableToolbar\n            count={policies.length}\n            first={first}\n            max={max}\n            onNextClick={setFirst}\n            onPreviousClick={setFirst}\n            onPerPageSelect={(first, max) => {\n              setFirst(first);\n              setMax(max);\n            }}\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <SearchDropdown\n                    types={policyProviders}\n                    search={search}\n                    onSearch={setSearch}\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button data-testid=\"createPolicy\" onClick={toggleDialog}>\n                    {t(\"createPolicy\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n          >\n            {!noData && (\n              <TableComposable aria-label={t(\"resources\")} variant=\"compact\">\n                <Thead>\n                  <Tr>\n                    <Th />\n                    <Th>{t(\"common:name\")}</Th>\n                    <Th>{t(\"common:type\")}</Th>\n                    <Th>{t(\"dependentPermission\")}</Th>\n                    <Th>{t(\"common:description\")}</Th>\n                    <Th />\n                  </Tr>\n                </Thead>\n                {policies.map((policy, rowIndex) => (\n                  <Tbody key={policy.id} isExpanded={policy.isExpanded}>\n                    <Tr>\n                      <Td\n                        expand={{\n                          rowIndex,\n                          isExpanded: policy.isExpanded,\n                          onToggle: (_, rowIndex) => {\n                            const rows = policies.map((policy, index) =>\n                              index === rowIndex\n                                ? { ...policy, isExpanded: !policy.isExpanded }\n                                : policy\n                            );\n                            setPolicies(rows);\n                          },\n                        }}\n                      />\n                      <Td data-testid={`name-column-${policy.name}`}>\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: policy.type!,\n                            policyId: policy.id!,\n                          })}\n                        >\n                          {policy.name}\n                        </Link>\n                      </Td>\n                      <Td>{toUpperCase(policy.type!)}</Td>\n                      <Td>\n                        <DependentPoliciesRenderer row={policy} />\n                      </Td>\n                      <Td>{policy.description}</Td>\n                      <Td\n                        actions={{\n                          items: [\n                            {\n                              title: t(\"common:delete\"),\n                              onClick: async () => {\n                                setSelectedPolicy(policy);\n                                toggleDeleteDialog();\n                              },\n                            },\n                          ],\n                        }}\n                      />\n                    </Tr>\n                    <Tr\n                      key={`child-${policy.id}`}\n                      isExpanded={policy.isExpanded}\n                    >\n                      <Td />\n                      <Td colSpan={4}>\n                        <ExpandableRowContent>\n                          {policy.isExpanded && (\n                            <DescriptionList\n                              isHorizontal\n                              className=\"keycloak_resource_details\"\n                            >\n                              <DetailDescriptionLink\n                                name=\"dependentPermission\"\n                                array={policy.dependentPolicies}\n                                convert={(p) => p.name!}\n                                link={(permission) =>\n                                  toPermissionDetails({\n                                    realm,\n                                    id: clientId,\n                                    permissionId: permission.id!,\n                                    permissionType: permission.type!,\n                                  })\n                                }\n                              />\n                            </DescriptionList>\n                          )}\n                        </ExpandableRowContent>\n                      </Td>\n                    </Tr>\n                  </Tbody>\n                ))}\n              </TableComposable>\n            )}\n          </PaginatingTableToolbar>\n        </>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"common:noSearchResults\")}\n          instructions={t(\"common:noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders?.filter(\n                (p) => p.type !== \"aggregate\"\n              )}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! })\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n          <ListEmptyState\n            message={t(\"emptyPolicies\")}\n            instructions={t(\"emptyPoliciesInstructions\")}\n            primaryActionText={t(\"createPolicy\")}\n            onPrimaryAction={toggleDialog}\n          />\n        </>\n      )}\n    </PageSection>\n  );\n};\n","import { useState } from \"react\";\nimport { DescriptionList } from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { DetailDescription, DetailDescriptionLink } from \"./DetailDescription\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\n\nimport \"./detail-cell.css\";\n\ntype Scope = { id: string; name: string }[];\n\ntype DetailCellProps = {\n  id: string;\n  clientId: string;\n  uris?: string[];\n};\n\nexport const DetailCell = ({ id, clientId, uris }: DetailCellProps) => {\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const [scope, setScope] = useState<Scope>();\n  const [permissions, setPermissions] =\n    useState<ResourceServerRepresentation[]>();\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listScopesByResource({\n          id: clientId,\n          resourceName: id,\n        }),\n        adminClient.clients.listPermissionsByResource({\n          id: clientId,\n          resourceId: id,\n        }),\n      ]),\n    ([scopes, permissions]) => {\n      setScope(scopes);\n      setPermissions(permissions);\n    },\n    []\n  );\n\n  if (!permissions || !scope) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DescriptionList isHorizontal className=\"keycloak_resource_details\">\n      <DetailDescription name=\"uris\" array={uris} />\n      <DetailDescriptionLink\n        name=\"scopes\"\n        array={scope}\n        convert={(s) => s.name}\n        link={(scope) =>\n          toScopeDetails({ id: clientId, realm, scopeId: scope.id! })\n        }\n      />\n      <DetailDescriptionLink\n        name=\"associatedPermissions\"\n        array={permissions}\n        convert={(p) => p.name!}\n        link={(permission) =>\n          toPermissionDetails({\n            id: clientId,\n            realm,\n            permissionId: permission.id!,\n            permissionType: \"resource\",\n          })\n        }\n      />\n    </DescriptionList>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { DetailCell } from \"./DetailCell\";\nimport { toCreateResource } from \"../routes/NewResource\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\ntype ResourcesProps = {\n  clientId: string;\n};\n\ntype ExpandableResourceRepresentation = ResourceRepresentation & {\n  isExpanded: boolean;\n};\n\nconst UriRenderer = ({ row }: { row: ResourceRepresentation }) => (\n  <>\n    {row.uris?.[0]} <MoreLabel array={row.uris} />\n  </>\n);\n\nexport const AuthorizationResources = ({ clientId }: ResourcesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [resources, setResources] =\n    useState<ExpandableResourceRepresentation[]>();\n  const [selectedResource, setSelectedResource] =\n    useState<ResourceRepresentation>();\n  const [permissions, setPermission] =\n    useState<ResourceServerRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        ...search,\n      };\n      return adminClient.clients.listResources({\n        ...params,\n        id: clientId,\n      });\n    },\n    (resources) =>\n      setResources(\n        resources.map((resource) => ({ ...resource, isExpanded: false }))\n      ),\n    [key, search, first, max]\n  );\n\n  const fetchPermissions = async (id: string) => {\n    return adminClient.clients.listPermissionsByResource({\n      id: clientId,\n      resourceId: id,\n    });\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:deleteResource\",\n    children: (\n      <>\n        {t(\"deleteResourceConfirm\")}\n        {permissions?.length && (\n          <Alert\n            variant=\"warning\"\n            isInline\n            isPlain\n            title={t(\"deleteResourceWarning\")}\n            className=\"pf-u-pt-lg\"\n          >\n            <p className=\"pf-u-pt-xs\">\n              {permissions.map((permission) => (\n                <strong key={permission.id} className=\"pf-u-pr-md\">\n                  {permission.name}\n                </strong>\n              ))}\n            </p>\n          </Alert>\n        )}\n      </>\n    ),\n    continueButtonLabel: \"clients:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delResource({\n          id: clientId,\n          resourceId: selectedResource?._id!,\n        });\n        addAlert(t(\"resourceDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:resourceDeletedError\", error);\n      }\n    },\n  });\n\n  if (!resources) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = resources.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={resources.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  search={search}\n                  onSearch={setSearch}\n                  isResource\n                />\n              </ToolbarItem>\n\n              <ToolbarItem>\n                <Button\n                  data-testid=\"createResource\"\n                  component={(props) => (\n                    <Link\n                      {...props}\n                      to={toCreateResource({ realm, id: clientId })}\n                    />\n                  )}\n                >\n                  {t(\"createResource\")}\n                </Button>\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <TableComposable aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th />\n                  <Th>{t(\"common:name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th>{t(\"common:type\")}</Th>\n                  <Th>{t(\"owner\")}</Th>\n                  <Th>{t(\"uris\")}</Th>\n                  <Th />\n                  <Th />\n                </Tr>\n              </Thead>\n              {resources.map((resource, rowIndex) => (\n                <Tbody key={resource._id} isExpanded={resource.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: resource.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = resources.map((resource, index) =>\n                            index === rowIndex\n                              ? {\n                                  ...resource,\n                                  isExpanded: !resource.isExpanded,\n                                }\n                              : resource\n                          );\n                          setResources(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${resource.name}`}>\n                      <Link\n                        to={toResourceDetails({\n                          realm,\n                          id: clientId,\n                          resourceId: resource._id!,\n                        })}\n                      >\n                        {resource.name}\n                      </Link>\n                    </Td>\n                    <Td>{resource.displayName}</Td>\n                    <Td>{resource.type}</Td>\n                    <Td>{resource.owner?.name}</Td>\n                    <Td>\n                      <UriRenderer row={resource} />\n                    </Td>\n                    <Td width={10}>\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toNewPermission({\n                              realm,\n                              id: clientId,\n                              permissionType: \"resource\",\n                              selectedId: resource._id,\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"createPermission\")}\n                      </Button>\n                    </Td>\n                    <Td\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"common:delete\"),\n                            onClick: async () => {\n                              setSelectedResource(resource);\n                              setPermission(\n                                await fetchPermissions(resource._id!)\n                              );\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    />\n                  </Tr>\n                  <Tr\n                    key={`child-${resource._id}`}\n                    isExpanded={resource.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {resource.isExpanded && (\n                          <DetailCell\n                            clientId={clientId}\n                            id={resource._id!}\n                            uris={resource.uris}\n                          />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </TableComposable>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"common:noSearchResults\")}\n          instructions={t(\"common:noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyResources\")}\n          instructions={t(\"emptyResourcesInstructions\")}\n          primaryActionText={t(\"createResource\")}\n          onPrimaryAction={() =>\n            navigate(toCreateResource({ realm, id: clientId }))\n          }\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\n\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { toNewScope } from \"../routes/NewScope\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport useToggle from \"../../utils/useToggle\";\nimport { DeleteScopeDialog } from \"./DeleteScopeDialog\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\n\ntype ScopesProps = {\n  clientId: string;\n};\n\nexport type PermissionScopeRepresentation = ScopeRepresentation & {\n  permissions?: PolicyRepresentation[];\n  isLoaded: boolean;\n};\n\ntype ExpandableRow = {\n  id: string;\n  isExpanded: boolean;\n};\n\nexport const AuthorizationScopes = ({ clientId }: ScopesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const [deleteDialog, toggleDeleteDialog] = useToggle();\n  const [scopes, setScopes] = useState<PermissionScopeRepresentation[]>();\n  const [selectedScope, setSelectedScope] =\n    useState<PermissionScopeRepresentation>();\n  const [collapsed, setCollapsed] = useState<ExpandableRow[]>([]);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        name: search,\n      };\n      return adminClient.clients.listAllScopes({\n        ...params,\n        id: clientId,\n      });\n    },\n    (scopes) => {\n      setScopes(scopes.map((s) => ({ ...s, isLoaded: false })));\n      setCollapsed(scopes.map((s) => ({ id: s.id!, isExpanded: false })));\n    },\n    [key, search, first, max]\n  );\n\n  const getScope = (id: string) => scopes?.find((scope) => scope.id === id)!;\n  const isExpanded = (id: string | undefined) =>\n    collapsed.find((c) => c.id === id)?.isExpanded || false;\n\n  useFetch(\n    () => {\n      const newlyOpened = collapsed\n        .filter((row) => row.isExpanded)\n        .map(({ id }) => getScope(id))\n        .filter((s) => !s.isLoaded);\n\n      return Promise.all(\n        newlyOpened.map(async (scope) => {\n          const [resources, permissions] = await Promise.all([\n            adminClient.clients.listAllResourcesByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n            adminClient.clients.listAllPermissionsByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n          ]);\n\n          return {\n            ...scope,\n            resources,\n            permissions,\n            isLoaded: true,\n          };\n        })\n      );\n    },\n    (resourcesScopes) => {\n      let result = [...(scopes || [])];\n      resourcesScopes.forEach((resourceScope) => {\n        const index = scopes?.findIndex(\n          (scope) => resourceScope.id === scope.id\n        )!;\n        result = [\n          ...result.slice(0, index),\n          resourceScope,\n          ...result.slice(index + 1),\n        ];\n      });\n\n      setScopes(result);\n    },\n    [collapsed]\n  );\n\n  if (!scopes) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = scopes.length === 0;\n  const searching = search !== \"\";\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteScopeDialog\n        clientId={clientId}\n        open={deleteDialog}\n        toggleDialog={toggleDeleteDialog}\n        selectedScope={selectedScope}\n        refresh={refresh}\n      />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={scopes.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          inputGroupName=\"search\"\n          inputGroupPlaceholder={t(\"searchByName\")}\n          inputGroupOnEnter={setSearch}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                data-testid=\"createAuthorizationScope\"\n                component={(props) => (\n                  <Link {...props} to={toNewScope({ realm, id: clientId })} />\n                )}\n              >\n                {t(\"createAuthorizationScope\")}\n              </Button>\n            </ToolbarItem>\n          }\n        >\n          {!noData && (\n            <TableComposable aria-label={t(\"scopes\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th />\n                  <Th>{t(\"common:name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th />\n                  <Th />\n                </Tr>\n              </Thead>\n              {scopes.map((scope, rowIndex) => (\n                <Tbody key={scope.id} isExpanded={isExpanded(scope.id)}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: isExpanded(scope.id),\n                        onToggle: (_event, index, isExpanded) => {\n                          setCollapsed([\n                            ...collapsed.slice(0, index),\n                            { id: scope.id!, isExpanded },\n                            ...collapsed.slice(index + 1),\n                          ]);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${scope.name}`}>\n                      <Link\n                        to={toScopeDetails({\n                          realm,\n                          id: clientId,\n                          scopeId: scope.id!,\n                        })}\n                      >\n                        {scope.name}\n                      </Link>\n                    </Td>\n                    <Td>{scope.displayName}</Td>\n                    <Td width={10}>\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toNewPermission({\n                              realm,\n                              id: clientId,\n                              permissionType: \"scope\",\n                              selectedId: scope.id,\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"createPermission\")}\n                      </Button>\n                    </Td>\n                    <Td\n                      isActionCell\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"common:delete\"),\n                            onClick: () => {\n                              setSelectedScope(scope);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    />\n                  </Tr>\n                  <Tr\n                    key={`child-${scope.id}`}\n                    isExpanded={isExpanded(scope.id)}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {isExpanded(scope.id) && scope.isLoaded ? (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"resources\"\n                              array={scope.resources}\n                              convert={(r) => r.name!}\n                              link={(r) =>\n                                toResourceDetails({\n                                  id: clientId,\n                                  realm,\n                                  resourceId: r._id!,\n                                })\n                              }\n                            />\n                            <DetailDescriptionLink\n                              name=\"associatedPermissions\"\n                              array={scope.permissions}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPermissionDetails({\n                                  id: clientId,\n                                  realm,\n                                  permissionId: p.id!,\n                                  permissionType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        ) : (\n                          <KeycloakSpinner />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </TableComposable>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyAuthorizationScopes\")}\n          instructions={t(\"emptyAuthorizationInstructions\")}\n          onPrimaryAction={() => navigate(toNewScope({ id: clientId, realm }))}\n          primaryActionText={t(\"createAuthorizationScope\")}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"common:noSearchResults\")}\n          instructions={t(\"common:noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { ActionGroup, ActionGroupProps, Button } from \"@patternfly/react-core\";\n\ntype SaveResetProps = ActionGroupProps & {\n  name: string;\n  save?: () => void;\n  reset: () => void;\n  isActive?: boolean;\n};\n\nexport const SaveReset = ({\n  name,\n  save,\n  reset,\n  isActive = true,\n  ...rest\n}: SaveResetProps) => {\n  const { t } = useTranslation(\"common\");\n  return (\n    <ActionGroup {...rest}>\n      <Button\n        isDisabled={!isActive}\n        data-testid={name + \"Save\"}\n        onClick={save}\n        type={save ? \"button\" : \"submit\"}\n      >\n        {t(\"save\")}\n      </Button>\n      <Button\n        isDisabled={!isActive}\n        data-testid={name + \"Revert\"}\n        variant=\"link\"\n        onClick={reset}\n      >\n        {t(\"revert\")}\n      </Button>\n    </ActionGroup>\n  );\n};\n","import { Fragment, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  FormGroup,\n  Modal,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { JsonFileUpload } from \"../../components/json-file-upload/JsonFileUpload\";\nimport { HelpItem } from \"ui-shared\";\n\ntype ImportDialogProps = {\n  onConfirm: (value: ResourceServerRepresentation) => void;\n  closeDialog: () => void;\n};\n\nexport const ImportDialog = ({ onConfirm, closeDialog }: ImportDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [imported, setImported] = useState<ResourceServerRepresentation>({});\n  return (\n    <Modal\n      title={t(\"import\")}\n      isOpen\n      variant=\"small\"\n      onClose={closeDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            onConfirm(imported);\n            closeDialog();\n          }}\n          data-testid=\"confirm\"\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            closeDialog();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form>\n        <JsonFileUpload id=\"import-resource\" onChange={setImported} />\n      </Form>\n      {Object.keys(imported).length !== 0 && (\n        <>\n          <Divider />\n          <p className=\"pf-u-my-lg\">{t(\"importResources\")}</p>\n          <Form isHorizontal>\n            <FormGroup\n              label={t(\"policyEnforcementMode\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:policyEnforcementMode\")}\n                  fieldLabelId=\"clients:policyEnforcementMode\"\n                />\n              }\n              fieldId=\"policyEnforcementMode\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"policyEnforcementMode\"\n                name=\"policyEnforcementMode\"\n                label={t(\n                  `policyEnforcementModes.${imported.policyEnforcementMode}`\n                )}\n                isChecked\n                isDisabled\n                className=\"pf-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"decisionStrategy\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:decisionStrategy\")}\n                  fieldLabelId=\"clients:decisionStrategy\"\n                />\n              }\n              fieldId=\"decisionStrategy\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"decisionStrategy\"\n                name=\"decisionStrategy\"\n                isChecked\n                isDisabled\n                label={t(`decisionStrategies.${imported.decisionStrategy}`)}\n                className=\"pf-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"allowRemoteResourceManagement\")}\n              fieldId=\"allowRemoteResourceManagement\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"allowRemoteResourceManagement\")}\n                  fieldLabelId=\"clients:allowRemoteResourceManagement\"\n                />\n              }\n            >\n              <Switch\n                id=\"allowRemoteResourceManagement\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                isChecked={imported.allowRemoteResourceManagement}\n                isDisabled\n                aria-label={t(\"allowRemoteResourceManagement\")}\n              />\n            </FormGroup>\n          </Form>\n          <div className=\"pf-u-mt-md\">\n            {Object.entries(imported)\n              .filter(([, value]) => Array.isArray(value))\n              .map(([key, value]) => (\n                <Fragment key={key}>\n                  <Divider />\n                  <p className=\"pf-u-my-sm\">\n                    <strong>\n                      {value.length} {t(key)}\n                    </strong>\n                  </p>\n                </Fragment>\n              ))}\n          </div>\n          <Divider />\n          <Alert\n            variant=\"warning\"\n            className=\"pf-u-mt-lg\"\n            isInline\n            title={t(\"importWarning\")}\n          />\n        </>\n      )}\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport {\n  AlertVariant,\n  Button,\n  Divider,\n  FormGroup,\n  PageSection,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { SaveReset } from \"../advanced/SaveReset\";\nimport { ImportDialog } from \"./ImportDialog\";\nimport useToggle from \"../../utils/useToggle\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { DecisionStrategySelect } from \"./DecisionStrategySelect\";\n\nconst POLICY_ENFORCEMENT_MODES = [\n  \"ENFORCING\",\n  \"PERMISSIVE\",\n  \"DISABLED\",\n] as const;\n\nexport type FormFields = Omit<\n  ResourceServerRepresentation,\n  \"scopes\" | \"resources\"\n>;\n\nexport const AuthorizationSettings = ({ clientId }: { clientId: string }) => {\n  const { t } = useTranslation(\"clients\");\n  const [resource, setResource] = useState<ResourceServerRepresentation>();\n  const [importDialog, toggleImportDialog] = useToggle();\n\n  const form = useForm<FormFields>({});\n  const { control, reset, handleSubmit } = form;\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    () => adminClient.clients.getResourceServer({ id: clientId }),\n    (resource) => {\n      setResource(resource);\n      reset(resource);\n    },\n    []\n  );\n\n  const importResource = async (value: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.importResource({ id: clientId }, value);\n      addAlert(t(\"importResourceSuccess\"), AlertVariant.success);\n      reset({ ...value });\n    } catch (error) {\n      addError(\"clients:importResourceError\", error);\n    }\n  };\n\n  const onSubmit = async (resource: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.updateResourceServer(\n        { id: clientId },\n        resource\n      );\n      addAlert(t(\"updateResourceSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:resourceSaveError\", error);\n    }\n  };\n\n  if (!resource) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      {importDialog && (\n        <ImportDialog\n          onConfirm={importResource}\n          closeDialog={toggleImportDialog}\n        />\n      )}\n      <FormAccess\n        role=\"view-clients\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <FormGroup\n          label={t(\"import\")}\n          fieldId=\"import\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:import\")}\n              fieldLabelId=\"clients:import\"\n            />\n          }\n        >\n          <Button variant=\"secondary\" onClick={toggleImportDialog}>\n            {t(\"import\")}\n          </Button>\n        </FormGroup>\n        <Divider />\n        <FormGroup\n          label={t(\"policyEnforcementMode\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:policyEnforcementMode\")}\n              fieldLabelId=\"clients:policyEnforcementMode\"\n            />\n          }\n          fieldId=\"policyEnforcementMode\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"policyEnforcementMode\"\n            data-testid=\"policyEnforcementMode\"\n            defaultValue={POLICY_ENFORCEMENT_MODES[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {POLICY_ENFORCEMENT_MODES.map((mode) => (\n                  <Radio\n                    id={mode}\n                    key={mode}\n                    data-testid={mode}\n                    isChecked={field.value === mode}\n                    name=\"policyEnforcementMode\"\n                    onChange={() => field.onChange(mode)}\n                    label={t(`policyEnforcementModes.${mode}`)}\n                    className=\"pf-u-mb-md\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormProvider {...form}>\n          <DecisionStrategySelect isLimited />\n        </FormProvider>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"allowRemoteResourceManagement\")}\n          fieldId=\"allowRemoteResourceManagement\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:allowRemoteResourceManagement\")}\n              fieldLabelId=\"clients:allowRemoteResourceManagement\"\n            />\n          }\n        >\n          <Controller\n            name=\"allowRemoteResourceManagement\"\n            data-testid=\"allowRemoteResourceManagement\"\n            defaultValue={false}\n            control={control}\n            render={({ field }) => (\n              <Switch\n                id=\"allowRemoteResourceManagement\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                isChecked={field.value}\n                onChange={field.onChange}\n                aria-label={t(\"allowRemoteResourceManagement\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <SaveReset\n          name=\"authenticationSettings\"\n          reset={() => reset(resource)}\n          isActive\n        />\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type UserSessionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userSessionRepresentation\";\nimport { PageSection } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type { LoaderFunction } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport SessionsTable from \"../sessions/SessionsTable\";\n\ntype ClientSessionsProps = {\n  client: ClientRepresentation;\n};\n\nexport const ClientSessions = ({ client }: ClientSessionsProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation(\"sessions\");\n\n  const loader: LoaderFunction<UserSessionRepresentation> = async (\n    first,\n    max\n  ) => {\n    const mapSessionsToType =\n      (type: string) => (sessions: UserSessionRepresentation[]) =>\n        sessions.map((session) => ({\n          type,\n          ...session,\n        }));\n\n    const allSessions = await Promise.all([\n      adminClient.clients\n        .listSessions({ id: client.id!, first, max })\n        .then(mapSessionsToType(t(\"sessions:sessionsType.regularSSO\"))),\n      adminClient.clients\n        .listOfflineSessions({\n          id: client.id!,\n          first,\n          max,\n        })\n        .then(mapSessionsToType(t(\"sessions:sessionsType.offline\"))),\n    ]);\n\n    return allSessions.flat();\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <SessionsTable\n        loader={loader}\n        hiddenColumns={[\"clients\"]}\n        emptyInstructions={t(\"noSessionsForClient\")}\n      />\n    </PageSection>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, Path, PathValue, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype ToggleProps = {\n  name: PathValue<FormFields, Path<FormFields>>;\n  label: string;\n};\nexport const Toggle = ({ name, label }: ToggleProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext<FormFields>();\n\n  return (\n    <FormGroup\n      hasNoPaddingTop\n      label={t(label)}\n      fieldId={label}\n      labelIcon={\n        <HelpItem\n          helpText={t(`clients-help:${label}`)}\n          fieldLabelId={`clients:${label}`}\n        />\n      }\n    >\n      <Controller\n        name={name}\n        defaultValue=\"false\"\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id={name!}\n            data-testid={label}\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n            isChecked={field.value === \"true\"}\n            onChange={(value) => field.onChange(value.toString())}\n            aria-label={t(label)}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n\nexport const SamlConfig = () => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext<FormFields>();\n\n  const [nameFormatOpen, setNameFormatOpen] = useState(false);\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <FormGroup\n        label={t(\"nameIdFormat\")}\n        fieldId=\"nameIdFormat\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:nameIdFormat\")}\n            fieldLabelId=\"clients:nameIdFormat\"\n          />\n        }\n      >\n        <Controller\n          name=\"attributes.saml_name_id_format\"\n          defaultValue=\"username\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"samlNameIdFormat\"\n              onToggle={setNameFormatOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setNameFormatOpen(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"nameIdFormat\")}\n              isOpen={nameFormatOpen}\n            >\n              {[\"username\", \"email\", \"transient\", \"persistent\"].map((name) => (\n                <SelectOption\n                  selected={name === field.value}\n                  key={name}\n                  value={name}\n                />\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <Toggle\n        name=\"attributes.saml_force_name_id_format\"\n        label=\"forceNameIdFormat\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.force.post.binding\")}\n        label=\"forcePostBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.artifact.binding\")}\n        label=\"forceArtifactBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.authnstatement\")}\n        label=\"includeAuthnStatement\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.onetimeuse.condition\"\n        )}\n        label=\"includeOneTimeUseCondition\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.server.signature.keyinfo.ext\"\n        )}\n        label=\"optimizeLookup\"\n      />\n    </FormAccess>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Toggle } from \"./SamlConfig\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"RSA_SHA1\",\n  \"RSA_SHA256\",\n  \"RSA_SHA256_MGF1\",\n  \"RSA_SHA512\",\n  \"RSA_SHA512_MGF1\",\n  \"DSA_SHA1\",\n] as const;\n\nconst KEYNAME_TRANSFORMER = [\"NONE\", \"KEY_ID\", \"CERT_SUBJECT\"] as const;\n\nconst CANONICALIZATION = [\n  { name: \"EXCLUSIVE\", value: \"http://www.w3.org/2001/10/xml-exc-c14n#\" },\n  {\n    name: \"EXCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\",\n  },\n  {\n    name: \"INCLUSIVE\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\",\n  },\n  {\n    name: \"INCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\",\n  },\n] as const;\n\nexport const SamlSignature = () => {\n  const { t } = useTranslation(\"clients\");\n  const [algOpen, setAlgOpen] = useState(false);\n  const [keyOpen, setKeyOpen] = useState(false);\n  const [canOpen, setCanOpen] = useState(false);\n\n  const { control, watch } = useFormContext<FormFields>();\n\n  const signDocs = watch(\n    convertAttributeNameToForm<FormFields>(\"attributes.saml.server.signature\")\n  );\n  const signAssertion = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.saml.assertion.signature\"\n    )\n  );\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.server.signature\")}\n        label=\"signDocuments\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.assertion.signature\")}\n        label=\"signAssertions\"\n      />\n      {(signDocs === \"true\" || signAssertion === \"true\") && (\n        <>\n          <FormGroup\n            label={t(\"signatureAlgorithm\")}\n            fieldId=\"signatureAlgorithm\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:signatureAlgorithm\")}\n                fieldLabelId=\"clients:signatureAlgorithm\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.signature.algorithm\"\n              )}\n              defaultValue={SIGNATURE_ALGORITHMS[0]}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"signatureAlgorithm\"\n                  onToggle={setAlgOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setAlgOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"signatureAlgorithm\")}\n                  isOpen={algOpen}\n                >\n                  {SIGNATURE_ALGORITHMS.map((algorithm) => (\n                    <SelectOption\n                      selected={algorithm === field.value}\n                      key={algorithm}\n                      value={algorithm}\n                    />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"signatureKeyName\")}\n            fieldId=\"signatureKeyName\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:signatureKeyName\")}\n                fieldLabelId=\"clients:signatureKeyName\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.server.signature.keyinfo.xmlSigKeyInfoKeyNameTransformer\"\n              )}\n              defaultValue={KEYNAME_TRANSFORMER[0]}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"signatureKeyName\"\n                  onToggle={setKeyOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setKeyOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"signatureKeyName\")}\n                  isOpen={keyOpen}\n                >\n                  {KEYNAME_TRANSFORMER.map((key) => (\n                    <SelectOption\n                      selected={key === field.value}\n                      key={key}\n                      value={key}\n                    />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"canonicalization\")}\n            fieldId=\"canonicalization\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:canonicalization\")}\n                fieldLabelId=\"clients:canonicalization\"\n              />\n            }\n          >\n            <Controller\n              name=\"attributes.saml_signature_canonicalization_method\"\n              defaultValue={CANONICALIZATION[0].value}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"canonicalization\"\n                  onToggle={setCanOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setCanOpen(false);\n                  }}\n                  selections={\n                    CANONICALIZATION.find((can) => can.value === field.value)\n                      ?.name\n                  }\n                  variant={SelectVariant.single}\n                  aria-label={t(\"canonicalization\")}\n                  isOpen={canOpen}\n                >\n                  {CANONICALIZATION.map((can) => (\n                    <SelectOption\n                      selected={can.value === field.value}\n                      key={can.name}\n                      value={can.value}\n                    >\n                      {can.name}\n                    </SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { SaveReset } from \"../advanced/SaveReset\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\nimport { LoginSettings } from \"./LoginSettings\";\n\nexport const AccessSettings = ({\n  client,\n  save,\n  reset,\n}: ClientSettingsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { register, watch } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const protocol = watch(\"protocol\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={client.access?.configure}\n      role=\"manage-clients\"\n    >\n      {!client.bearerOnly && <LoginSettings protocol={protocol} />}\n      {protocol !== \"saml\" && (\n        <FormGroup\n          label={t(\"adminURL\")}\n          fieldId=\"kc-admin-url\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:adminURL\")}\n              fieldLabelId=\"clients:adminURL\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            id=\"kc-admin-url\"\n            type=\"url\"\n            {...register(\"adminUrl\")}\n          />\n        </FormGroup>\n      )}\n      {client.bearerOnly && (\n        <SaveReset\n          className=\"keycloak__form_actions\"\n          name=\"settings\"\n          save={save}\n          reset={reset}\n          isActive={!isManager}\n        />\n      )}\n    </FormAccess>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const LoginSettingsPanel = ({ access }: { access?: boolean }) => {\n  const { t } = useTranslation(\"clients\");\n  const { register, control, watch } = useFormContext<FormFields>();\n\n  const [loginThemeOpen, setLoginThemeOpen] = useState(false);\n  const loginThemes = useServerInfo().themes![\"login\"];\n  const consentRequired = watch(\"consentRequired\");\n  const displayOnConsentScreen: string = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.display.on.consent.screen\"\n    )\n  );\n\n  return (\n    <FormAccess isHorizontal fineGrainedAccess={access} role=\"manage-clients\">\n      <FormGroup\n        label={t(\"loginTheme\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:loginTheme\")}\n            fieldLabelId=\"clients:loginTheme\"\n          />\n        }\n        fieldId=\"loginTheme\"\n      >\n        <Controller\n          name=\"attributes.login_theme\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"loginTheme\"\n              onToggle={setLoginThemeOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setLoginThemeOpen(false);\n              }}\n              selections={field.value || t(\"common:choose\")}\n              variant={SelectVariant.single}\n              aria-label={t(\"loginTheme\")}\n              isOpen={loginThemeOpen}\n            >\n              {[\n                <SelectOption key=\"empty\" value=\"\">\n                  {t(\"common:choose\")}\n                </SelectOption>,\n                ...loginThemes.map((theme) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={theme.name}\n                    value={theme.name}\n                  />\n                )),\n              ]}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"consentRequired\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:consentRequired\")}\n            fieldLabelId=\"clients:consentRequired\"\n          />\n        }\n        fieldId=\"kc-consent\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"consentRequired\"\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-consent-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"consentRequired\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"displayOnClient\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:displayOnClient\")}\n            fieldLabelId=\"clients:displayOnClient\"\n          />\n        }\n        fieldId=\"kc-display-on-client\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.display.on.consent.screen\"\n          )}\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-display-on-client-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(\"\" + value)}\n              isDisabled={!consentRequired}\n              aria-label={t(\"displayOnClient\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"consentScreenText\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:consentScreenText\")}\n            fieldLabelId=\"clients:consentScreenText\"\n          />\n        }\n        fieldId=\"kc-consent-screen-text\"\n      >\n        <KeycloakTextArea\n          id=\"kc-consent-screen-text\"\n          {...register(\n            convertAttributeNameToForm<FormFields>(\n              \"attributes.consent.screen.text\"\n            )\n          )}\n          isDisabled={!(consentRequired && displayOnConsentScreen === \"true\")}\n        />\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import { FormGroup, Switch, ValidatedOptions } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { beerify, convertAttributeNameToForm } from \"../../util\";\nimport { SaveReset } from \"../advanced/SaveReset\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const LogoutPanel = ({\n  save,\n  reset,\n  client: { access },\n}: ClientSettingsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || access?.configure;\n\n  const protocol = watch(\"protocol\");\n  const frontchannelLogout = watch(\"frontchannelLogout\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={access?.configure}\n      role=\"manage-clients\"\n    >\n      <FormGroup\n        label={t(\"frontchannelLogout\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:frontchannelLogout\")}\n            fieldLabelId=\"clients:frontchannelLogout\"\n          />\n        }\n        fieldId=\"kc-frontchannelLogout\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"frontchannelLogout\"\n          defaultValue={true}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-frontchannelLogout-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"frontchannelLogout\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {protocol === \"openid-connect\" && frontchannelLogout && (\n        <FormGroup\n          label={t(\"frontchannelLogoutUrl\")}\n          fieldId=\"frontchannelLogoutUrl\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:frontchannelLogoutUrl\")}\n              fieldLabelId=\"clients:frontchannelLogoutUrl\"\n            />\n          }\n          helperTextInvalid={\n            errors.attributes?.[beerify(\"frontchannel.logout.url\")]\n              ?.message as string\n          }\n          validated={\n            errors.attributes?.[beerify(\"frontchannel.logout.url\")]?.message\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n        >\n          <KeycloakTextInput\n            id=\"frontchannelLogoutUrl\"\n            type=\"url\"\n            {...register(\n              convertAttributeNameToForm<FormFields>(\n                \"attributes.frontchannel.logout.url\"\n              ),\n              {\n                validate: (uri) =>\n                  ((uri.startsWith(\"https://\") || uri.startsWith(\"http://\")) &&\n                    !uri.includes(\"*\")) ||\n                  uri === \"\" ||\n                  t(\"frontchannelUrlInvalid\").toString(),\n              }\n            )}\n            validated={\n              errors.attributes?.[beerify(\"frontchannel.logout.url\")]?.message\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n          />\n        </FormGroup>\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <FormGroup\n            label={t(\"backchannelLogoutUrl\")}\n            fieldId=\"backchannelLogoutUrl\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:backchannelLogoutUrl\")}\n                fieldLabelId=\"clients:backchannelLogoutUrl\"\n              />\n            }\n            helperTextInvalid={\n              errors.attributes?.[beerify(\"backchannel.logout.url\")]\n                ?.message as string\n            }\n            validated={\n              errors.attributes?.[beerify(\"backchannel.logout.url\")]?.message\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n          >\n            <KeycloakTextInput\n              id=\"backchannelLogoutUrl\"\n              type=\"url\"\n              {...register(\n                convertAttributeNameToForm<FormFields>(\n                  \"attributes.backchannel.logout.url\"\n                ),\n                {\n                  validate: (uri) =>\n                    ((uri.startsWith(\"https://\") ||\n                      uri.startsWith(\"http://\")) &&\n                      !uri.includes(\"*\")) ||\n                    uri === \"\" ||\n                    t(\"backchannelUrlInvalid\").toString(),\n                }\n              )}\n              validated={\n                errors.attributes?.[beerify(\"backchannel.logout.url\")]?.message\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"backchannelLogoutSessionRequired\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:backchannelLogoutSessionRequired\")}\n                fieldLabelId=\"clients:backchannelLogoutSessionRequired\"\n              />\n            }\n            fieldId=\"backchannelLogoutSessionRequired\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.session.required\"\n              )}\n              defaultValue=\"true\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutSessionRequired\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutSessionRequired\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\n                  \"clients-help:backchannelLogoutRevokeOfflineSessions\"\n                )}\n                fieldLabelId=\"clients:backchannelLogoutRevokeOfflineSessions\"\n              />\n            }\n            fieldId=\"backchannelLogoutRevokeOfflineSessions\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.revoke.offline.tokens\"\n              )}\n              defaultValue=\"false\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutRevokeOfflineSessions\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n      <SaveReset\n        className=\"keycloak__form_actions\"\n        name=\"settings\"\n        save={save}\n        reset={reset}\n        isActive={isManager}\n      />\n    </FormAccess>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Form } from \"@patternfly/react-core\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { ClientDescription } from \"./ClientDescription\";\nimport { CapabilityConfig } from \"./add/CapabilityConfig\";\nimport { SamlConfig } from \"./add/SamlConfig\";\nimport { SamlSignature } from \"./add/SamlSignature\";\nimport { AccessSettings } from \"./add/AccessSettings\";\nimport { LoginSettingsPanel } from \"./add/LoginSettingsPanel\";\nimport { LogoutPanel } from \"./add/LogoutPanel\";\nimport { FormFields } from \"./ClientDetails\";\n\nexport type ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  reset: () => void;\n};\n\nexport const ClientSettings = (props: ClientSettingsProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  const { watch } = useFormContext<FormFields>();\n  const protocol = watch(\"protocol\");\n\n  const { client } = props;\n\n  return (\n    <ScrollForm\n      className=\"pf-u-px-lg pf-u-pb-lg\"\n      sections={[\n        {\n          title: t(\"generalSettings\"),\n          panel: (\n            <Form isHorizontal>\n              <ClientDescription\n                protocol={client.protocol}\n                hasConfigureAccess={client.access?.configure}\n              />\n            </Form>\n          ),\n        },\n        {\n          title: t(\"accessSettings\"),\n          panel: <AccessSettings {...props} />,\n        },\n        {\n          title: t(\"samlCapabilityConfig\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlConfig />,\n        },\n        {\n          title: t(\"signatureAndEncryption\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlSignature />,\n        },\n        {\n          title: t(\"capabilityConfig\"),\n          isHidden: protocol !== \"openid-connect\" || client.bearerOnly,\n          panel: <CapabilityConfig />,\n        },\n        {\n          title: t(\"loginSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LoginSettingsPanel access={client.access?.configure} />,\n        },\n        {\n          title: t(\"logoutSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LogoutPanel {...props} />,\n        },\n      ]}\n    />\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ClipboardCopyButton,\n  ClipboardCopyButtonProps,\n} from \"@patternfly/react-core\";\n\nimport useSetTimeout from \"../../utils/useSetTimeout\";\n\nenum CopyState {\n  Ready,\n  Copied,\n  Error,\n}\n\ntype CopyToClipboardButtonProps = Pick<ClipboardCopyButtonProps, \"variant\"> & {\n  id: string;\n  label: string;\n  text: string;\n};\n\nexport const CopyToClipboardButton = ({\n  id,\n  label,\n  text,\n  variant = \"plain\",\n}: CopyToClipboardButtonProps) => {\n  const { t } = useTranslation(\"clients\");\n  const setTimeout = useSetTimeout();\n\n  const [copy, setCopy] = useState(CopyState.Ready);\n\n  const copyMessage = useMemo(() => {\n    switch (copy) {\n      case CopyState.Ready:\n        return t(\"copyToClipboard\");\n      case CopyState.Copied:\n        return t(\"copySuccess\");\n      case CopyState.Error:\n        return t(\"clipboardCopyError\");\n    }\n  }, [copy]);\n\n  useEffect(() => {\n    if (copy !== CopyState.Ready) {\n      return setTimeout(() => setCopy(CopyState.Ready), 1000);\n    }\n  }, [copy]);\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopy(CopyState.Copied);\n    } catch (error) {\n      setCopy(CopyState.Error);\n    }\n  };\n\n  return (\n    <ClipboardCopyButton\n      id={`copy-button-${id}`}\n      textId={label}\n      aria-label={t(\"copyToClipboard\")}\n      onClick={() => copyToClipboard(text)}\n      exitDelay={600}\n      variant={variant}\n    >\n      {copyMessage}\n    </ClipboardCopyButton>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport {\n  Alert,\n  Button,\n  FormGroup,\n  InputGroup,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { CopyToClipboardButton } from \"../scopes/CopyToClipboardButton\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport useFormatDate from \"../../utils/useFormatDate\";\nimport { useAccess } from \"../../context/access/Access\";\n\nexport type ClientSecretProps = {\n  client: ClientRepresentation;\n  secret: string;\n  toggle: () => void;\n};\n\ntype SecretInputProps = ClientSecretProps & {\n  id: string;\n  buttonLabel: string;\n};\n\nconst SecretInput = ({\n  id,\n  buttonLabel,\n  client,\n  secret,\n  toggle,\n}: SecretInputProps) => {\n  const { t } = useTranslation(\"clients\");\n  const form = useFormContext<ClientRepresentation>();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <InputGroup>\n          <PasswordInput id={id} value={secret} isReadOnly />\n          <CopyToClipboardButton\n            id={id}\n            text={secret}\n            label=\"clientSecret\"\n            variant=\"control\"\n          />\n        </InputGroup>\n      </SplitItem>\n      <SplitItem>\n        <Button\n          variant=\"secondary\"\n          isDisabled={form.formState.isDirty || !isManager}\n          onClick={toggle}\n        >\n          {t(buttonLabel)}\n        </Button>\n      </SplitItem>\n    </Split>\n  );\n};\n\nconst ExpireDateFormatter = ({ time }: { time: number }) => {\n  const { t } = useTranslation(\"clients\");\n  const formatDate = useFormatDate();\n  const unixTimeToString = (time: number) =>\n    time\n      ? t(\"secretExpiresOn\", {\n          time: formatDate(new Date(time * 1000), {\n            dateStyle: \"full\",\n            timeStyle: \"long\",\n          }),\n        })\n      : undefined;\n\n  return <div className=\"pf-u-my-md\">{unixTimeToString(time)}</div>;\n};\n\nexport const ClientSecret = ({ client, secret, toggle }: ClientSecretProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [secretRotated, setSecretRotated] = useState<string | undefined>(\n    client.attributes?.[\"client.secret.rotated\"]\n  );\n  const secretExpirationTime: number =\n    client.attributes?.[\"client.secret.expiration.time\"];\n  const secretRotatedExpirationTime: number =\n    client.attributes?.[\"client.secret.rotated.expiration.time\"];\n\n  const expired = (time: number) => new Date().getTime() >= time * 1000;\n\n  const [toggleInvalidateConfirm, InvalidateConfirm] = useConfirmDialog({\n    titleKey: \"clients:invalidateRotatedSecret\",\n    messageKey: \"clients:invalidateRotatedSecretExplain\",\n    continueButtonLabel: \"common:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.invalidateSecret({\n          id: client.id!,\n        });\n        setSecretRotated(undefined);\n        addAlert(t(\"invalidateRotatedSuccess\"));\n      } catch (error) {\n        addError(\"clients:invalidateRotatedError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <InvalidateConfirm />\n      <FormGroup\n        label={t(\"clientSecret\")}\n        fieldId=\"kc-client-secret\"\n        className=\"pf-u-my-md\"\n      >\n        <SecretInput\n          id=\"kc-client-secret\"\n          client={client}\n          secret={secret}\n          toggle={toggle}\n          buttonLabel=\"regenerate\"\n        />\n        <ExpireDateFormatter time={secretExpirationTime} />\n        {expired(secretExpirationTime) && (\n          <Alert variant=\"warning\" isInline title={t(\"secretHasExpired\")} />\n        )}\n      </FormGroup>\n      {secretRotated && (\n        <FormGroup label={t(\"secretRotated\")} fieldId=\"secretRotated\">\n          <SecretInput\n            id=\"secretRotated\"\n            client={client}\n            secret={secretRotated}\n            toggle={toggleInvalidateConfirm}\n            buttonLabel=\"invalidateSecret\"\n          />\n          <ExpireDateFormatter time={secretRotatedExpirationTime} />\n        </FormGroup>\n      )}\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\n\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertAttributeNameToForm, sortProviders } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const SignedJWT = () => {\n  const { control } = useFormContext();\n  const providers = sortProviders(\n    useServerInfo().providers!.clientSignature.providers\n  );\n  const { t } = useTranslation(\"clients\");\n\n  const [open, isOpen] = useState(false);\n  return (\n    <FormGroup\n      label={t(\"signatureAlgorithm\")}\n      fieldId=\"kc-signature-algorithm\"\n      labelIcon={\n        <HelpItem\n          helpText={t(\"clients-help:signature-algorithm\")}\n          fieldLabelId=\"clients:signatureAlgorithm\"\n        />\n      }\n    >\n      <Controller\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.token.endpoint.auth.signing.alg\"\n        )}\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <Select\n            maxHeight={200}\n            toggleId=\"kc-signature-algorithm\"\n            onToggle={isOpen}\n            onSelect={(_, value) => {\n              field.onChange(value.toString());\n              isOpen(false);\n            }}\n            selections={field.value || t(\"anyAlgorithm\")}\n            variant={SelectVariant.single}\n            aria-label={t(\"signatureAlgorithm\")}\n            isOpen={open}\n          >\n            <SelectOption selected={field.value === \"\"} key=\"any\" value=\"\">\n              {t(\"anyAlgorithm\")}\n            </SelectOption>\n            <>\n              {providers.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                />\n              ))}\n            </>\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { FormGroup, Switch, ValidatedOptions } from \"@patternfly/react-core\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { beerify, convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const X509 = () => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext<FormFields>();\n  return (\n    <>\n      <FormGroup\n        label={t(\"allowRegexComparison\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:allowRegexComparison\")}\n            fieldLabelId=\"clients:allowRegexComparison\"\n          />\n        }\n        fieldId=\"allowRegexComparison\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.x509.allow.regex.pattern.comparison\"\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"allowRegexComparison\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"allowRegexComparison\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"subject\")}\n        fieldId=\"kc-subject\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:subject\")}\n            fieldLabelId=\"clients:subject\"\n          />\n        }\n        helperTextInvalid={t(\"common:required\")}\n        validated={\n          errors.attributes?.[beerify(\"x509.subjectdn\")]\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        isRequired\n      >\n        <KeycloakTextInput\n          type=\"text\"\n          id=\"kc-subject\"\n          validated={\n            errors.attributes?.[beerify(\"x509.subjectdn\")]\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          {...register(\n            convertAttributeNameToForm(\"attributes.x509.subjectdn\"),\n            { required: true }\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import type { AuthenticationProviderRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigRepresentation\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport {\n  ActionGroup,\n  Alert,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  Divider,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { ClientSecret } from \"./ClientSecret\";\nimport { SignedJWT } from \"./SignedJWT\";\nimport { X509 } from \"./X509\";\n\nimport \"./credentials.css\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype AccessToken = {\n  registrationAccessToken: string;\n};\n\nexport type CredentialsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  refresh: () => void;\n};\n\nexport const Credentials = ({ client, save, refresh }: CredentialsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const clientId = client.id!;\n\n  const [providers, setProviders] = useState<\n    AuthenticationProviderRepresentation[]\n  >([]);\n\n  const {\n    control,\n    formState: { isDirty },\n    handleSubmit,\n  } = useFormContext<FormFields>();\n\n  const clientAuthenticatorType = useWatch({\n    control: control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"\",\n  });\n\n  const [secret, setSecret] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [open, isOpen] = useState(false);\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.authenticationManagement.getClientAuthenticatorProviders(),\n        adminClient.clients.getClientSecret({\n          id: clientId,\n        }),\n      ]),\n    ([providers, secret]) => {\n      setProviders(providers);\n      setSecret(secret.value!);\n    },\n    []\n  );\n\n  async function regenerate<T>(\n    call: (clientId: string) => Promise<T>,\n    message: string\n  ): Promise<T | undefined> {\n    try {\n      const data = await call(clientId);\n      addAlert(t(`${message}Success`), AlertVariant.success);\n      return data;\n    } catch (error) {\n      addError(`clients:${message}Error`, error);\n    }\n  }\n\n  const regenerateClientSecret = async () => {\n    const secret = await regenerate<CredentialRepresentation>(\n      (clientId) =>\n        adminClient.clients.generateNewClientSecret({ id: clientId }),\n      \"clientSecret\"\n    );\n    setSecret(secret?.value || \"\");\n    refresh();\n  };\n\n  const [toggleClientSecretConfirm, ClientSecretConfirm] = useConfirmDialog({\n    titleKey: \"clients:confirmClientSecretTitle\",\n    messageKey: \"clients:confirmClientSecretBody\",\n    continueButtonLabel: \"common:yes\",\n    cancelButtonLabel: \"common:no\",\n    onConfirm: regenerateClientSecret,\n  });\n\n  const regenerateAccessToken = async () => {\n    const accessToken = await regenerate<AccessToken>(\n      (clientId) =>\n        adminClient.clients.generateRegistrationAccessToken({ id: clientId }),\n      \"accessToken\"\n    );\n    setAccessToken(accessToken?.registrationAccessToken || \"\");\n  };\n\n  const [toggleAccessTokenConfirm, AccessTokenConfirm] = useConfirmDialog({\n    titleKey: \"clients:confirmAccessTokenTitle\",\n    messageKey: \"clients:confirmAccessTokenBody\",\n    continueButtonLabel: \"common:yes\",\n    cancelButtonLabel: \"common:no\",\n    onConfirm: regenerateAccessToken,\n  });\n\n  return (\n    <PageSection>\n      <FormAccess\n        onSubmit={handleSubmit(save)}\n        isHorizontal\n        className=\"pf-u-mt-md\"\n        role=\"manage-clients\"\n        fineGrainedAccess={client.access?.configure}\n      >\n        <ClientSecretConfirm />\n        <AccessTokenConfirm />\n        <Card isFlat>\n          <CardBody>\n            <FormGroup\n              label={t(\"clientAuthenticator\")}\n              fieldId=\"kc-client-authenticator-type\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:client-authenticator-type\")}\n                  fieldLabelId=\"clients:clientAuthenticator\"\n                />\n              }\n            >\n              <Controller\n                name=\"clientAuthenticatorType\"\n                control={control}\n                defaultValue=\"\"\n                render={({ field }) => (\n                  <Select\n                    toggleId=\"kc-client-authenticator-type\"\n                    required\n                    onToggle={isOpen}\n                    onSelect={(_, value) => {\n                      field.onChange(value as string);\n                      isOpen(false);\n                    }}\n                    selections={field.value}\n                    variant={SelectVariant.single}\n                    aria-label={t(\"clientAuthenticator\")}\n                    isOpen={open}\n                  >\n                    {providers.map((option) => (\n                      <SelectOption\n                        selected={option.id === field.value}\n                        key={option.id}\n                        value={option.id}\n                      >\n                        {option.displayName}\n                      </SelectOption>\n                    ))}\n                  </Select>\n                )}\n              />\n            </FormGroup>\n            {(clientAuthenticatorType === \"client-jwt\" ||\n              clientAuthenticatorType === \"client-secret-jwt\") && <SignedJWT />}\n            {clientAuthenticatorType === \"client-jwt\" && (\n              <Alert\n                variant=\"info\"\n                isInline\n                className=\"kc-signedJWTAlert\"\n                title={t(\"signedJWTConfirm\")}\n              />\n            )}\n            {clientAuthenticatorType === \"client-x509\" && <X509 />}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" isDisabled={!isDirty}>\n                {t(\"common:save\")}\n              </Button>\n            </ActionGroup>\n          </CardBody>\n          {(clientAuthenticatorType === \"client-secret\" ||\n            clientAuthenticatorType === \"client-secret-jwt\") && <Divider />}\n          {(clientAuthenticatorType === \"client-secret\" ||\n            clientAuthenticatorType === \"client-secret-jwt\") && (\n            <CardBody>\n              <ClientSecret\n                client={client}\n                secret={secret}\n                toggle={toggleClientSecretConfirm}\n              />\n            </CardBody>\n          )}\n        </Card>\n        <Card isFlat>\n          <CardBody>\n            <FormGroup\n              label={t(\"registrationAccessToken\")}\n              fieldId=\"kc-access-token\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:registration-access-token\")}\n                  fieldLabelId=\"clients:registrationAccessToken\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <ClipboardCopy id=\"kc-access-token\" isReadOnly>\n                    {accessToken}\n                  </ClipboardCopy>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={toggleAccessTokenConfirm}\n                  >\n                    {t(\"regenerate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          </CardBody>\n        </Card>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { useId } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\n\ntype CertificateProps = Omit<CertificateDisplayProps, \"id\"> & {\n  plain?: boolean;\n};\n\ntype CertificateDisplayProps = {\n  id: string;\n  keyInfo?: CertificateRepresentation;\n};\n\nconst CertificateDisplay = ({ id, keyInfo }: CertificateDisplayProps) => {\n  const { t } = useTranslation(\"clients\");\n  return (\n    <KeycloakTextArea\n      readOnly\n      rows={5}\n      id={id}\n      data-testid=\"certificate\"\n      value={keyInfo?.certificate}\n      aria-label={t(\"certificate\")}\n    />\n  );\n};\n\nexport const Certificate = ({ keyInfo, plain = false }: CertificateProps) => {\n  const { t } = useTranslation(\"clients\");\n  const id = useId();\n\n  return plain ? (\n    <CertificateDisplay id={id} keyInfo={keyInfo} />\n  ) : (\n    <FormGroup\n      label={t(\"certificate\")}\n      fieldId={id}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"clients-help:certificate\")}\n          fieldLabelId={`clients:${id}`}\n        />\n      }\n    >\n      <CertificateDisplay id={id} keyInfo={keyInfo} />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { FormGroup } from \"@patternfly/react-core\";\n\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { HelpItem } from \"ui-shared\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nexport const StoreSettings = ({\n  hidePassword = false,\n  isSaml = false,\n}: {\n  hidePassword?: boolean;\n  isSaml?: boolean;\n}) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<KeyStoreConfig>();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"keyAlias\")}\n        fieldId=\"keyAlias\"\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:keyAlias\")}\n            fieldLabelId=\"clients:keyAlias\"\n          />\n        }\n        helperTextInvalid={t(\"common:required\")}\n        validated={errors.keyAlias ? \"error\" : \"default\"}\n      >\n        <KeycloakTextInput\n          data-testid=\"keyAlias\"\n          id=\"keyAlias\"\n          validated={errors.keyAlias ? \"error\" : \"default\"}\n          {...register(\"keyAlias\", { required: true })}\n        />\n      </FormGroup>\n      {!hidePassword && (\n        <FormGroup\n          label={t(\"keyPassword\")}\n          fieldId=\"keyPassword\"\n          isRequired\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:keyPassword\")}\n              fieldLabelId=\"clients:keyPassword\"\n            />\n          }\n          helperTextInvalid={t(\"common:required\")}\n          validated={errors.keyPassword ? \"error\" : \"default\"}\n        >\n          <PasswordInput\n            data-testid=\"keyPassword\"\n            id=\"keyPassword\"\n            validated={errors.keyPassword ? \"error\" : \"default\"}\n            {...register(\"keyPassword\", { required: true })}\n          />\n        </FormGroup>\n      )}\n      {isSaml && (\n        <FormGroup\n          label={t(\"realmCertificateAlias\")}\n          fieldId=\"realmCertificateAlias\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:realmCertificateAlias\")}\n              fieldLabelId=\"clients:realmCertificateAlias\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            data-testid=\"realmCertificateAlias\"\n            id=\"realmCertificateAlias\"\n            {...register(\"realmAlias\")}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        label={t(\"storePassword\")}\n        fieldId=\"storePassword\"\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:storePassword\")}\n            fieldLabelId=\"clients:storePassword\"\n          />\n        }\n        helperTextInvalid={t(\"common:required\")}\n        validated={errors.storePassword ? \"error\" : \"default\"}\n      >\n        <PasswordInput\n          data-testid=\"storePassword\"\n          id=\"storePassword\"\n          validated={errors.storePassword ? \"error\" : \"default\"}\n          {...register(\"storePassword\", { required: true })}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from \"react-hook-form\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { HelpItem } from \"ui-shared\";\nimport { StoreSettings } from \"./StoreSettings\";\nimport { FileUpload } from \"../../components/json-file-upload/patternfly/FileUpload\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype GenerateKeyDialogProps = {\n  clientId: string;\n  toggleDialog: () => void;\n  save: (keyStoreConfig: KeyStoreConfig) => void;\n};\n\ntype KeyFormProps = {\n  useFile?: boolean;\n  isSaml?: boolean;\n  hasPem?: boolean;\n};\n\nconst CERT_PEM = \"Certificate PEM\" as const;\n\nconst extensions = new Map([\n  [\"PKCS12\", \"p12\"],\n  [\"JKS\", \"jks\"],\n  [\"BCFKS\", \"bcfks\"],\n]);\n\ntype FormFields = KeyStoreConfig & {\n  file: string | File;\n};\n\nexport const getFileExtension = (format: string) => extensions.get(format);\n\nexport const KeyForm = ({\n  isSaml = false,\n  hasPem = false,\n  useFile = false,\n}: KeyFormProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  const [filename, setFilename] = useState<string>();\n  const [openArchiveFormat, setOpenArchiveFormat] = useState(false);\n\n  const { control, watch } = useFormContext<FormFields>();\n  const format = watch(\"format\");\n\n  const { cryptoInfo } = useServerInfo();\n  const supportedKeystoreTypes = [\n    ...(cryptoInfo?.supportedKeystoreTypes ?? []),\n    ...(hasPem ? CERT_PEM : []),\n  ];\n\n  return (\n    <Form className=\"pf-u-pt-lg\">\n      <FormGroup\n        label={t(\"archiveFormat\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clients-help:archiveFormat\")}\n            fieldLabelId=\"clients:archiveFormat\"\n          />\n        }\n        fieldId=\"archiveFormat\"\n      >\n        <Controller\n          name=\"format\"\n          defaultValue={supportedKeystoreTypes[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"archiveFormat\"\n              onToggle={setOpenArchiveFormat}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setOpenArchiveFormat(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"archiveFormat\")}\n              isOpen={openArchiveFormat}\n            >\n              {supportedKeystoreTypes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                />\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {useFile && (\n        <FormGroup\n          label={t(\"importFile\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:importFile\")}\n              fieldLabelId=\"clients:importFile\"\n            />\n          }\n          fieldId=\"importFile\"\n        >\n          <Controller\n            name=\"file\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <FileUpload\n                id=\"importFile\"\n                value={field.value}\n                filename={filename}\n                browseButtonText={t(\"browse\")}\n                onChange={(value, filename) => {\n                  setFilename(filename);\n                  field.onChange(value);\n                }}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {format !== CERT_PEM && (\n        <StoreSettings hidePassword={useFile} isSaml={isSaml} />\n      )}\n    </Form>\n  );\n};\n\nexport const GenerateKeyDialog = ({\n  clientId,\n  save,\n  toggleDialog,\n}: GenerateKeyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { keyAlias: clientId },\n    mode: \"onChange\",\n  });\n\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          isDisabled={!isValid}\n          onClick={() => {\n            handleSubmit((config) => {\n              save(config);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"generate\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"clients-help:generateKeysDescription\")}</Text>\n      </TextContent>\n      <FormProvider {...form}>\n        <KeyForm />\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { HelpItem } from \"ui-shared\";\nimport { StoreSettings } from \"./StoreSettings\";\nimport { FileUpload } from \"../../components/json-file-upload/patternfly/FileUpload\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype ImportKeyDialogProps = {\n  toggleDialog: () => void;\n  save: (importFile: ImportFile) => void;\n};\n\nexport type ImportFile = {\n  keystoreFormat: string;\n  keyAlias: string;\n  storePassword: string;\n  file: { value?: string; filename: string };\n};\n\nexport const ImportKeyDialog = ({\n  save,\n  toggleDialog,\n}: ImportKeyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const form = useForm<ImportFile>();\n  const { control, handleSubmit } = form;\n\n  const [openArchiveFormat, setOpenArchiveFormat] = useState(false);\n\n  const baseFormats = useServerInfo().cryptoInfo?.supportedKeystoreTypes ?? [];\n\n  const formats = baseFormats.concat([\n    \"Certificate PEM\",\n    \"Public Key PEM\",\n    \"JSON Web Key Set\",\n  ]);\n\n  const format = useWatch({\n    control,\n    name: \"keystoreFormat\",\n    defaultValue: formats[0],\n  });\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            handleSubmit((importFile) => {\n              save(importFile);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"import\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"clients-help:generateKeysDescription\")}</Text>\n      </TextContent>\n      <Form className=\"pf-u-pt-lg\">\n        <FormGroup\n          label={t(\"archiveFormat\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"clients-help:archiveFormat\")}\n              fieldLabelId=\"clients:archiveFormat\"\n            />\n          }\n          fieldId=\"archiveFormat\"\n        >\n          <Controller\n            name=\"keystoreFormat\"\n            control={control}\n            defaultValue={formats[0]}\n            render={({ field }) => (\n              <Select\n                toggleId=\"archiveFormat\"\n                onToggle={setOpenArchiveFormat}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setOpenArchiveFormat(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"archiveFormat\")}\n                isOpen={openArchiveFormat}\n              >\n                {formats.map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                  />\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        {baseFormats.includes(format) && (\n          <FormProvider {...form}>\n            <StoreSettings hidePassword />\n          </FormProvider>\n        )}\n        <FormGroup label={t(\"importFile\")} fieldId=\"importFile\">\n          <Controller\n            name=\"file\"\n            control={control}\n            defaultValue={{ filename: \"\" }}\n            render={({ field }) => (\n              <FileUpload\n                id=\"importFile\"\n                value={field.value.value}\n                filename={field.value.filename}\n                onChange={(value, filename) =>\n                  field.onChange({ value, filename })\n                }\n              />\n            )}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  FormGroup,\n  PageSection,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { GenerateKeyDialog, getFileExtension } from \"./GenerateKeyDialog\";\nimport { ImportFile, ImportKeyDialog } from \"./ImportKeyDialog\";\n\ntype KeysProps = {\n  save: () => void;\n  clientId: string;\n  hasConfigureAccess?: boolean;\n};\n\nconst attr = \"jwt.credential\";\n\nexport const Keys = ({ clientId, save, hasConfigureAccess }: KeysProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    control,\n    register,\n    getValues,\n    formState: { isDirty },\n  } = useFormContext<FormFields>();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation>();\n  const [openGenerateKeys, toggleOpenGenerateKeys, setOpenGenerateKeys] =\n    useToggle();\n  const [openImportKeys, toggleOpenImportKeys, setOpenImportKeys] = useToggle();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const useJwksUrl = useWatch({\n    control,\n    name: convertAttributeNameToForm<FormFields>(\"attributes.use.jwks.url\"),\n    defaultValue: \"false\",\n  });\n\n  useFetch(\n    () => adminClient.clients.getKeyInfo({ id: clientId, attr }),\n    (info) => setKeyInfo(info),\n    [key]\n  );\n\n  const generate = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.generateAndDownloadKey(\n        {\n          id: clientId,\n          attr,\n        },\n        config\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`\n      );\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"clients:generateError\", error);\n    }\n  };\n\n  const importKey = async (importFile: ImportFile) => {\n    try {\n      const formData = new FormData();\n      const { file, ...rest } = importFile;\n\n      for (const [key, value] of Object.entries(rest)) {\n        formData.append(key, value);\n      }\n\n      formData.append(\"file\", file.value!);\n\n      await adminClient.clients.uploadCertificate(\n        { id: clientId, attr },\n        formData\n      );\n      addAlert(t(\"importSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"clients:importError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {openGenerateKeys && (\n        <GenerateKeyDialog\n          clientId={getValues(\"clientId\")!}\n          toggleDialog={toggleOpenGenerateKeys}\n          save={generate}\n        />\n      )}\n      {openImportKeys && (\n        <ImportKeyDialog toggleDialog={toggleOpenImportKeys} save={importKey} />\n      )}\n      <Card isFlat>\n        <CardHeader>\n          <CardTitle>{t(\"jwksUrlConfig\")}</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <TextContent>\n            <Text>{t(\"keysIntro\")}</Text>\n          </TextContent>\n        </CardBody>\n        <CardBody>\n          <FormAccess\n            role=\"manage-clients\"\n            fineGrainedAccess={hasConfigureAccess}\n            isHorizontal\n          >\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"useJwksUrl\")}\n              fieldId=\"useJwksUrl\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:useJwksUrl\")}\n                  fieldLabelId=\"clients:useJwksUrl\"\n                />\n              }\n            >\n              <Controller\n                name={convertAttributeNameToForm(\"attributes.use.jwks.url\")}\n                control={control}\n                render={({ field }) => (\n                  <Switch\n                    data-testid=\"useJwksUrl\"\n                    id=\"useJwksUrl-switch\"\n                    label={t(\"common:on\")}\n                    labelOff={t(\"common:off\")}\n                    isChecked={field.value === \"true\"}\n                    onChange={(value) => field.onChange(`${value}`)}\n                    aria-label={t(\"useJwksUrl\")}\n                  />\n                )}\n              />\n            </FormGroup>\n            {useJwksUrl !== \"true\" &&\n              (keyInfo ? (\n                <Certificate plain keyInfo={keyInfo} />\n              ) : (\n                \"No client certificate configured\"\n              ))}\n            {useJwksUrl === \"true\" && (\n              <FormGroup\n                label={t(\"jwksUrl\")}\n                fieldId=\"jwksUrl\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"clients-help:jwksUrl\")}\n                    fieldLabelId=\"clients:jwksUrl\"\n                  />\n                }\n              >\n                <KeycloakTextInput\n                  id=\"jwksUrl\"\n                  type=\"url\"\n                  {...register(\n                    convertAttributeNameToForm(\"attributes.jwks.url\")\n                  )}\n                />\n              </FormGroup>\n            )}\n            <ActionGroup>\n              <Button\n                data-testid=\"saveKeys\"\n                onClick={save}\n                isDisabled={!isDirty}\n              >\n                {t(\"common:save\")}\n              </Button>\n              <Button\n                data-testid=\"generate\"\n                variant=\"secondary\"\n                onClick={() => setOpenGenerateKeys(true)}\n              >\n                {t(\"generateNewKeys\")}\n              </Button>\n              <Button\n                data-testid=\"import\"\n                variant=\"secondary\"\n                onClick={() => setOpenImportKeys(true)}\n                isDisabled={useJwksUrl === \"true\"}\n              >\n                {t(\"import\")}\n              </Button>\n            </ActionGroup>\n          </FormAccess>\n        </CardBody>\n      </Card>\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { Button, Modal, Form } from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\n\nimport KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { KeyForm, getFileExtension } from \"./GenerateKeyDialog\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\n\ntype ExportSamlKeyDialogProps = {\n  clientId: string;\n  close: () => void;\n};\n\nexport const ExportSamlKeyDialog = ({\n  clientId,\n  close,\n}: ExportSamlKeyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { realm } = useRealm();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { realmAlias: realm },\n  });\n\n  const download = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.downloadKey(\n        {\n          id: clientId,\n          attr: \"saml.signing\",\n        },\n        config\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`\n      );\n      addAlert(t(\"samlKeysExportSuccess\"));\n      close();\n    } catch (error) {\n      addError(\"clients:samlKeysExportError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant=\"medium\"\n      title={t(\"exportSamlKeyTitle\")}\n      isOpen\n      onClose={close}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          type=\"submit\"\n          form=\"export-saml-key-form\"\n        >\n          {t(\"common:export\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            close();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form\n        id=\"export-saml-key-form\"\n        className=\"pf-u-pt-lg\"\n        onSubmit={form.handleSubmit(download)}\n      >\n        <FormProvider {...form}>\n          <KeyForm isSaml />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { saveAs } from \"file-saver\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Radio,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\n\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport type { KeyTypes } from \"./SamlKeys\";\nimport { HelpItem } from \"ui-shared\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport { Certificate } from \"./Certificate\";\nimport type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\n\ntype SamlKeysDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n  onCancel: () => void;\n};\n\nexport type SamlKeysDialogForm = KeyStoreConfig & {\n  file: File;\n};\n\nexport const submitForm = async (\n  form: SamlKeysDialogForm,\n  id: string,\n  attr: KeyTypes,\n  adminClient: KeycloakAdminClient,\n  callback: (error?: unknown) => void\n) => {\n  try {\n    const formData = new FormData();\n    const { file, ...rest } = form;\n    Object.entries(rest).map(([key, value]) =>\n      formData.append(\n        key === \"format\" ? \"keystoreFormat\" : key,\n        value.toString()\n      )\n    );\n    formData.append(\"file\", file);\n\n    await adminClient.clients.uploadKey({ id, attr }, formData);\n    callback();\n  } catch (error) {\n    callback(error);\n  }\n};\n\nexport const SamlKeysDialog = ({\n  id,\n  attr,\n  onClose,\n  onCancel,\n}: SamlKeysDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [type, setType] = useState(false);\n  const [keys, setKeys] = useState<CertificateRepresentation>();\n  const form = useForm<SamlKeysDialogForm>({ mode: \"onChange\" });\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(form, id, attr, adminClient, (error) => {\n      if (error) {\n        addError(\"clients:importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  const generate = async () => {\n    try {\n      const key = await adminClient.clients.generateKey({\n        id,\n        attr,\n      });\n      setKeys(key);\n      saveAs(\n        new Blob([key.privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\"\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:generateError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      aria-labelledby={t(\"enableClientSignatureRequired\")}\n      header={\n        <TextContent>\n          <Title headingLevel=\"h1\">{t(\"enableClientSignatureRequired\")}</Title>\n          <Text>{t(\"enableClientSignatureRequiredExplain\")}</Text>\n        </TextContent>\n      }\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          variant=\"primary\"\n          isDisabled={!isValid && !keys}\n          onClick={() => {\n            if (type) {\n              handleSubmit(submit)();\n            }\n            onClose();\n          }}\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onCancel}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"selectMethod\")}\n            fieldId=\"selectMethod\"\n            hasNoPaddingTop\n          >\n            <Flex>\n              <FlexItem>\n                <Radio\n                  isChecked={!type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(false)}\n                  label={t(\"selectMethodType.generate\")}\n                  id=\"selectMethodType-generate\"\n                />\n              </FlexItem>\n              <FlexItem>\n                <Radio\n                  isChecked={type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(true)}\n                  label={t(\"selectMethodType.import\")}\n                  id=\"selectMethodType-import\"\n                />\n              </FlexItem>\n            </Flex>\n          </FormGroup>\n          {!type && (\n            <FormGroup\n              label={t(\"certificate\")}\n              fieldId=\"certificate\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:certificate\")}\n                  fieldLabelId=\"clients:certificate\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <Certificate plain keyInfo={keys} />\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    data-testid=\"generate\"\n                    onClick={generate}\n                  >\n                    {t(\"generate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          )}\n        </Form>\n        {type && <KeyForm useFile />}\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormProvider, useFormContext } from \"react-hook-form\";\nimport { AlertVariant } from \"@patternfly/react-core\";\n\nimport type { KeyTypes } from \"./SamlKeys\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { SamlKeysDialogForm, submitForm } from \"./SamlKeysDialog\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\n\ntype SamlImportKeyDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n};\n\nexport const SamlImportKeyDialog = ({\n  id,\n  attr,\n  onClose,\n}: SamlImportKeyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const form = useFormContext<SamlKeysDialogForm>();\n  const { handleSubmit } = form;\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(form, id, attr, adminClient, (error) => {\n      if (error) {\n        addError(\"clients:importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  return (\n    <ConfirmDialogModal\n      open={true}\n      toggleDialog={onClose}\n      continueButtonLabel=\"clients:import\"\n      titleKey=\"clients:importKey\"\n      onConfirm={() => {\n        handleSubmit(submit)();\n        onClose();\n      }}\n    >\n      <FormProvider {...form}>\n        <KeyForm useFile hasPem />\n      </FormProvider>\n    </ConfirmDialogModal>\n  );\n};\n","import {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  PageSection,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { Fragment, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { FormPanel } from \"../../components/scroll-form/FormPanel\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { ExportSamlKeyDialog } from \"./ExportSamlKeyDialog\";\nimport { SamlImportKeyDialog } from \"./SamlImportKeyDialog\";\nimport { SamlKeysDialog } from \"./SamlKeysDialog\";\n\ntype SamlKeysProps = {\n  clientId: string;\n  save: () => void;\n};\n\nconst KEYS = [\"saml.signing\", \"saml.encryption\"] as const;\nexport type KeyTypes = (typeof KEYS)[number];\n\nconst KEYS_MAPPING: { [key in KeyTypes]: { [index: string]: string } } = {\n  \"saml.signing\": {\n    name: convertAttributeNameToForm(\"attributes.saml.client.signature\"),\n    title: \"signingKeysConfig\",\n    key: \"clientSignature\",\n  },\n  \"saml.encryption\": {\n    name: convertAttributeNameToForm(\"attributes.saml.encrypt\"),\n    title: \"encryptionKeysConfig\",\n    key: \"encryptAssertions\",\n  },\n};\n\ntype KeySectionProps = {\n  clientId: string;\n  keyInfo?: CertificateRepresentation;\n  attr: KeyTypes;\n  onChanged: (key: KeyTypes) => void;\n  onGenerate: (key: KeyTypes, regenerate: boolean) => void;\n  onImport: (key: KeyTypes) => void;\n};\n\nconst KeySection = ({\n  clientId,\n  keyInfo,\n  attr,\n  onChanged,\n  onGenerate,\n  onImport,\n}: KeySectionProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control, watch } = useFormContext<FormFields>();\n  const title = KEYS_MAPPING[attr].title;\n  const key = KEYS_MAPPING[attr].key;\n  const name = KEYS_MAPPING[attr].name;\n\n  const [showImportDialog, toggleImportDialog] = useToggle();\n\n  const section = watch(name as keyof FormFields);\n  return (\n    <>\n      {showImportDialog && (\n        <ExportSamlKeyDialog clientId={clientId} close={toggleImportDialog} />\n      )}\n      <FormPanel title={t(title)} className=\"kc-form-panel__panel\">\n        <TextContent className=\"pf-u-pb-lg\">\n          <Text>{t(`${title}Explain`)}</Text>\n        </TextContent>\n        <FormAccess role=\"manage-clients\" isHorizontal>\n          <FormGroup\n            labelIcon={\n              <HelpItem\n                helpText={t(`clients-help:${key}`)}\n                fieldLabelId={`clients:${key}`}\n              />\n            }\n            label={t(key)}\n            fieldId={key}\n            hasNoPaddingTop\n          >\n            <Controller\n              name={name as keyof FormFields}\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Switch\n                  data-testid={key}\n                  id={key}\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => {\n                    const v = value.toString();\n                    if (v === \"true\") {\n                      onChanged(attr);\n                      field.onChange(v);\n                    } else {\n                      onGenerate(attr, false);\n                    }\n                  }}\n                  aria-label={t(key)}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      {keyInfo?.certificate && section === \"true\" && (\n        <Card isFlat>\n          <CardBody className=\"kc-form-panel__body\">\n            <Form isHorizontal>\n              <Certificate keyInfo={keyInfo} />\n              <ActionGroup>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => onGenerate(attr, true)}\n                >\n                  {t(\"regenerate\")}\n                </Button>\n                <Button variant=\"secondary\" onClick={() => onImport(attr)}>\n                  {t(\"importKey\")}\n                </Button>\n                <Button variant=\"tertiary\" onClick={toggleImportDialog}>\n                  {t(\"common:export\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </CardBody>\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport const SamlKeys = ({ clientId, save }: SamlKeysProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [isChanged, setIsChanged] = useState<KeyTypes>();\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation[]>();\n  const [selectedType, setSelectedType] = useState<KeyTypes>();\n  const [openImport, setImportOpen] = useState<KeyTypes>();\n  const [refresh, setRefresh] = useState(0);\n\n  const { setValue } = useFormContext();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    () =>\n      Promise.all(\n        KEYS.map((attr) =>\n          adminClient.clients.getKeyInfo({ id: clientId, attr })\n        )\n      ),\n    (info) => setKeyInfo(info),\n    [refresh]\n  );\n\n  const generate = async (attr: KeyTypes) => {\n    const index = KEYS.indexOf(attr);\n    try {\n      const info = [...(keyInfo || [])];\n      info[index] = await adminClient.clients.generateKey({\n        id: clientId,\n        attr,\n      });\n\n      setKeyInfo(info);\n      saveAs(\n        new Blob([info[index].privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\"\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:generateError\", error);\n    }\n  };\n\n  const key = selectedType ? KEYS_MAPPING[selectedType].key : \"\";\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: t(\"disableSigning\", {\n      key: t(key),\n    }),\n    messageKey: t(\"disableSigningExplain\", {\n      key: t(key),\n    }),\n    continueButtonLabel: \"common:yes\",\n    cancelButtonLabel: \"common:no\",\n    onConfirm: () => {\n      setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n      save();\n    },\n  });\n\n  const [toggleReGenerateDialog, ReGenerateConfirm] = useConfirmDialog({\n    titleKey: \"clients:reGenerateSigning\",\n    messageKey: \"clients:reGenerateSigningExplain\",\n    continueButtonLabel: \"common:yes\",\n    cancelButtonLabel: \"common:no\",\n    onConfirm: () => {\n      generate(selectedType!);\n    },\n  });\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {isChanged && (\n        <SamlKeysDialog\n          id={clientId}\n          attr={isChanged}\n          onClose={() => {\n            setIsChanged(undefined);\n            save();\n            setRefresh(refresh + 1);\n          }}\n          onCancel={() => {\n            setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n            setIsChanged(undefined);\n          }}\n        />\n      )}\n      <DisableConfirm />\n      <ReGenerateConfirm />\n      {KEYS.map((attr, index) => (\n        <Fragment key={attr}>\n          {openImport === attr && (\n            <SamlImportKeyDialog\n              id={clientId}\n              attr={attr}\n              onClose={() => setImportOpen(undefined)}\n            />\n          )}\n          <KeySection\n            clientId={clientId}\n            keyInfo={keyInfo?.[index]}\n            attr={attr}\n            onChanged={setIsChanged}\n            onGenerate={(type, isNew) => {\n              setSelectedType(type);\n              if (!isNew) {\n                toggleDisableDialog();\n              } else {\n                toggleReGenerateDialog();\n              }\n            }}\n            onImport={() => setImportOpen(attr)}\n          />\n        </Fragment>\n      ))}\n    </PageSection>\n  );\n};\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\n\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { AddScopeDialog } from \"./AddScopeDialog\";\nimport {\n  ClientScope,\n  CellDropdown,\n  AllClientScopes,\n  AllClientScopeType,\n  changeClientScope,\n  addClientScope,\n  removeClientScope,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport {\n  nameFilter,\n  SearchDropdown,\n  SearchToolbar,\n  SearchType,\n  typeFilter,\n} from \"../../client-scopes/details/SearchFilter\";\nimport { ChangeTypeDropdown } from \"../../client-scopes/ChangeTypeDropdown\";\n\nimport { toDedicatedScope } from \"../routes/DedicatedScopeDetails\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\n\nimport \"./client-scopes.css\";\n\nexport type ClientScopesProps = {\n  clientId: string;\n  protocol: string;\n  clientName: string;\n  fineGrainedAccess?: boolean;\n};\n\nexport type Row = ClientScopeRepresentation & {\n  type: AllClientScopeType;\n  description?: string;\n};\n\nconst DEDICATED_ROW = \"dedicated\";\n\ntype TypeSelectorProps = Row & {\n  clientId: string;\n  fineGrainedAccess?: boolean;\n  refresh: () => void;\n};\n\nconst TypeSelector = ({\n  clientId,\n  refresh,\n  fineGrainedAccess,\n  ...scope\n}: TypeSelectorProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const { hasAccess } = useAccess();\n\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n\n  return (\n    <CellDropdown\n      isDisabled={isDedicatedRow(scope) || !isManager}\n      clientScope={scope}\n      type={scope.type}\n      onSelect={async (value) => {\n        try {\n          await changeClientScope(\n            adminClient,\n            clientId,\n            scope,\n            scope.type,\n            value as ClientScope\n          );\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n          refresh();\n        } catch (error) {\n          addError(\"clients:clientScopeError\", error);\n        }\n      }}\n    />\n  );\n};\n\nexport const ClientScopes = ({\n  clientId,\n  protocol,\n  clientName,\n  fineGrainedAccess,\n}: ClientScopesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const localeSort = useLocaleSort();\n\n  const [searchType, setSearchType] = useState<SearchType>(\"name\");\n\n  const [searchTypeType, setSearchTypeType] = useState<AllClientScopes>(\n    AllClientScopes.none\n  );\n\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n\n  const [rest, setRest] = useState<ClientScopeRepresentation[]>();\n  const [selectedRows, setSelectedRowState] = useState<Row[]>([]);\n  const setSelectedRows = (rows: Row[]) =>\n    setSelectedRowState(rows.filter(({ id }) => id !== DEDICATED_ROW));\n  const [kebabOpen, setKebabOpen] = useState(false);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const defaultClientScopes =\n      await adminClient.clients.listDefaultClientScopes({ id: clientId });\n    const optionalClientScopes =\n      await adminClient.clients.listOptionalClientScopes({ id: clientId });\n    const clientScopes = await adminClient.clientScopes.find();\n\n    const find = (id: string) =>\n      clientScopes.find((clientScope) => id === clientScope.id);\n\n    const optional = optionalClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.optional,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    const defaultScopes = defaultClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.default,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    const rows = [...optional, ...defaultScopes];\n    const names = rows.map((row) => row.name);\n    setRest(\n      clientScopes\n        .filter((scope) => !names.includes(scope.name))\n        .filter((scope) => scope.protocol === protocol)\n    );\n\n    const filter =\n      searchType === \"name\" ? nameFilter(search) : typeFilter(searchTypeType);\n    const firstNum = Number(first);\n    const page = localeSort(rows.filter(filter), mapByKey(\"name\"));\n\n    if (isManager) {\n      page.unshift({\n        id: DEDICATED_ROW,\n        name: t(\"dedicatedScopeName\", { clientName }),\n        type: AllClientScopes.none,\n        description: t(\"dedicatedScopeDescription\"),\n      });\n    }\n\n    return page.slice(firstNum, firstNum + Number(max));\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"client-scopes:deleteClientScope\", {\n      count: selectedRows.length,\n      name: selectedRows[0]?.name,\n    }),\n    messageKey: \"client-scopes:deleteConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await removeClientScope(\n          adminClient,\n          clientId,\n          selectedRows[0],\n          selectedRows[0].type as ClientScope\n        );\n        addAlert(t(\"clientScopeRemoveSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:clientScopeRemoveError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {rest && (\n        <AddScopeDialog\n          clientScopes={rest}\n          clientName={clientName!}\n          open={addDialogOpen}\n          toggleDialog={() => setAddDialogOpen(!addDialogOpen)}\n          onAdd={async (scopes) => {\n            try {\n              await Promise.all(\n                scopes.map(\n                  async (scope) =>\n                    await addClientScope(\n                      adminClient,\n                      clientId,\n                      scope.scope,\n                      scope.type!\n                    )\n                )\n              );\n              addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n              refresh();\n            } catch (error) {\n              addError(\"clients:clientScopeError\", error);\n            }\n          }}\n        />\n      )}\n\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey=\"clients:clientScopeList\"\n        searchPlaceholderKey={\n          searchType === \"name\" ? \"clients:searchByName\" : undefined\n        }\n        canSelectAll\n        isPaginated\n        isSearching={searchType === \"type\"}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        searchTypeComponent={\n          <SearchDropdown\n            searchType={searchType}\n            onSelect={(searchType) => setSearchType(searchType)}\n          />\n        }\n        toolbarItem={\n          <>\n            <SearchToolbar\n              searchType={searchType}\n              type={searchTypeType}\n              onSelect={(searchType) => setSearchType(searchType)}\n              onType={(value) => {\n                setSearchTypeType(value);\n                refresh();\n              }}\n            />\n            {isManager && (\n              <>\n                <DeleteConfirm />\n                <ToolbarItem>\n                  <Button onClick={() => setAddDialogOpen(true)}>\n                    {t(\"addClientScope\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <ChangeTypeDropdown\n                    clientId={clientId}\n                    selectedRows={selectedRows}\n                    refresh={refresh}\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Dropdown\n                    toggle={\n                      <KebabToggle onToggle={() => setKebabOpen(!kebabOpen)} />\n                    }\n                    isOpen={kebabOpen}\n                    isPlain\n                    dropdownItems={[\n                      <DropdownItem\n                        key=\"deleteAll\"\n                        isDisabled={selectedRows.length === 0}\n                        onClick={async () => {\n                          try {\n                            await Promise.all(\n                              selectedRows.map((row) =>\n                                removeClientScope(\n                                  adminClient,\n                                  clientId,\n                                  { ...row },\n                                  row.type as ClientScope\n                                )\n                              )\n                            );\n\n                            setKebabOpen(false);\n                            setSelectedRows([]);\n                            addAlert(t(\"clients:clientScopeRemoveSuccess\"));\n                            refresh();\n                          } catch (error) {\n                            addError(\"clients:clientScopeRemoveError\", error);\n                          }\n                        }}\n                      >\n                        {t(\"common:remove\")}\n                      </DropdownItem>,\n                    ]}\n                  />\n                </ToolbarItem>\n              </>\n            )}\n          </>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"clients:assignedClientScope\",\n            cellRenderer: (row) => {\n              if (isDedicatedRow(row)) {\n                return (\n                  <Link to={toDedicatedScope({ realm, clientId })}>\n                    {row.name}\n                  </Link>\n                );\n              }\n              return row.name!;\n            },\n          },\n          {\n            name: \"type\",\n            displayKey: \"clients:assignedType\",\n            cellRenderer: (row) => (\n              <TypeSelector clientId={clientId} refresh={refresh} {...row} />\n            ),\n          },\n          { name: \"description\" },\n        ]}\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"common:remove\"),\n                  onRowClick: async (row) => {\n                    setSelectedRows([row]);\n                    toggleDeleteDialog();\n                    return true;\n                  },\n                } as Action<Row>,\n              ]\n            : []\n        }\n        emptyState={\n          <ListEmptyState\n            message={t(\"clients:emptyClientScopes\")}\n            instructions={t(\"clients:emptyClientScopesInstructions\")}\n            primaryActionText={t(\"clients:emptyClientScopesPrimaryAction\")}\n            onPrimaryAction={() => setAddDialogOpen(true)}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  CodeBlock,\n  CodeBlockAction,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n} from \"@patternfly/react-core\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { CopyToClipboardButton } from \"./CopyToClipboardButton\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\n\ntype GeneratedCodeTabProps = {\n  user?: UserRepresentation;\n  text: string;\n  label: string;\n};\n\nexport const GeneratedCodeTab = ({\n  text,\n  user,\n  label,\n}: GeneratedCodeTabProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  return user ? (\n    <CodeBlock\n      id={label}\n      actions={\n        <CodeBlockAction>\n          <CopyToClipboardButton id=\"code\" text={text} label={label} />\n        </CodeBlockAction>\n      }\n    >\n      <KeycloakTextArea id={`text-area-${label}`} rows={20} value={text} />\n    </CodeBlock>\n  ) : (\n    <EmptyState variant=\"large\" id={label}>\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(`${label}No`)}\n      </Title>\n      <EmptyStateBody>{t(`${label}IsDisabled`)}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useHelp, HelpItem } from \"ui-shared\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { GeneratedCodeTab } from \"./GeneratedCodeTab\";\n\nimport \"./evaluate.css\";\n\nexport type EvaluateScopesProps = {\n  clientId: string;\n  protocol: string;\n};\n\nconst ProtocolMappers = ({\n  protocolMappers,\n}: {\n  protocolMappers: ProtocolMapperRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [protocolMappers]);\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(protocolMappers)}\n      ariaLabelKey=\"clients:effectiveProtocolMappers\"\n      searchPlaceholderKey=\"clients:searchForProtocol\"\n      columns={[\n        {\n          name: \"mapperName\",\n          displayKey: \"common:name\",\n        },\n        {\n          name: \"containerName\",\n          displayKey: \"clients:parentClientScope\",\n        },\n        {\n          name: \"type.category\",\n          displayKey: \"common:category\",\n        },\n        {\n          name: \"type.priority\",\n          displayKey: \"common:priority\",\n        },\n      ]}\n    />\n  );\n};\n\nconst EffectiveRoles = ({\n  effectiveRoles,\n}: {\n  effectiveRoles: RoleRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [effectiveRoles]);\n\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(effectiveRoles)}\n      ariaLabelKey=\"client:effectiveRoleScopeMappings\"\n      searchPlaceholderKey=\"clients:searchForRole\"\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"clients:role\",\n        },\n        {\n          name: \"containerId\",\n          displayKey: \"clients:origin\",\n        },\n      ]}\n    />\n  );\n};\n\nexport const EvaluateScopes = ({ clientId, protocol }: EvaluateScopesProps) => {\n  const prefix = \"openid\";\n  const { t } = useTranslation(\"clients\");\n  const { enabled } = useHelp();\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const mapperTypes = useServerInfo().protocolMapperTypes![protocol];\n\n  const [selectableScopes, setSelectableScopes] = useState<\n    ClientScopeRepresentation[]\n  >([]);\n  const [isScopeOpen, setIsScopeOpen] = useState(false);\n  const [selected, setSelected] = useState<string[]>([prefix]);\n  const [activeTab, setActiveTab] = useState(0);\n\n  const [key, setKey] = useState(\"\");\n  const refresh = () => setKey(`${new Date().getTime()}`);\n  const [effectiveRoles, setEffectiveRoles] = useState<RoleRepresentation[]>(\n    []\n  );\n  const [protocolMappers, setProtocolMappers] = useState<\n    ProtocolMapperRepresentation[]\n  >([]);\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [userInfo, setUserInfo] = useState(\"\");\n  const [idToken, setIdToken] = useState(\"\");\n\n  const tabContent1 = useRef(null);\n  const tabContent2 = useRef(null);\n  const tabContent3 = useRef(null);\n  const tabContent4 = useRef(null);\n  const tabContent5 = useRef(null);\n\n  const form = useForm();\n\n  useFetch(\n    () => adminClient.clients.listOptionalClientScopes({ id: clientId }),\n    (optionalClientScopes) => setSelectableScopes(optionalClientScopes),\n    []\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const effectiveRoles = await adminClient.clients.evaluatePermission({\n        id: clientId,\n        roleContainer: realm,\n        scope,\n        type: \"granted\",\n      });\n\n      const mapperList = (await adminClient.clients.evaluateListProtocolMapper({\n        id: clientId,\n        scope,\n      })) as ({\n        type: ProtocolMapperTypeRepresentation;\n      } & ProtocolMapperRepresentation)[];\n\n      return {\n        mapperList,\n        effectiveRoles,\n      };\n    },\n    ({ mapperList, effectiveRoles }) => {\n      setEffectiveRoles(effectiveRoles);\n      mapperList.map((mapper) => {\n        mapper.type = mapperTypes.filter(\n          (type) => type.id === mapper.protocolMapper\n        )[0];\n      });\n\n      setProtocolMappers(mapperList);\n      refresh();\n    },\n    [selected]\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const user = form.getValues(\"user\");\n      if (!user) return [];\n\n      return await Promise.all([\n        adminClient.clients.evaluateGenerateAccessToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateUserInfo({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateIdToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n      ]);\n    },\n    ([accessToken, userInfo, idToken]) => {\n      setAccessToken(prettyPrintJSON(accessToken));\n      setUserInfo(prettyPrintJSON(userInfo));\n      setIdToken(prettyPrintJSON(idToken));\n    },\n    [form.getValues(\"user\"), selected]\n  );\n\n  return (\n    <>\n      <PageSection variant=\"light\">\n        {enabled && (\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"clients-help:evaluateExplain\")}\n            </Text>\n          </TextContent>\n        )}\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"scopeParameter\")}\n            fieldId=\"scopeParameter\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clients-help:scopeParameter\")}\n                fieldLabelId=\"clients:scopeParameter\"\n              />\n            }\n          >\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <Select\n                  toggleId=\"scopeParameter\"\n                  variant={SelectVariant.typeaheadMulti}\n                  typeAheadAriaLabel={t(\"scopeParameter\")}\n                  onToggle={() => setIsScopeOpen(!isScopeOpen)}\n                  isOpen={isScopeOpen}\n                  selections={selected}\n                  onSelect={(_, value) => {\n                    const option = value as string;\n                    if (selected.includes(option)) {\n                      if (option !== prefix) {\n                        setSelected(selected.filter((item) => item !== option));\n                      }\n                    } else {\n                      setSelected([...selected, option]);\n                    }\n                  }}\n                  aria-labelledby={t(\"scopeParameter\")}\n                  placeholderText={t(\"scopeParameterPlaceholder\")}\n                >\n                  {selectableScopes.map((option, index) => (\n                    <SelectOption key={index} value={option.name} />\n                  ))}\n                </Select>\n              </SplitItem>\n              <SplitItem>\n                <ClipboardCopy className=\"keycloak__scopes_evaluate__clipboard-copy\">\n                  {selected.join(\" \")}\n                </ClipboardCopy>\n              </SplitItem>\n            </Split>\n          </FormGroup>\n          <FormProvider {...form}>\n            <UserSelect\n              name=\"user\"\n              label=\"users\"\n              helpText={t(\"clients-help:user\")}\n              defaultValue=\"\"\n              variant={SelectVariant.typeahead}\n              isRequired\n            />\n          </FormProvider>\n        </Form>\n      </PageSection>\n\n      <Grid hasGutter className=\"keycloak__scopes_evaluate__tabs\">\n        <GridItem span={8}>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveProtocolMappers\"\n            eventKey={0}\n            id=\"effectiveProtocolMappers\"\n            ref={tabContent1}\n          >\n            <ProtocolMappers protocolMappers={protocolMappers} />\n          </TabContent>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveRoleScopeMappings\"\n            eventKey={1}\n            id=\"effectiveRoleScopeMappings\"\n            ref={tabContent2}\n            hidden\n          >\n            <EffectiveRoles effectiveRoles={effectiveRoles} />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedAccessToken\")}\n            eventKey={2}\n            id=\"tab-generated-access-token\"\n            ref={tabContent3}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={accessToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedAccessToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedIdToken\")}\n            eventKey={3}\n            id=\"tab-generated-id-token\"\n            ref={tabContent4}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={idToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedIdToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedUserInfo\")}\n            eventKey={4}\n            id=\"tab-generated-user-info\"\n            ref={tabContent5}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={userInfo}\n              user={form.getValues(\"user\")}\n              label=\"generatedUserInfo\"\n            />\n          </TabContent>\n        </GridItem>\n        <GridItem span={4}>\n          <Tabs\n            id=\"tabs\"\n            key={key}\n            isVertical\n            activeKey={activeTab}\n            onSelect={(_, key) => setActiveTab(key as number)}\n          >\n            <Tab\n              id=\"effectiveProtocolMappers\"\n              aria-controls=\"effectiveProtocolMappers\"\n              eventKey={0}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveProtocolMappers\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:effectiveProtocolMappers\"\n                    helpText={t(\"clients-help:effectiveProtocolMappers\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent1}\n            />\n            <Tab\n              id=\"effectiveRoleScopeMappings\"\n              aria-controls=\"effectiveRoleScopeMappings\"\n              eventKey={1}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveRoleScopeMappings\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:effectiveRoleScopeMappings\"\n                    helpText={t(\"clients-help:effectiveRoleScopeMappings\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent2}\n            ></Tab>\n            <Tab\n              id=\"generatedAccessToken\"\n              aria-controls=\"generatedAccessToken\"\n              eventKey={2}\n              title={\n                <TabTitleText>\n                  {t(\"generatedAccessToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:generatedAccessToken\"\n                    helpText={t(\"clients-help:generatedAccessToken\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent3}\n            />\n            <Tab\n              id=\"generatedIdToken\"\n              aria-controls=\"generatedIdToken\"\n              eventKey={3}\n              title={\n                <TabTitleText>\n                  {t(\"generatedIdToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:generatedIdToken\"\n                    helpText={t(\"clients-help:generatedIdToken\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent4}\n            />\n            <Tab\n              id=\"generatedUserInfo\"\n              aria-controls=\"generatedUserInfo\"\n              eventKey={4}\n              title={\n                <TabTitleText>\n                  {t(\"generatedUserInfo\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:generatedUserInfo\"\n                    helpText={t(\"clients-help:generatedUserInfo\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent5}\n            />\n          </Tabs>\n        </GridItem>\n      </Grid>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { AlertVariant, PageSection } from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { RoleMapping, Row } from \"../../components/role-mapping/RoleMapping\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { toUser } from \"../../user/routes/User\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useAccess } from \"../../context/access/Access\";\n\nimport \"./service-account.css\";\n\ntype ServiceAccountProps = {\n  client: ClientRepresentation;\n};\n\nexport const ServiceAccount = ({ client }: ServiceAccountProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [serviceAccount, setServiceAccount] = useState<UserRepresentation>();\n\n  const { hasAccess } = useAccess();\n  const hasManageClients = hasAccess(\"manage-clients\");\n\n  useFetch(\n    () =>\n      adminClient.clients.getServiceAccountUser({\n        id: client.id!,\n      }),\n    (serviceAccount) => setServiceAccount(serviceAccount),\n    []\n  );\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.users.addRealmRoleMappings({\n        id: serviceAccount?.id!,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.users.addClientRoleMappings({\n              id: serviceAccount?.id!,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            })\n          )\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:roleMappingUpdatedError\", error);\n    }\n  };\n  return serviceAccount ? (\n    <>\n      <PageSection className=\"pf-u-pb-0\">\n        <InfoCircleIcon className=\"pf-c-alert__icon keycloak--service-account--info-text\" />\n        <span className=\"pf-u-pl-sm\">\n          <Trans i18nKey=\"clients-help:manageServiceAccountUser\">\n            {\"\"}\n            <Link\n              to={toUser({ realm, id: serviceAccount.id!, tab: \"settings\" })}\n            >\n              {{ link: serviceAccount.username }}\n            </Link>\n          </Trans>\n        </span>\n      </PageSection>\n      <RoleMapping\n        name={client.clientId!}\n        id={serviceAccount.id!}\n        type=\"users\"\n        isManager={hasManageClients || client.access?.configure}\n        save={assignRoles}\n      />\n    </>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Divider,\n  DropdownItem,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { cloneDeep, sortBy } from \"lodash-es\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  ConfirmDialogModal,\n  useConfirmDialog,\n} from \"../components/confirm-dialog/ConfirmDialog\";\nimport { DownloadDialog } from \"../components/download-dialog/DownloadDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { RolesList } from \"../components/roles-list/RolesList\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport {\n  ViewHeader,\n  ViewHeaderBadge,\n} from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport {\n  convertAttributeNameToForm,\n  convertFormValuesToObject,\n  convertToFormValues,\n  exportClient,\n} from \"../util\";\nimport { useParams } from \"../utils/useParams\";\nimport useToggle from \"../utils/useToggle\";\nimport { AdvancedTab } from \"./AdvancedTab\";\nimport { AuthorizationEvaluate } from \"./authorization/AuthorizationEvaluate\";\nimport { AuthorizationExport } from \"./authorization/AuthorizationExport\";\nimport { AuthorizationPermissions } from \"./authorization/Permissions\";\nimport { AuthorizationPolicies } from \"./authorization/Policies\";\nimport { AuthorizationResources } from \"./authorization/Resources\";\nimport { AuthorizationScopes } from \"./authorization/Scopes\";\nimport { AuthorizationSettings } from \"./authorization/Settings\";\nimport { ClientSessions } from \"./ClientSessions\";\nimport { ClientSettings } from \"./ClientSettings\";\nimport { Credentials } from \"./credentials/Credentials\";\nimport { Keys } from \"./keys/Keys\";\nimport { SamlKeys } from \"./keys/SamlKeys\";\nimport {\n  AuthorizationTab,\n  toAuthorizationTab,\n} from \"./routes/AuthenticationTab\";\nimport { ClientParams, ClientTab, toClient } from \"./routes/Client\";\nimport { toClientRole } from \"./routes/ClientRole\";\nimport { toClients } from \"./routes/Clients\";\nimport { ClientScopesTab, toClientScopesTab } from \"./routes/ClientScopeTab\";\nimport { toCreateRole } from \"./routes/NewRole\";\nimport { ClientScopes } from \"./scopes/ClientScopes\";\nimport { EvaluateScopes } from \"./scopes/EvaluateScopes\";\nimport { ServiceAccount } from \"./service-account/ServiceAccount\";\nimport { getProtocolName, isRealmClient } from \"./utils\";\n\ntype ClientDetailHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean | undefined;\n  save: () => void;\n  client: ClientRepresentation;\n  toggleDownloadDialog: () => void;\n  toggleDeleteDialog: () => void;\n};\n\nconst ClientDetailHeader = ({\n  onChange,\n  value,\n  save,\n  client,\n  toggleDownloadDialog,\n  toggleDeleteDialog,\n}: ClientDetailHeaderProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"clients:disableConfirmTitle\",\n    messageKey: \"clients:disableConfirm\",\n    continueButtonLabel: \"common:disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const badges = useMemo<ViewHeaderBadge[]>(() => {\n    const protocolName = getProtocolName(\n      t,\n      client.protocol ?? \"openid-connect\"\n    );\n\n    const text = client.bearerOnly ? (\n      <Tooltip\n        data-testid=\"bearer-only-explainer-tooltip\"\n        content={t(\"explainBearerOnly\")}\n      >\n        <Label\n          data-testid=\"bearer-only-explainer-label\"\n          icon={<InfoCircleIcon />}\n        >\n          {protocolName}\n        </Label>\n      </Tooltip>\n    ) : (\n      <Label>{protocolName}</Label>\n    );\n\n    return [{ text }];\n  }, [client, t]);\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const dropdownItems = [\n    <DropdownItem key=\"download\" onClick={toggleDownloadDialog}>\n      {t(\"downloadAdapterConfig\")}\n    </DropdownItem>,\n    <DropdownItem key=\"export\" onClick={() => exportClient(client)}>\n      {t(\"common:export\")}\n    </DropdownItem>,\n    ...(!isRealmClient(client) && isManager\n      ? [\n          <Divider key=\"divider\" />,\n          <DropdownItem\n            data-testid=\"delete-client\"\n            key=\"delete\"\n            onClick={toggleDeleteDialog}\n          >\n            {t(\"common:delete\")}\n          </DropdownItem>,\n        ]\n      : []),\n  ];\n\n  return (\n    <>\n      <DisableConfirm />\n      <ViewHeader\n        titleKey={client.clientId!}\n        subKey=\"clients:clientsExplain\"\n        badges={badges}\n        divider={false}\n        isReadOnly={!isManager}\n        helpTextKey=\"clients-help:enableDisable\"\n        dropdownItems={dropdownItems}\n        isEnabled={value}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport type SaveOptions = {\n  confirmed?: boolean;\n  messageKey?: string;\n};\n\nexport type FormFields = Omit<\n  ClientRepresentation,\n  \"authorizationSettings\" | \"resources\"\n>;\n\nexport default function ClientDetails() {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const { profileInfo } = useServerInfo();\n\n  const { hasAccess } = useAccess();\n  const hasManageAuthorization = hasAccess(\"manage-authorization\");\n  const permissionsEnabled =\n    !profileInfo?.disabledFeatures?.includes(\"ADMIN_FINE_GRAINED_AUTHZ\") &&\n    hasManageAuthorization;\n  const hasManageClients = hasAccess(\"manage-clients\");\n  const hasViewClients = hasAccess(\"view-clients\");\n  const hasViewUsers = hasAccess(\"view-users\");\n  const hasQueryUsers = hasAccess(\"query-users\");\n\n  const navigate = useNavigate();\n\n  const [downloadDialogOpen, toggleDownloadDialogOpen] = useToggle();\n  const [changeAuthenticatorOpen, toggleChangeAuthenticatorOpen] = useToggle();\n\n  const form = useForm<FormFields>();\n  const { clientId } = useParams<ClientParams>();\n  const [key, setKey] = useState(0);\n\n  const clientAuthenticatorType = useWatch({\n    control: form.control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"client-secret\",\n  });\n\n  const [client, setClient] = useState<ClientRepresentation>();\n\n  const loader = async () => {\n    const roles = await adminClient.clients.listRoles({ id: clientId });\n    return sortBy(roles, (role) => role.name?.toUpperCase());\n  };\n\n  const useTab = (tab: ClientTab) =>\n    useRoutableTab(\n      toClient({\n        realm,\n        clientId,\n        tab,\n      })\n    );\n\n  const settingsTab = useTab(\"settings\");\n  const keysTab = useTab(\"keys\");\n  const credentialsTab = useTab(\"credentials\");\n  const rolesTab = useTab(\"roles\");\n  const clientScopesTab = useTab(\"clientScopes\");\n  const authorizationTab = useTab(\"authorization\");\n  const serviceAccountTab = useTab(\"serviceAccount\");\n  const sessionsTab = useTab(\"sessions\");\n  const permissionsTab = useTab(\"permissions\");\n  const advancedTab = useTab(\"advanced\");\n\n  const useClientScopesTab = (tab: ClientScopesTab) =>\n    useRoutableTab(\n      toClientScopesTab({\n        realm,\n        clientId,\n        tab,\n      })\n    );\n\n  const clientScopesSetupTab = useClientScopesTab(\"setup\");\n  const clientScopesEvaluateTab = useClientScopesTab(\"evaluate\");\n\n  const useAuthorizationTab = (tab: AuthorizationTab) =>\n    useRoutableTab(\n      toAuthorizationTab({\n        realm,\n        clientId,\n        tab,\n      })\n    );\n\n  const authorizationSettingsTab = useAuthorizationTab(\"settings\");\n  const authorizationResourcesTab = useAuthorizationTab(\"resources\");\n  const authorizationScopesTab = useAuthorizationTab(\"scopes\");\n  const authorizationPoliciesTab = useAuthorizationTab(\"policies\");\n  const authorizationPermissionsTab = useAuthorizationTab(\"permissions\");\n  const authorizationEvaluateTab = useAuthorizationTab(\"evaluate\");\n  const authorizationExportTab = useAuthorizationTab(\"export\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:clientDeleteConfirmTitle\",\n    messageKey: \"clients:clientDeleteConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.del({ id: clientId });\n        addAlert(t(\"clientDeletedSuccess\"), AlertVariant.success);\n        navigate(toClients({ realm }));\n      } catch (error) {\n        addError(\"clients:clientDeleteError\", error);\n      }\n    },\n  });\n\n  const setupForm = (client: ClientRepresentation) => {\n    form.reset({ ...client });\n    convertToFormValues(client, form.setValue);\n    if (client.attributes?.[\"acr.loa.map\"]) {\n      form.setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\"),\n        // @ts-ignore\n        Object.entries(JSON.parse(client.attributes[\"acr.loa.map\"])).flatMap(\n          ([key, value]) => ({ key, value })\n        )\n      );\n    }\n  };\n\n  useFetch(\n    () => adminClient.clients.findOne({ id: clientId }),\n    (fetchedClient) => {\n      if (!fetchedClient) {\n        throw new Error(t(\"common:notFound\"));\n      }\n      setClient(cloneDeep(fetchedClient));\n      setupForm(fetchedClient);\n    },\n    [clientId, key]\n  );\n\n  const save = async (\n    { confirmed = false, messageKey = \"clientSaveSuccess\" }: SaveOptions = {\n      confirmed: false,\n      messageKey: \"clientSaveSuccess\",\n    }\n  ) => {\n    if (!(await form.trigger())) {\n      return;\n    }\n\n    if (\n      !client?.publicClient &&\n      client?.clientAuthenticatorType !== clientAuthenticatorType &&\n      !confirmed\n    ) {\n      toggleChangeAuthenticatorOpen();\n      return;\n    }\n\n    const values = convertFormValuesToObject(form.getValues());\n\n    const submittedClient =\n      convertFormValuesToObject<ClientRepresentation>(values);\n\n    if (submittedClient.attributes?.[\"acr.loa.map\"]) {\n      submittedClient.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (submittedClient.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value])\n        )\n      );\n    }\n\n    try {\n      const newClient: ClientRepresentation = {\n        ...client,\n        ...submittedClient,\n      };\n\n      newClient.clientId = newClient.clientId?.trim();\n\n      await adminClient.clients.update({ id: clientId }, newClient);\n      setupForm(newClient);\n      setClient(newClient);\n      addAlert(t(messageKey), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:clientSaveError\", error);\n    }\n  };\n\n  if (!client) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <ConfirmDialogModal\n        continueButtonLabel=\"common:yes\"\n        cancelButtonLabel=\"common:no\"\n        titleKey={t(\"changeAuthenticatorConfirmTitle\", {\n          clientAuthenticatorType: clientAuthenticatorType,\n        })}\n        open={changeAuthenticatorOpen}\n        toggleDialog={toggleChangeAuthenticatorOpen}\n        onConfirm={() => save({ confirmed: true })}\n      >\n        <>\n          {t(\"changeAuthenticatorConfirm\", {\n            clientAuthenticatorType: clientAuthenticatorType,\n          })}\n        </>\n      </ConfirmDialogModal>\n      <DeleteConfirm />\n      {downloadDialogOpen && (\n        <DownloadDialog\n          id={client.id!}\n          protocol={client.protocol}\n          open\n          toggleDialog={toggleDownloadDialogOpen}\n        />\n      )}\n      <Controller\n        name=\"enabled\"\n        control={form.control}\n        defaultValue={true}\n        render={({ field }) => (\n          <ClientDetailHeader\n            value={field.value}\n            onChange={field.onChange}\n            client={client}\n            save={save}\n            toggleDeleteDialog={toggleDeleteDialog}\n            toggleDownloadDialog={toggleDownloadDialogOpen}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <FormProvider {...form}>\n          <RoutableTabs\n            data-testid=\"client-tabs\"\n            aria-label=\"client-tabs\"\n            isBox\n            mountOnEnter\n          >\n            <Tab\n              id=\"settings\"\n              data-testid=\"clientSettingsTab\"\n              title={<TabTitleText>{t(\"common:settings\")}</TabTitleText>}\n              {...settingsTab}\n            >\n              <ClientSettings\n                client={client}\n                save={() => save()}\n                reset={() => setupForm(client)}\n              />\n            </Tab>\n            {((!client.publicClient && !isRealmClient(client)) ||\n              client.protocol === \"saml\") && (\n              <Tab\n                id=\"keys\"\n                data-testid=\"keysTab\"\n                title={<TabTitleText>{t(\"keys\")}</TabTitleText>}\n                {...keysTab}\n              >\n                {client.protocol === \"openid-connect\" && (\n                  <Keys\n                    clientId={clientId}\n                    save={save}\n                    hasConfigureAccess={client.access?.configure}\n                  />\n                )}\n                {client.protocol === \"saml\" && (\n                  <SamlKeys clientId={clientId} save={save} />\n                )}\n              </Tab>\n            )}\n            {!client.publicClient &&\n              !isRealmClient(client) &&\n              (hasViewClients || client.access?.configure) && (\n                <Tab\n                  id=\"credentials\"\n                  title={<TabTitleText>{t(\"credentials\")}</TabTitleText>}\n                  {...credentialsTab}\n                >\n                  <Credentials\n                    key={key}\n                    client={client}\n                    save={save}\n                    refresh={() => setKey(key + 1)}\n                  />\n                </Tab>\n              )}\n            <Tab\n              id=\"roles\"\n              data-testid=\"rolesTab\"\n              title={<TabTitleText>{t(\"roles\")}</TabTitleText>}\n              {...rolesTab}\n            >\n              <RolesList\n                loader={loader}\n                paginated={false}\n                messageBundle=\"clients\"\n                toCreate={toCreateRole({ realm, clientId: client.id! })}\n                toDetail={(roleId) =>\n                  toClientRole({\n                    realm,\n                    clientId: client.id!,\n                    id: roleId,\n                    tab: \"details\",\n                  })\n                }\n                isReadOnly={!(hasManageClients || client.access?.configure)}\n              />\n            </Tab>\n            {!isRealmClient(client) && !client.bearerOnly && hasQueryUsers && (\n              <Tab\n                id=\"clientScopes\"\n                data-testid=\"clientScopesTab\"\n                title={<TabTitleText>{t(\"clientScopes\")}</TabTitleText>}\n                {...clientScopesTab}\n              >\n                <RoutableTabs\n                  defaultLocation={toClientScopesTab({\n                    realm,\n                    clientId,\n                    tab: \"setup\",\n                  })}\n                >\n                  <Tab\n                    id=\"setup\"\n                    title={<TabTitleText>{t(\"setup\")}</TabTitleText>}\n                    {...clientScopesSetupTab}\n                  >\n                    <ClientScopes\n                      clientName={client.clientId!}\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                      fineGrainedAccess={client!.access?.manage}\n                    />\n                  </Tab>\n                  <Tab\n                    id=\"evaluate\"\n                    title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                    {...clientScopesEvaluateTab}\n                  >\n                    <EvaluateScopes\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                    />\n                  </Tab>\n                </RoutableTabs>\n              </Tab>\n            )}\n            {client!.authorizationServicesEnabled && hasManageAuthorization && (\n              <Tab\n                id=\"authorization\"\n                data-testid=\"authorizationTab\"\n                title={<TabTitleText>{t(\"authorization\")}</TabTitleText>}\n                {...authorizationTab}\n              >\n                <RoutableTabs\n                  mountOnEnter\n                  unmountOnExit\n                  defaultLocation={toAuthorizationTab({\n                    realm,\n                    clientId,\n                    tab: \"settings\",\n                  })}\n                >\n                  <Tab\n                    id=\"settings\"\n                    data-testid=\"authorizationSettings\"\n                    title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n                    {...authorizationSettingsTab}\n                  >\n                    <AuthorizationSettings clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"resources\"\n                    data-testid=\"authorizationResources\"\n                    title={<TabTitleText>{t(\"resources\")}</TabTitleText>}\n                    {...authorizationResourcesTab}\n                  >\n                    <AuthorizationResources clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"scopes\"\n                    data-testid=\"authorizationScopes\"\n                    title={<TabTitleText>{t(\"scopes\")}</TabTitleText>}\n                    {...authorizationScopesTab}\n                  >\n                    <AuthorizationScopes clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"policies\"\n                    data-testid=\"authorizationPolicies\"\n                    title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                    {...authorizationPoliciesTab}\n                  >\n                    <AuthorizationPolicies clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"permissions\"\n                    data-testid=\"authorizationPermissions\"\n                    title={\n                      <TabTitleText>{t(\"common:permissions\")}</TabTitleText>\n                    }\n                    {...authorizationPermissionsTab}\n                  >\n                    <AuthorizationPermissions clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"evaluate\"\n                    data-testid=\"authorizationEvaluate\"\n                    title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                    {...authorizationEvaluateTab}\n                  >\n                    <AuthorizationEvaluate client={client} save={save} />\n                  </Tab>\n                  <Tab\n                    id=\"export\"\n                    data-testid=\"authorizationExport\"\n                    title={<TabTitleText>{t(\"common:export\")}</TabTitleText>}\n                    {...authorizationExportTab}\n                  >\n                    <AuthorizationExport />\n                  </Tab>\n                </RoutableTabs>\n              </Tab>\n            )}\n            {client!.serviceAccountsEnabled && hasViewUsers && (\n              <Tab\n                id=\"serviceAccount\"\n                data-testid=\"serviceAccountTab\"\n                title={<TabTitleText>{t(\"serviceAccount\")}</TabTitleText>}\n                {...serviceAccountTab}\n              >\n                <ServiceAccount client={client} />\n              </Tab>\n            )}\n            <Tab\n              id=\"sessions\"\n              data-testid=\"sessionsTab\"\n              title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n              {...sessionsTab}\n            >\n              <ClientSessions client={client} />\n            </Tab>\n            {permissionsEnabled &&\n              (hasManageClients || client.access?.manage) && (\n                <Tab\n                  id=\"permissions\"\n                  data-testid=\"permissionsTab\"\n                  title={<TabTitleText>{t(\"common:permissions\")}</TabTitleText>}\n                  {...permissionsTab}\n                >\n                  <PermissionsTab id={client.id!} type=\"clients\" />\n                </Tab>\n              )}\n            <Tab\n              id=\"advanced\"\n              data-testid=\"advancedTab\"\n              title={<TabTitleText>{t(\"advanced\")}</TabTitleText>}\n              {...advancedTab}\n            >\n              <AdvancedTab save={save} client={client} />\n            </Tab>\n          </RoutableTabs>\n        </FormProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["styles","CodeBlock","_a","children","className","actions","props","__rest","React.createElement","css","CodeBlockAction","TextListVariants","TextList","component","isPlain","Component","TextListItemVariants","TextListItem","DownloadDialog","id","open","toggleDialog","protocol","adminClient","useAdminClient","realm","useRealm","t","useTranslation","enabled","useHelp","configFormats","useServerInfo","selected","setSelected","useState","snippet","setSnippet","openType","setOpenType","selectedConfig","useMemo","config","sanitizeSnippet","useFetch","addTrailingSlash","getAuthorizationHeaders","prettyPrintJSON","useEffect","jsx","ConfirmDialogModal","saveAs","ModalVariant","Form","jsxs","Stack","StackItem","FormGroup","HelpItem","Select","isExpanded","SelectVariant","_","value","configFormat","SelectOption","KeycloakTextArea","inherited","never","expires","TokenLifespan","name","defaultValue","units","setOpen","focused","setFocused","onFocus","onBlur","control","useFormContext","isExpireSet","Controller","field","Split","SplitItem","TimeSelector","AdvancedSettings","save","reset","hasConfigureAccess","setRealm","realmName","FormAccess","convertAttributeNameToForm","Fragment","Switch","v","KeyValueInput","MultiLineInput","ActionGroup","Button","AuthenticationOverrides","flows","setFlows","browserFlowOpen","setBrowserFlowOpen","directGrantOpen","setDirectGrantOpen","filteredFlows","flow","sortBy","f","AddHostDialog","isOpen","onAdded","onClose","register","handleSubmit","isDirty","isValid","useForm","addAlert","addError","useAlerts","onSubmit","node","AlertVariant","error","Modal","ButtonVariant","KeycloakTextInput","ClusteringPanel","registeredNodes","access","formatDate","useFormatDate","nodes","setNodes","expanded","setExpanded","selectedNode","setSelectedNode","addNodeOpen","setAddNodeOpen","key","setKey","refresh","testCluster","result","parseResult","toggleDeleteNodeConfirm","DeleteNodeConfirm","useConfirmDialog","object","ExpandableSection","KeycloakDataTable","entry","ToolbarItem","FORMAT_DATE_AND_TIME","ListEmptyState","ApplicationUrls","FineGrainOpenIdConnect","providers","clientSignatureProviders","contentEncryptionProviders","cekManagementProviders","signatureProviders","accessTokenOpen","setAccessTokenOpen","idTokenOpen","setIdTokenOpen","idTokenKeyManagementOpen","setIdTokenKeyManagementOpen","idTokenContentOpen","setIdTokenContentOpen","userInfoSignedResponseOpen","setUserInfoSignedResponseOpen","requestObjectSignatureOpen","setRequestObjectSignatureOpen","requestObjectRequiredOpen","setRequestObjectRequiredOpen","requestObjectEncryptionOpen","setRequestObjectEncryptionOpen","requestObjectEncodingOpen","setRequestObjectEncodingOpen","authorizationSignedOpen","setAuthorizationSignedOpen","authorizationEncryptedOpen","setAuthorizationEncryptedOpen","authorizationEncryptedResponseOpen","setAuthorizationEncryptedResponseOpen","userInfoResponseEncryptionKeyManagementOpen","setUserInfoResponseEncryptionKeyManagementOpen","userInfoResponseEncryptionContentEncryptionOpen","setUserInfoResponseEncryptionContentEncryptionOpen","keyOptions","sortProviders","p","cekManagementOptions","signatureOptions","contentOptions","requestObjectOptions","requestObjectEncryptionOptions","requestObjectEncodingOptions","authorizationSignedResponseOptions","requestObjectRequiredOptions","FineGrainSamlEndpointConfig","OpenIdConnectCompatibilityModes","RevocationPanel","adminUrl","revocationFieldName","pushRevocationButtonRef","useRef","getValues","setValue","setNotBefore","time","messageKey","getNotBeforeValue","date","push","Text","Trans","Link","toClient","InputGroup","Tooltip","prefixKey","successCount","failedCount","AdvancedTab","client","openIdConnect","publicClient","attributes","authenticationFlowBindingOverrides","resetFields","names","PageSection","ScrollForm","toUpperCase","AuthorizationEvaluateResourcePolicies","idx","rowIndex","outerPolicy","resource","clientId","useParams","Tbody","Tr","Td","prev","toPermissionDetails","DecisionEffect","ExpandableRowContent","DescriptionList","TextContent","item","toPolicyDetails","capitalize","AuthorizationEvaluateResource","evaluateResults","TableComposable","Thead","Th","AuthorizationDataModal","data","show","toggle","useToggle","TextVariants","filterResults","results","filter","status","Results","evaluateResult","back","filterDropdownOpen","toggleFilterDropdown","setFilter","searchQuery","setSearchQuery","searchInput","setSearchInput","confirmSearchQuery","handleKeyDown","e","filteredResources","noEvaluatedData","noFilteredData","Toolbar","ToolbarGroup","TextInput","SearchIcon","Divider","ValueInput","attribute","selectableValues","resources","isValueOpenArray","setIsValueOpenArray","toggleValueSelect","arr","attributeValues","values","defaultContextAttributes","attr","renderSelectOptionType","scopeValues","scope","getMessageBundleKey","attributeName","camelCase","KeyBasedAttributeInput","watch","fields","append","remove","useFieldArray","isKeyOpenArray","setIsKeyOpenArray","toggleKeySelect","watchLastValue","MinusCircleIcon","PlusCircleIcon","AuthorizationEvaluate","form","trigger","errors","scopesDropdownOpen","setScopesDropdownOpen","roleDropdownOpen","setRoleDropdownOpen","setIsExpanded","applyToResourceType","setApplyToResourceType","setResources","scopes","setScopes","setEvaluateResult","clientRoles","setClientRoles","hasAccess","useAccess","ForbiddenSection","roles","evaluate","formValues","keys","keyValueToArray","resEval","r","s","evaluation","user","useWatch","FormProvider","FormPanel","ClientSelect","UserSelect","option","event","role","AuthorizationExport","code","setCode","authorizationDetails","setAuthorizationDetails","authDetails","exportAuthDetails","KeycloakSpinner","SearchDropdown","types","search","onSearch","isResource","typeOpen","toggleType","submit","typeOptions","type","Dropdown","DropdownToggle","MoreLabel","array","Label","DetailDescription","DetailDescriptionLink","convert","link","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","element","EmptyButton","permissionType","disabled","navigate","useNavigate","toNewPermission","TooltipEmptyButton","EmptyPermissionsState","isResourceEnabled","isScopeEnabled","EmptyState","EmptyStateIcon","Title","EmptyStateBody","AssociatedPoliciesRenderer","row","AuthorizationPermissions","permissions","setPermissions","selectedPermission","setSelectedPermission","policyProviders","setPolicyProviders","disabledCreate","setDisabledCreate","createOpen","toggleCreate","setSearch","max","setMax","first","setFirst","permission","associatedPolicies","params","policies","toggleDeleteDialog","DeleteConfirm","noData","searching","PaginatingTableToolbar","DropdownItem","DropdownSeparator","Alert","rows","index","NewPolicyDialog","onSelect","localeSort","useLocaleSort","sortedPolicies","mapByKey","provider","isValidComponentType","DependentPoliciesRenderer","AuthorizationPolicies","setPolicies","selectedPolicy","setSelectedPolicy","newDialog","policy","dependentPolicies","toCreatePolicy","DetailCell","uris","setScope","toScopeDetails","UriRenderer","AuthorizationResources","selectedResource","setSelectedResource","setPermission","fetchPermissions","toCreateResource","toResourceDetails","AuthorizationScopes","deleteDialog","selectedScope","setSelectedScope","collapsed","setCollapsed","getScope","c","newlyOpened","resourcesScopes","resourceScope","DeleteScopeDialog","toNewScope","_event","SaveReset","isActive","rest","ImportDialog","onConfirm","closeDialog","imported","setImported","JsonFileUpload","Radio","POLICY_ENFORCEMENT_MODES","AuthorizationSettings","setResource","importDialog","toggleImportDialog","importResource","mode","DecisionStrategySelect","ClientSessions","loader","mapSessionsToType","sessions","session","SessionsTable","Toggle","label","SamlConfig","nameFormatOpen","setNameFormatOpen","SIGNATURE_ALGORITHMS","KEYNAME_TRANSFORMER","CANONICALIZATION","SamlSignature","algOpen","setAlgOpen","keyOpen","setKeyOpen","canOpen","setCanOpen","signDocs","signAssertion","algorithm","can","AccessSettings","isManager","LoginSettings","LoginSettingsPanel","loginThemeOpen","setLoginThemeOpen","loginThemes","consentRequired","displayOnConsentScreen","theme","LogoutPanel","frontchannelLogout","beerify","ValidatedOptions","uri","ClientSettings","ClientDescription","CapabilityConfig","CopyToClipboardButton","text","variant","setTimeout","useSetTimeout","copy","setCopy","copyMessage","copyToClipboard","ClipboardCopyButton","SecretInput","buttonLabel","secret","PasswordInput","ExpireDateFormatter","unixTimeToString","ClientSecret","secretRotated","setSecretRotated","secretExpirationTime","secretRotatedExpirationTime","expired","toggleInvalidateConfirm","InvalidateConfirm","SignedJWT","X509","Credentials","setProviders","clientAuthenticatorType","setSecret","accessToken","setAccessToken","regenerate","call","message","regenerateClientSecret","toggleClientSecretConfirm","ClientSecretConfirm","regenerateAccessToken","toggleAccessTokenConfirm","AccessTokenConfirm","Card","CardBody","ClipboardCopy","CertificateDisplay","keyInfo","Certificate","plain","useId","StoreSettings","hidePassword","isSaml","CERT_PEM","extensions","getFileExtension","format","KeyForm","hasPem","useFile","filename","setFilename","openArchiveFormat","setOpenArchiveFormat","cryptoInfo","supportedKeystoreTypes","FileUpload","GenerateKeyDialog","ImportKeyDialog","baseFormats","formats","importFile","Keys","setKeyInfo","openGenerateKeys","toggleOpenGenerateKeys","setOpenGenerateKeys","openImportKeys","toggleOpenImportKeys","setOpenImportKeys","useJwksUrl","info","generate","keyStore","importKey","formData","file","CardHeader","CardTitle","ExportSamlKeyDialog","close","download","submitForm","callback","SamlKeysDialog","onCancel","setType","setKeys","Flex","FlexItem","SamlImportKeyDialog","KEYS","KEYS_MAPPING","KeySection","onChanged","onGenerate","onImport","title","showImportDialog","section","SamlKeys","isChanged","setIsChanged","selectedType","setSelectedType","openImport","setImportOpen","setRefresh","toggleDisableDialog","DisableConfirm","toggleReGenerateDialog","ReGenerateConfirm","isNew","DEDICATED_ROW","TypeSelector","fineGrainedAccess","isDedicatedRow","CellDropdown","changeClientScope","ClientScopes","clientName","searchType","setSearchType","searchTypeType","setSearchTypeType","AllClientScopes","addDialogOpen","setAddDialogOpen","setRest","selectedRows","setSelectedRowState","setSelectedRows","kebabOpen","setKebabOpen","defaultClientScopes","optionalClientScopes","clientScopes","find","clientScope","optional","ClientScope","defaultScopes","nameFilter","typeFilter","firstNum","page","removeClientScope","AddScopeDialog","addClientScope","SearchToolbar","ChangeTypeDropdown","KebabToggle","toDedicatedScope","GeneratedCodeTab","ProtocolMappers","protocolMappers","EffectiveRoles","effectiveRoles","EvaluateScopes","prefix","mapperTypes","selectableScopes","setSelectableScopes","isScopeOpen","setIsScopeOpen","activeTab","setActiveTab","setEffectiveRoles","setProtocolMappers","userInfo","setUserInfo","idToken","setIdToken","tabContent1","tabContent2","tabContent3","tabContent4","tabContent5","mapperList","mapper","QuestionCircleIcon","Grid","GridItem","TabContent","Tabs","Tab","TabTitleText","ServiceAccount","serviceAccount","setServiceAccount","hasManageClients","assignRoles","realmRoles","InfoCircleIcon","toUser","RoleMapping","ClientDetailHeader","onChange","toggleDownloadDialog","badges","protocolName","getProtocolName","dropdownItems","exportClient","isRealmClient","ViewHeader","ClientDetails","profileInfo","hasManageAuthorization","permissionsEnabled","hasViewClients","hasViewUsers","hasQueryUsers","downloadDialogOpen","toggleDownloadDialogOpen","changeAuthenticatorOpen","toggleChangeAuthenticatorOpen","setClient","useTab","tab","useRoutableTab","settingsTab","keysTab","credentialsTab","rolesTab","clientScopesTab","authorizationTab","serviceAccountTab","sessionsTab","permissionsTab","advancedTab","useClientScopesTab","toClientScopesTab","clientScopesSetupTab","clientScopesEvaluateTab","useAuthorizationTab","toAuthorizationTab","authorizationSettingsTab","authorizationResourcesTab","authorizationScopesTab","authorizationPoliciesTab","authorizationPermissionsTab","authorizationEvaluateTab","authorizationExportTab","toClients","setupForm","fetchedClient","cloneDeep","confirmed","convertFormValuesToObject","submittedClient","newClient","RoutableTabs","RolesList","toCreateRole","roleId","toClientRole","PermissionsTab"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}