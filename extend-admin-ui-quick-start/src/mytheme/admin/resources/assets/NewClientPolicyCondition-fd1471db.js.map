{"version":3,"file":"NewClientPolicyCondition-fd1471db.js","sources":["../../src/realm-settings/NewClientPolicyCondition.tsx"],"sourcesContent":["import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\nimport type ClientPolicyConditionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyConditionRepresentation\";\nimport type ClientPolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { camelCase } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { DynamicComponents } from \"../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { FormPanel } from \"../components/scroll-form/FormPanel\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { toEditClientPolicy } from \"./routes/EditClientPolicy\";\nimport type { EditClientPolicyConditionParams } from \"./routes/EditCondition\";\n\nexport type ItemType = { value: string };\n\ntype ConfigProperty = ConfigPropertyRepresentation & {\n  conditions: any;\n  config: any;\n};\n\nexport default function NewClientPolicyCondition() {\n  const { t } = useTranslation(\"realm-settings\");\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const [openConditionType, setOpenConditionType] = useState(false);\n  const [policies, setPolicies] = useState<ClientPolicyRepresentation[]>([]);\n\n  const [condition, setCondition] = useState<\n    ClientPolicyConditionRepresentation[]\n  >([]);\n  const [conditionData, setConditionData] =\n    useState<ClientPolicyConditionRepresentation>();\n  const [conditionType, setConditionType] = useState(\"\");\n  const [conditionProperties, setConditionProperties] = useState<\n    ConfigPropertyRepresentation[]\n  >([]);\n\n  const { policyName, conditionName } =\n    useParams<EditClientPolicyConditionParams>();\n\n  const serverInfo = useServerInfo();\n  const form = useForm<ConfigProperty>();\n\n  const conditionTypes =\n    serverInfo.componentTypes?.[\n      \"org.keycloak.services.clientpolicy.condition.ClientPolicyConditionProvider\"\n    ];\n\n  const { adminClient } = useAdminClient();\n\n  const setupForm = (condition: ClientPolicyConditionRepresentation) => {\n    form.reset({ config: condition.configuration || {} });\n  };\n\n  useFetch(\n    () => adminClient.clientPolicies.listPolicies(),\n\n    (policies) => {\n      setPolicies(policies.policies ?? []);\n\n      if (conditionName) {\n        const currentPolicy = policies.policies?.find(\n          (item) => item.name === policyName\n        );\n\n        const typeAndConfigData = currentPolicy?.conditions?.find(\n          (item) => item.condition === conditionName\n        );\n\n        const currentCondition = conditionTypes?.find(\n          (condition) => condition.id === conditionName\n        );\n\n        setConditionData(typeAndConfigData!);\n        setConditionProperties(currentCondition?.properties!);\n        setupForm(typeAndConfigData!);\n      }\n    },\n    []\n  );\n\n  const save = async (configPolicy: ConfigProperty) => {\n    const configValues = configPolicy.config;\n\n    const writeConfig = () => {\n      return conditionProperties.reduce((r: any, p) => {\n        r[p.name!] = configValues[p.name!];\n        return r;\n      }, {});\n    };\n\n    const updatedPolicies = policies.map((policy) => {\n      if (policy.name !== policyName) {\n        return policy;\n      }\n\n      let conditions = policy.conditions ?? [];\n\n      if (conditionName) {\n        const createdCondition = {\n          condition: conditionData?.condition,\n          configuration: writeConfig(),\n        };\n\n        const index = conditions.findIndex(\n          (condition) => conditionName === condition.condition\n        );\n\n        if (index === -1) {\n          return;\n        }\n\n        const newConditions = [\n          ...conditions.slice(0, index),\n          createdCondition,\n          ...conditions.slice(index + 1),\n        ];\n\n        return {\n          ...policy,\n          conditions: newConditions,\n        };\n      }\n\n      conditions = conditions.concat({\n        condition: condition[0].condition,\n        configuration: writeConfig(),\n      });\n\n      return {\n        ...policy,\n        conditions,\n      };\n    }) as ClientPolicyRepresentation[];\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: updatedPolicies,\n      });\n      setPolicies(updatedPolicies);\n      navigate(toEditClientPolicy({ realm, policyName: policyName! }));\n      addAlert(\n        conditionName\n          ? t(\"realm-settings:updateClientConditionSuccess\")\n          : t(\"realm-settings:createClientConditionSuccess\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"realm-settings:createClientConditionError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        className=\"kc-login-screen\"\n        title={conditionName ? t(\"editCondition\") : t(\"addCondition\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"conditionType\")}\n            fieldId=\"conditionType\"\n            labelIcon={\n              <HelpItem\n                helpText={\n                  conditionType\n                    ? `realm-settings-help:${camelCase(\n                        conditionType.replace(/-/g, \" \")\n                      )}`\n                    : \"realm-settings-help:conditions\"\n                }\n                fieldLabelId=\"realm-settings:conditionType\"\n              />\n            }\n          >\n            <Controller\n              name=\"conditions\"\n              defaultValue={\"any-client\"}\n              control={form.control}\n              render={({ field }) => (\n                <Select\n                  placeholderText={t(\"selectACondition\")}\n                  className=\"kc-conditionType-select\"\n                  data-testid=\"conditionType-select\"\n                  toggleId=\"provider\"\n                  isDisabled={!!conditionName}\n                  onToggle={(toggle) => setOpenConditionType(toggle)}\n                  onSelect={(_, value) => {\n                    field.onChange(value);\n                    setConditionProperties(\n                      (value as ComponentTypeRepresentation).properties\n                    );\n                    setConditionType((value as ComponentTypeRepresentation).id);\n                    setCondition([\n                      {\n                        condition: (value as ComponentTypeRepresentation).id,\n                      },\n                    ]);\n                    setOpenConditionType(false);\n                  }}\n                  selections={conditionName ? conditionName : conditionType}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"conditionType\")}\n                  isOpen={openConditionType}\n                >\n                  {conditionTypes?.map((condition) => (\n                    <SelectOption\n                      selected={condition.id === field.value}\n                      description={t(\n                        `realm-settings-help:${camelCase(\n                          condition.id.replace(/-/g, \" \")\n                        )}`\n                      )}\n                      key={condition.id}\n                      value={condition}\n                    >\n                      {condition.id}\n                    </SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n\n          <FormProvider {...form}>\n            <DynamicComponents properties={conditionProperties} />\n          </FormProvider>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"addCondition-saveBtn\"\n              isDisabled={conditionType === \"\" && !conditionName}\n            >\n              {conditionName ? t(\"common:save\") : t(\"common:add\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              data-testid=\"addCondition-cancelBtn\"\n              onClick={() =>\n                navigate(toEditClientPolicy({ realm, policyName: policyName! }))\n              }\n            >\n              {t(\"common:cancel\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n}\n"],"names":["NewClientPolicyCondition","t","useTranslation","addAlert","addError","useAlerts","navigate","useNavigate","realm","useRealm","openConditionType","setOpenConditionType","useState","policies","setPolicies","condition","setCondition","conditionData","setConditionData","conditionType","setConditionType","conditionProperties","setConditionProperties","policyName","conditionName","useParams","serverInfo","useServerInfo","form","useForm","conditionTypes","adminClient","useAdminClient","setupForm","useFetch","typeAndConfigData","item","currentCondition","save","configPolicy","configValues","writeConfig","r","p","updatedPolicies","policy","conditions","createdCondition","index","newConditions","toEditClientPolicy","AlertVariant","error","jsx","PageSection","FormPanel","jsxs","FormAccess","FormGroup","HelpItem","camelCase","Controller","field","Select","toggle","_","value","SelectVariant","SelectOption","FormProvider","DynamicComponents","ActionGroup","Button"],"mappings":"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"}