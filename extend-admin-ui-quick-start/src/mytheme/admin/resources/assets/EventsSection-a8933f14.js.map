{"version":3,"file":"EventsSection-a8933f14.js","sources":["../../../../node_modules/lodash-es/pickBy.js","../../src/events/ResourceLinks.tsx","../../src/events/AdminEvents.tsx","../../src/events/EventsSection.tsx"],"sourcesContent":["import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Tooltip } from \"@patternfly/react-core\";\n\nimport type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toClient } from \"../clients/routes/Client\";\nimport { toGroups } from \"../groups/routes/Groups\";\nimport { toClientScope } from \"../client-scopes/routes/ClientScope\";\nimport { toUser } from \"../user/routes/User\";\nimport { toRealmRole } from \"../realm-roles/routes/RealmRole\";\nimport { toFlow } from \"../authentication/routes/Flow\";\n\ntype ResourceLinkProps = {\n  event: AdminEventRepresentation;\n};\n\nconst MAX_TEXT_LENGTH = 38;\nconst Truncate = ({\n  text,\n  children,\n}: {\n  text?: string;\n  children: (text: string) => ReactElement;\n}) => {\n  const definedText = text || \"\";\n  const needsTruncation = definedText.length > MAX_TEXT_LENGTH;\n  const truncatedText = definedText.substring(0, MAX_TEXT_LENGTH);\n  return needsTruncation ? (\n    <Tooltip content={text}>{children(truncatedText + \"â€¦\")}</Tooltip>\n  ) : (\n    children(definedText)\n  );\n};\n\nconst isLinkable = (event: AdminEventRepresentation) => {\n  if (event.operationType === \"DELETE\") {\n    return false;\n  }\n  return (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\" ||\n    event.resourceType === \"GROUP\" ||\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\") ||\n    event.resourceType === \"CLIENT_SCOPE\" ||\n    event.resourceType === \"AUTH_FLOW\" ||\n    event.resourcePath?.startsWith(\"roles-by-id\")\n  );\n};\n\nconst idRegex = new RegExp(\n  /([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})/\n);\n\nconst createLink = (realm: string, event: AdminEventRepresentation) => {\n  const part = idRegex.exec(event.resourcePath!);\n  if (!part) {\n    console.warn(\"event didn't contain a valid link\", event);\n    return \"\";\n  }\n  const id = part[1];\n\n  if (\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\")\n  ) {\n    return toClient({\n      realm,\n      clientId: id,\n      tab: event.resourceType === \"CLIENT\" ? \"settings\" : \"authorization\",\n    });\n  }\n\n  if (event.resourceType === \"GROUP\") {\n    return toGroups({ realm, id });\n  }\n\n  if (event.resourceType === \"CLIENT_SCOPE\") {\n    return toClientScope({ realm, id, tab: \"settings\" });\n  }\n\n  if (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\"\n  ) {\n    return toUser({ realm, id, tab: \"settings\" });\n  }\n\n  if (event.resourceType === \"AUTH_FLOW\") {\n    return toFlow({ realm, id, usedBy: \"-\" });\n  }\n\n  if (event.resourcePath?.startsWith(\"roles-by-id\")) {\n    return toRealmRole({ realm, id, tab: \"details\" });\n  }\n\n  return \"\";\n};\n\nexport const ResourceLink = ({ event }: ResourceLinkProps) => {\n  const { realm } = useRealm();\n  return (\n    <Truncate text={event.resourcePath}>\n      {(text) =>\n        isLinkable(event) ? (\n          <Link to={createLink(realm, event)}>{text}</Link>\n        ) : (\n          <span>{text}</span>\n        )\n      }\n    </Truncate>\n  );\n};\n\nexport const CellResourceLinkRenderer = (\n  adminEvent: AdminEventRepresentation\n) => <ResourceLink event={adminEvent} />;\n","import type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  Dropdown,\n  DropdownToggle,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport {\n  cellWidth,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { PropsWithChildren, useMemo, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../util\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport { CellResourceLinkRenderer } from \"./ResourceLinks\";\n\nimport \"./events.css\";\n\ntype DisplayDialogProps = {\n  titleKey: string;\n  onClose: () => void;\n};\n\ntype AdminEventSearchForm = {\n  resourceTypes: string[];\n  operationTypes: string[];\n  resourcePath: string;\n  dateFrom: string;\n  dateTo: string;\n  authClient: string;\n  authUser: string;\n  authRealm: string;\n  authIpAddress: string;\n};\n\nconst defaultValues: AdminEventSearchForm = {\n  resourceTypes: [],\n  operationTypes: [],\n  resourcePath: \"\",\n  dateFrom: \"\",\n  dateTo: \"\",\n  authClient: \"\",\n  authUser: \"\",\n  authRealm: \"\",\n  authIpAddress: \"\",\n};\n\nconst DisplayDialog = ({\n  titleKey,\n  onClose,\n  children,\n}: PropsWithChildren<DisplayDialogProps>) => {\n  const { t } = useTranslation(\"events\");\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(titleKey)}\n      isOpen={true}\n      onClose={onClose}\n    >\n      {children}\n    </Modal>\n  );\n};\n\nexport const AdminEvents = () => {\n  const { t } = useTranslation(\"events\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const formatDate = useFormatDate();\n  const resourceTypes = serverInfo.enums?.[\"resourceType\"];\n  const operationTypes = serverInfo.enums?.[\"operationType\"];\n\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectResourceTypesOpen, setSelectResourceTypesOpen] = useState(false);\n  const [selectOperationTypesOpen, setSelectOperationTypesOpen] =\n    useState(false);\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<AdminEventSearchForm>\n  >({});\n\n  const [authEvent, setAuthEvent] = useState<AdminEventRepresentation>();\n  const [representationEvent, setRepresentationEvent] =\n    useState<AdminEventRepresentation>();\n\n  const filterLabels: Record<keyof AdminEventSearchForm, string> = {\n    resourceTypes: t(\"resourceTypes\"),\n    operationTypes: t(\"operationTypes\"),\n    resourcePath: t(\"resourcePath\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    authClient: t(\"client\"),\n    authUser: t(\"userId\"),\n    authRealm: t(\"realm\"),\n    authIpAddress: t(\"ipAddress\"),\n  };\n\n  const {\n    getValues,\n    register,\n    reset,\n    formState: { isDirty },\n    control,\n  } = useForm<AdminEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findAdminEvents({\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  function submitSearch() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof AdminEventSearchForm) {\n    const formValues: AdminEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof AdminEventSearchForm,\n    valueToRemove: string\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<AdminEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0)\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  function refresh() {\n    commitFilters();\n  }\n\n  const adminEventSearchFormDisplay = () => {\n    return (\n      <Flex\n        direction={{ default: \"column\" }}\n        spaceItems={{ default: \"spaceItemsNone\" }}\n      >\n        <FlexItem>\n          <Dropdown\n            id=\"admin-events-search-select\"\n            data-testid=\"AdminEventsSearchSelector\"\n            className=\"pf-u-ml-md\"\n            toggle={\n              <DropdownToggle\n                data-testid=\"adminEventsSearchSelectorToggle\"\n                onToggle={(isOpen) => setSearchDropdownOpen(isOpen)}\n                className=\"keycloak__events_search_selector_dropdown__toggle\"\n              >\n                {t(\"searchForAdminEvent\")}\n              </DropdownToggle>\n            }\n            isOpen={searchDropdownOpen}\n          >\n            <Form\n              isHorizontal\n              className=\"keycloak__events_search__form\"\n              data-testid=\"searchForm\"\n            >\n              <FormGroup\n                label={t(\"resourceTypes\")}\n                fieldId=\"kc-resourceTypes\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"resourceTypes\"\n                  control={control}\n                  render={({ field }) => (\n                    <Select\n                      className=\"keycloak__events_search__type_select\"\n                      name=\"resourceTypes\"\n                      data-testid=\"resource-types-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"common:hide\"),\n                        collapsedText: t(\"common:showRemaining\"),\n                      }}\n                      variant={SelectVariant.typeaheadMulti}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(isOpen) => setSelectResourceTypesOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        const option = selectedValue.toString();\n                        const changedValue = field.value.includes(option)\n                          ? field.value.filter((item) => item !== option)\n                          : [...field.value, option];\n\n                        field.onChange(changedValue);\n                      }}\n                      onClear={(resource) => {\n                        resource.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      isOpen={selectResourceTypesOpen}\n                      aria-labelledby={\"resourceTypes\"}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          {field.value.map((chip) => (\n                            <Chip\n                              key={chip}\n                              onClick={(resource) => {\n                                resource.stopPropagation();\n                                field.onChange(\n                                  field.value.filter((val) => val !== chip)\n                                );\n                              }}\n                            >\n                              {chip}\n                            </Chip>\n                          ))}\n                        </ChipGroup>\n                      }\n                    >\n                      {resourceTypes?.map((option) => (\n                        <SelectOption key={option} value={option} />\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"operationTypes\")}\n                fieldId=\"kc-operationTypes\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"operationTypes\"\n                  control={control}\n                  render={({ field }) => (\n                    <Select\n                      className=\"keycloak__events_search__type_select\"\n                      name=\"operationTypes\"\n                      data-testid=\"operation-types-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"common:hide\"),\n                        collapsedText: t(\"common:showRemaining\"),\n                      }}\n                      variant={SelectVariant.typeaheadMulti}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(isOpen) => setSelectOperationTypesOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        const option = selectedValue.toString();\n                        const changedValue = field.value.includes(option)\n                          ? field.value.filter((item) => item !== option)\n                          : [...field.value, option];\n\n                        field.onChange(changedValue);\n                      }}\n                      onClear={(operation) => {\n                        operation.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      isOpen={selectOperationTypesOpen}\n                      aria-labelledby={\"operationTypes\"}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          {field.value.map((chip) => (\n                            <Chip\n                              key={chip}\n                              onClick={(operation) => {\n                                operation.stopPropagation();\n                                field.onChange(\n                                  field.value.filter((val) => val !== chip)\n                                );\n                              }}\n                            >\n                              {chip}\n                            </Chip>\n                          ))}\n                        </ChipGroup>\n                      }\n                    >\n                      {operationTypes?.map((option) => (\n                        <SelectOption key={option} value={option} />\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"resourcePath\")}\n                fieldId=\"kc-resourcePath\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-resourcePath\"\n                  data-testid=\"resourcePath-searchField\"\n                  {...register(\"resourcePath\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"realm\")}\n                fieldId=\"kc-realm\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-realm\"\n                  data-testid=\"realm-searchField\"\n                  {...register(\"authRealm\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"client\")}\n                fieldId=\"kc-client\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-client\"\n                  data-testid=\"client-searchField\"\n                  {...register(\"authClient\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"user\")}\n                fieldId=\"kc-user\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-user\"\n                  data-testid=\"user-searchField\"\n                  {...register(\"authUser\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"ipAddress\")}\n                fieldId=\"kc-ipAddress\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-ipAddress\"\n                  data-testid=\"ipAddress-searchField\"\n                  {...register(\"authIpAddress\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateFrom\")}\n                fieldId=\"kc-dateFrom\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateFrom\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateFrom\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateTo\")}\n                fieldId=\"kc-dateTo\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateTo\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateTo\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <ActionGroup>\n                <Button\n                  variant={\"primary\"}\n                  onClick={submitSearch}\n                  data-testid=\"search-events-btn\"\n                  isDisabled={!isDirty}\n                >\n                  {t(\"searchAdminEventsBtn\")}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={resetSearch}\n                  isDisabled={!isDirty}\n                >\n                  {t(\"resetBtn\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </Dropdown>\n          <Button\n            className=\"pf-u-ml-md\"\n            onClick={refresh}\n            data-testid=\"refresh-btn\"\n          >\n            {t(\"refresh\")}\n          </Button>\n        </FlexItem>\n        <FlexItem>\n          {Object.entries(activeFilters).length > 0 && (\n            <div className=\"keycloak__searchChips pf-u-ml-md\">\n              {Object.entries(activeFilters).map((filter) => {\n                const [key, value] = filter as [\n                  keyof AdminEventSearchForm,\n                  string | string[]\n                ];\n\n                return (\n                  <ChipGroup\n                    className=\"pf-u-mt-md pf-u-mr-md\"\n                    key={key}\n                    categoryName={filterLabels[key]}\n                    isClosable\n                    onClick={() => removeFilter(key)}\n                  >\n                    {typeof value === \"string\" ? (\n                      <Chip isReadOnly>{value}</Chip>\n                    ) : (\n                      value.map((entry) => (\n                        <Chip\n                          key={entry}\n                          onClick={() => removeFilterValue(key, entry)}\n                        >\n                          {entry}\n                        </Chip>\n                      ))\n                    )}\n                  </ChipGroup>\n                );\n              })}\n            </div>\n          )}\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  const rows = [\n    [t(\"realm\"), authEvent?.authDetails?.realmId],\n    [t(\"client\"), authEvent?.authDetails?.clientId],\n    [t(\"user\"), authEvent?.authDetails?.userId],\n    [t(\"ipAddress\"), authEvent?.authDetails?.ipAddress],\n  ];\n\n  const code = useMemo(\n    () =>\n      representationEvent?.representation\n        ? prettyPrintJSON(JSON.parse(representationEvent.representation))\n        : \"\",\n    [representationEvent?.representation]\n  );\n\n  return (\n    <>\n      {authEvent && (\n        <DisplayDialog titleKey=\"auth\" onClose={() => setAuthEvent(undefined)}>\n          <Table\n            aria-label=\"authData\"\n            data-testid=\"auth-dialog\"\n            variant={TableVariant.compact}\n            cells={[t(\"attribute\"), t(\"value\")]}\n            rows={rows}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </DisplayDialog>\n      )}\n      {representationEvent && (\n        <DisplayDialog\n          titleKey=\"representation\"\n          data-testid=\"representation-dialog\"\n          onClose={() => setRepresentationEvent(undefined)}\n        >\n          <CodeEditor\n            isLineNumbersVisible\n            isReadOnly\n            code={code}\n            language={Language.json}\n            height=\"8rem\"\n          />\n        </DisplayDialog>\n      )}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"events:adminEvents\"\n        toolbarItem={adminEventSearchFormDisplay()}\n        actions={\n          [\n            {\n              title: t(\"auth\"),\n              onRowClick: (event) => setAuthEvent(event),\n            },\n            {\n              title: t(\"representation\"),\n              onRowClick: (event) => setRepresentationEvent(event),\n            },\n          ] as Action<AdminEventRepresentation>[]\n        }\n        columns={[\n          {\n            name: \"time\",\n            displayKey: \"events:time\",\n            cellRenderer: (row) =>\n              formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n          },\n          {\n            name: \"resourcePath\",\n            displayKey: \"events:resourcePath\",\n            cellRenderer: CellResourceLinkRenderer,\n          },\n          {\n            name: \"resourceType\",\n            displayKey: \"events:resourceType\",\n          },\n          {\n            name: \"operationType\",\n            displayKey: \"events:operationType\",\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"\",\n            displayKey: \"events:user\",\n            cellRenderer: (event) => event.authDetails?.userId || \"\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyEvents\")}\n            instructions={t(\"emptyEventsInstructions\")}\n          />\n        }\n        isSearching={Object.keys(activeFilters).length > 0}\n      />\n    </>\n  );\n};\n","import type EventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/eventRepresentation\";\nimport type EventType from \"@keycloak/keycloak-admin-client/lib/defs/eventTypes\";\nimport type { RealmEventsConfigRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/realmEventsConfigRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownToggle,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon, WarningTriangleIcon } from \"@patternfly/react-icons\";\nimport { cellWidth, expandable } from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { toRealmSettings } from \"../realm-settings/routes/RealmSettings\";\nimport { toUser } from \"../user/routes/User\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport { AdminEvents } from \"./AdminEvents\";\nimport { EventsTab, toEvents } from \"./routes/Events\";\n\nimport \"./events.css\";\n\ntype UserEventSearchForm = {\n  client: string;\n  dateFrom: string;\n  dateTo: string;\n  user: string;\n  type: EventType[];\n  authIpAddress: string;\n};\n\nconst defaultValues: UserEventSearchForm = {\n  client: \"\",\n  dateFrom: \"\",\n  dateTo: \"\",\n  user: \"\",\n  type: [],\n  authIpAddress: \"\",\n};\n\nconst StatusRow = (event: EventRepresentation) =>\n  !event.error ? (\n    <span>\n      <CheckCircleIcon color=\"green\" /> {event.type}\n    </span>\n  ) : (\n    <Tooltip content={event.error}>\n      <span>\n        <WarningTriangleIcon color=\"orange\" /> {event.type}\n      </span>\n    </Tooltip>\n  );\n\nconst DetailCell = (event: EventRepresentation) => (\n  <DescriptionList isHorizontal className=\"keycloak_eventsection_details\">\n    {event.details &&\n      Object.entries(event.details).map(([key, value]) => (\n        <DescriptionListGroup key={key}>\n          <DescriptionListTerm>{key}</DescriptionListTerm>\n          <DescriptionListDescription>{value}</DescriptionListDescription>\n        </DescriptionListGroup>\n      ))}\n    {event.error && (\n      <DescriptionListGroup key=\"error\">\n        <DescriptionListTerm>error</DescriptionListTerm>\n        <DescriptionListDescription>{event.error}</DescriptionListDescription>\n      </DescriptionListGroup>\n    )}\n  </DescriptionList>\n);\n\nconst UserDetailLink = (event: EventRepresentation) => {\n  const { t } = useTranslation(\"events\");\n  const { realm } = useRealm();\n\n  return (\n    <>\n      {event.userId && (\n        <Link\n          key={`link-${event.time}-${event.type}`}\n          to={toUser({\n            realm,\n            id: event.userId,\n            tab: \"settings\",\n          })}\n        >\n          {event.userId}\n        </Link>\n      )}\n      {!event.userId && t(\"noUserDetails\")}\n    </>\n  );\n};\n\nexport default function EventsSection() {\n  const { t } = useTranslation(\"events\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const formatDate = useFormatDate();\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectOpen, setSelectOpen] = useState(false);\n  const [events, setEvents] = useState<RealmEventsConfigRepresentation>();\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<UserEventSearchForm>\n  >({});\n\n  const filterLabels: Record<keyof UserEventSearchForm, string> = {\n    client: t(\"client\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    user: t(\"userId\"),\n    type: t(\"eventType\"),\n    authIpAddress: t(\"ipAddress\"),\n  };\n\n  const {\n    getValues,\n    register,\n    reset,\n    formState: { isDirty },\n    control,\n    handleSubmit,\n  } = useForm<UserEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm }),\n    (events) => setEvents(events),\n    []\n  );\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findEvents({\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  const useTab = (tab: EventsTab) => useRoutableTab(toEvents({ realm, tab }));\n\n  const userEventsTab = useTab(\"user-events\");\n  const adminEventsTab = useTab(\"admin-events\");\n\n  function onSubmit() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof UserEventSearchForm) {\n    const formValues: UserEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof UserEventSearchForm,\n    valueToRemove: EventType\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<UserEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0)\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  function refresh() {\n    commitFilters();\n  }\n\n  const userEventSearchFormDisplay = () => {\n    return (\n      <Flex\n        direction={{ default: \"column\" }}\n        spaceItems={{ default: \"spaceItemsNone\" }}\n      >\n        <FlexItem>\n          <Dropdown\n            id=\"user-events-search-select\"\n            data-testid=\"UserEventsSearchSelector\"\n            className=\"pf-u-ml-md\"\n            toggle={\n              <DropdownToggle\n                data-testid=\"userEventsSearchSelectorToggle\"\n                onToggle={(isOpen) => setSearchDropdownOpen(isOpen)}\n                className=\"keycloak__events_search_selector_dropdown__toggle\"\n              >\n                {t(\"searchForUserEvent\")}\n              </DropdownToggle>\n            }\n            isOpen={searchDropdownOpen}\n          >\n            <Form\n              data-testid=\"searchForm\"\n              className=\"keycloak__events_search__form\"\n              onSubmit={handleSubmit(onSubmit)}\n              isHorizontal\n            >\n              <FormGroup\n                label={t(\"userId\")}\n                fieldId=\"kc-userId\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-userId\"\n                  data-testid=\"userId-searchField\"\n                  {...register(\"user\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"eventType\")}\n                fieldId=\"kc-eventType\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"type\"\n                  control={control}\n                  render={({ field }) => (\n                    <Select\n                      className=\"keycloak__events_search__type_select\"\n                      name=\"eventType\"\n                      data-testid=\"event-type-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"common:hide\"),\n                        collapsedText: t(\"common:showRemaining\"),\n                      }}\n                      variant={SelectVariant.typeaheadMulti}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(isOpen) => setSelectOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        const option = selectedValue.toString() as EventType;\n                        const changedValue = field.value.includes(option)\n                          ? field.value.filter((item) => item !== option)\n                          : [...field.value, option];\n\n                        field.onChange(changedValue);\n                      }}\n                      onClear={(event) => {\n                        event.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      isOpen={selectOpen}\n                      aria-labelledby={\"eventType\"}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          {field.value.map((chip) => (\n                            <Chip\n                              key={chip}\n                              onClick={(event) => {\n                                event.stopPropagation();\n                                field.onChange(\n                                  field.value.filter((val) => val !== chip)\n                                );\n                              }}\n                            >\n                              {chip}\n                            </Chip>\n                          ))}\n                        </ChipGroup>\n                      }\n                    >\n                      {events?.enabledEventTypes?.map((option) => (\n                        <SelectOption key={option} value={option} />\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"client\")}\n                fieldId=\"kc-client\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-client\"\n                  data-testid=\"client-searchField\"\n                  {...register(\"client\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateFrom\")}\n                fieldId=\"kc-dateFrom\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateFrom\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateFrom\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateTo\")}\n                fieldId=\"kc-dateTo\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateTo\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateTo\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"ipAddress\")}\n                fieldId=\"kc-ipAddress\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-ipAddress\"\n                  data-testid=\"ipAddress-searchField\"\n                  {...register(\"authIpAddress\")}\n                />\n              </FormGroup>\n              <ActionGroup>\n                <Button\n                  data-testid=\"search-events-btn\"\n                  variant=\"primary\"\n                  type=\"submit\"\n                  isDisabled={!isDirty}\n                >\n                  {t(\"searchUserEventsBtn\")}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={resetSearch}\n                  isDisabled={!isDirty}\n                >\n                  {t(\"resetBtn\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </Dropdown>\n          <Button\n            className=\"pf-u-ml-md\"\n            onClick={refresh}\n            data-testid=\"refresh-btn\"\n          >\n            {t(\"refresh\")}\n          </Button>\n        </FlexItem>\n        <FlexItem>\n          {Object.entries(activeFilters).length > 0 && (\n            <div className=\"keycloak__searchChips pf-u-ml-md\">\n              {Object.entries(activeFilters).map((filter) => {\n                const [key, value] = filter as [\n                  keyof UserEventSearchForm,\n                  string | EventType[]\n                ];\n\n                return (\n                  <ChipGroup\n                    className=\"pf-u-mt-md pf-u-mr-md\"\n                    key={key}\n                    categoryName={filterLabels[key]}\n                    isClosable\n                    onClick={() => removeFilter(key)}\n                  >\n                    {typeof value === \"string\" ? (\n                      <Chip isReadOnly>{value}</Chip>\n                    ) : (\n                      value.map((entry) => (\n                        <Chip\n                          key={entry}\n                          onClick={() => removeFilterValue(key, entry)}\n                        >\n                          {entry}\n                        </Chip>\n                      ))\n                    )}\n                  </ChipGroup>\n                );\n              })}\n            </div>\n          )}\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  return (\n    <>\n      <ViewHeader\n        titleKey=\"events:title\"\n        subKey={\n          <Trans i18nKey=\"events:eventExplain\">\n            If you want to configure user events, Admin events or Event\n            listeners, please enter\n            <Link to={toRealmSettings({ realm, tab: \"events\" })}>\n              {t(\"eventConfig\")}\n            </Link>\n            page realm settings to configure.\n          </Trans>\n        }\n        helpUrl={helpUrls.eventsUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          defaultLocation={toEvents({ realm, tab: \"user-events\" })}\n        >\n          <Tab\n            title={<TabTitleText>{t(\"userEvents\")}</TabTitleText>}\n            {...userEventsTab}\n          >\n            <div className=\"keycloak__events_table\">\n              <KeycloakDataTable\n                key={key}\n                loader={loader}\n                detailColumns={[\n                  {\n                    name: \"details\",\n                    enabled: (event) => event.details !== undefined,\n                    cellRenderer: DetailCell,\n                  },\n                ]}\n                isPaginated\n                ariaLabelKey=\"events:title\"\n                toolbarItem={userEventSearchFormDisplay()}\n                columns={[\n                  {\n                    name: \"time\",\n                    displayKey: \"events:time\",\n                    cellFormatters: [expandable],\n                    cellRenderer: (row) =>\n                      formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n                  },\n                  {\n                    name: \"userId\",\n                    displayKey: \"events:user\",\n                    cellRenderer: UserDetailLink,\n                  },\n                  {\n                    name: \"type\",\n                    displayKey: \"events:eventType\",\n                    cellRenderer: StatusRow,\n                  },\n                  {\n                    name: \"ipAddress\",\n                    displayKey: \"events:ipAddress\",\n                    transforms: [cellWidth(10)],\n                  },\n                  {\n                    name: \"clientId\",\n                    displayKey: \"events:client\",\n                  },\n                ]}\n                emptyState={\n                  <ListEmptyState\n                    message={t(\"emptyEvents\")}\n                    instructions={t(\"emptyEventsInstructions\")}\n                  />\n                }\n                isSearching={Object.keys(activeFilters).length > 0}\n              />\n            </div>\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"adminEvents\")}</TabTitleText>}\n            data-testid=\"admin-events-tab\"\n            {...adminEventsTab}\n          >\n            <AdminEvents />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["pickBy","object","predicate","props","arrayMap","getAllKeysIn","prop","baseIteratee","basePickBy","value","path","MAX_TEXT_LENGTH","Truncate","text","children","definedText","needsTruncation","truncatedText","jsx","Tooltip","isLinkable","event","idRegex","createLink","realm","part","id","toClient","toGroups","toClientScope","toUser","toFlow","toRealmRole","ResourceLink","useRealm","Link","CellResourceLinkRenderer","adminEvent","defaultValues","DisplayDialog","titleKey","onClose","t","useTranslation","Modal","ModalVariant","AdminEvents","adminClient","useAdminClient","serverInfo","useServerInfo","formatDate","useFormatDate","resourceTypes","operationTypes","key","setKey","useState","searchDropdownOpen","setSearchDropdownOpen","selectResourceTypesOpen","setSelectResourceTypesOpen","selectOperationTypesOpen","setSelectOperationTypesOpen","activeFilters","setActiveFilters","authEvent","setAuthEvent","representationEvent","setRepresentationEvent","filterLabels","getValues","register","reset","isDirty","control","useForm","loader","first","max","submitSearch","commitFilters","resetSearch","removeFilter","formValues","removeFilterValue","valueToRemove","fieldValue","newFieldValue","val","newFilters","refresh","adminEventSearchFormDisplay","jsxs","Flex","FlexItem","Dropdown","DropdownToggle","isOpen","Form","FormGroup","Controller","field","Select","SelectVariant","_","selectedValue","option","changedValue","item","resource","ChipGroup","chip","Chip","SelectOption","operation","KeycloakTextInput","DatePicker","ActionGroup","Button","filter","entry","rows","code","useMemo","prettyPrintJSON","Fragment","Table","TableVariant","TableHeader","TableBody","CodeEditor","Language","KeycloakDataTable","row","FORMAT_DATE_AND_TIME","cellWidth","ListEmptyState","StatusRow","WarningTriangleIcon","CheckCircleIcon","DetailCell","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","UserDetailLink","EventsSection","selectOpen","setSelectOpen","events","setEvents","handleSubmit","useFetch","useTab","tab","useRoutableTab","toEvents","userEventsTab","adminEventsTab","onSubmit","userEventSearchFormDisplay","ViewHeader","Trans","toRealmSettings","helpUrls","PageSection","RoutableTabs","Tab","TabTitleText","expandable"],"mappings":"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","x_google_ignoreList":[0]}