{"version":3,"file":"RealmRoleTabs-5f017b06.js","sources":["../../src/realm-roles/UsersInRoleTab.tsx","../../src/realm-roles/RealmRoleTabs.tsx"],"sourcesContent":["import { Button, PageSection, Popover } from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport type { ClientRoleParams } from \"../clients/routes/ClientRole\";\nimport { useHelp } from \"ui-shared\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emptyFormatter, upperCaseFormatter } from \"../util\";\nimport { useParams } from \"../utils/useParams\";\n\nexport const UsersInRoleTab = () => {\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const { t } = useTranslation(\"roles\");\n  const { id, clientId } = useParams<ClientRoleParams>();\n\n  const { adminClient } = useAdminClient();\n\n  const loader = async (first?: number, max?: number) => {\n    const role = await adminClient.roles.findOneById({ id: id });\n    if (!role) {\n      throw new Error(t(\"common:notFound\"));\n    }\n\n    if (role.clientRole) {\n      return adminClient.clients.findUsersWithRole({\n        roleName: role.name!,\n        id: clientId,\n        first,\n        max,\n      });\n    }\n\n    return adminClient.roles.findUsersWithRole({\n      name: role.name!,\n      first,\n      max,\n    });\n  };\n\n  const { enabled } = useHelp();\n\n  return (\n    <PageSection data-testid=\"users-page\" variant=\"light\">\n      <KeycloakDataTable\n        isPaginated\n        loader={loader}\n        ariaLabelKey=\"roles:roleList\"\n        searchPlaceholderKey=\"\"\n        toolbarItem={\n          enabled && (\n            <Popover\n              aria-label=\"Basic popover\"\n              position=\"bottom\"\n              bodyContent={\n                <div>\n                  {t(\"roles:whoWillAppearPopoverText\")}\n                  <Button\n                    className=\"kc-groups-link\"\n                    variant=\"link\"\n                    onClick={() => navigate(`/${realm}/groups`)}\n                  >\n                    {t(\"common:groups\")}\n                  </Button>\n                  {t(\"or\")}\n                  <Button\n                    className=\"kc-users-link\"\n                    variant=\"link\"\n                    onClick={() => navigate(`/${realm}/users`)}\n                  >\n                    {t(\"users\")}.\n                  </Button>\n                </div>\n              }\n              footerContent={t(\"roles:whoWillAppearPopoverFooterText\")}\n            >\n              <Button\n                variant=\"link\"\n                className=\"kc-who-will-appear-button\"\n                key=\"who-will-appear-button\"\n                icon={<QuestionCircleIcon />}\n              >\n                {t(\"roles:whoWillAppearLinkText\")}\n              </Button>\n            </Popover>\n          )\n        }\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            message={t(\"noDirectUsers\")}\n            instructions={\n              <div>\n                {t(\"noUsersEmptyStateDescription\")}\n                <Button\n                  className=\"kc-groups-link-empty-state\"\n                  variant=\"link\"\n                  onClick={() => navigate(`/${realm}/groups`)}\n                >\n                  {t(\"common:groups\")}\n                </Button>\n                {t(\"or\")}\n                <Button\n                  className=\"kc-users-link-empty-state\"\n                  variant=\"link\"\n                  onClick={() => navigate(`/${realm}/users`)}\n                >\n                  {t(\"users\")}\n                </Button>\n                {t(\"noUsersEmptyStateDescriptionContinued\")}\n              </div>\n            }\n          />\n        }\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"roles:userName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"email\",\n            displayKey: \"roles:email\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"roles:lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"roles:firstName\",\n            cellFormatters: [upperCaseFormatter(), emptyFormatter()],\n          },\n        ]}\n      />\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n  Tab,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { SubmitHandler, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useMatch, useNavigate } from \"react-router-dom\";\n\nimport { toClient } from \"../clients/routes/Client\";\nimport {\n  ClientRoleParams,\n  ClientRoleRoute,\n  ClientRoleTab,\n  toClientRole,\n} from \"../clients/routes/ClientRole\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport {\n  arrayToKeyValue,\n  keyValueToArray,\n  KeyValueType,\n} from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { RoleForm } from \"../components/role-form/RoleForm\";\nimport { AddRoleMappingModal } from \"../components/role-mapping/AddRoleMappingModal\";\nimport { RoleMapping } from \"../components/role-mapping/RoleMapping\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useParams } from \"../utils/useParams\";\nimport { RealmRoleRoute, RealmRoleTab, toRealmRole } from \"./routes/RealmRole\";\nimport { toRealmRoles } from \"./routes/RealmRoles\";\nimport { UsersInRoleTab } from \"./UsersInRoleTab\";\n\nexport default function RealmRoleTabs() {\n  const { t } = useTranslation(\"roles\");\n  const form = useForm<AttributeForm>({\n    mode: \"onChange\",\n  });\n  const { control, reset, setValue } = form;\n  const navigate = useNavigate();\n\n  const { adminClient } = useAdminClient();\n\n  const { id, clientId } = useParams<ClientRoleParams>();\n  const { pathname } = useLocation();\n\n  const { realm: realmName } = useRealm();\n\n  const [key, setKey] = useState(0);\n  const [attributes, setAttributes] = useState<KeyValueType[] | undefined>();\n\n  const { profileInfo } = useServerInfo();\n\n  const refresh = () => setKey(key + 1);\n\n  const { addAlert, addError } = useAlerts();\n\n  const [open, setOpen] = useState(false);\n  const convert = (role: RoleRepresentation) => {\n    const { attributes, ...rest } = role;\n    return {\n      attributes: arrayToKeyValue(attributes),\n      ...rest,\n    };\n  };\n\n  const roleName = useWatch({\n    control,\n    defaultValue: undefined,\n    name: \"name\",\n  });\n\n  const composites = useWatch({\n    control,\n    defaultValue: false,\n    name: \"composite\",\n  });\n\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(\n    async () => {\n      const [realm, role] = await Promise.all([\n        adminClient.realms.findOne({ realm: realmName }),\n        adminClient.roles.findOneById({ id }),\n      ]);\n\n      return { realm, role };\n    },\n    ({ realm, role }) => {\n      if (!realm || !role) {\n        throw new Error(t(\"common:notFound\"));\n      }\n\n      const convertedRole = convert(role);\n\n      reset(convertedRole);\n      setAttributes(convertedRole.attributes);\n      setRealm(realm);\n    },\n    [key]\n  );\n\n  const onSubmit: SubmitHandler<AttributeForm> = async (formValues) => {\n    try {\n      const { attributes, ...rest } = formValues;\n      const roleRepresentation: RoleRepresentation = rest;\n\n      roleRepresentation.name = roleRepresentation.name?.trim();\n      roleRepresentation.attributes = keyValueToArray(attributes);\n\n      if (!clientId) {\n        await adminClient.roles.updateById({ id }, roleRepresentation);\n      } else {\n        await adminClient.clients.updateRole(\n          { id: clientId, roleName: formValues.name! },\n          roleRepresentation\n        );\n      }\n\n      setAttributes(attributes);\n      addAlert(t(\"roleSaveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roles:roleSaveError\", error);\n    }\n  };\n\n  const realmRoleMatch = useMatch(RealmRoleRoute.path);\n  const clientRoleMatch = useMatch(ClientRoleRoute.path);\n\n  const toOverview = () => {\n    if (realmRoleMatch) {\n      return toRealmRoles({ realm: realmName });\n    }\n\n    if (clientRoleMatch) {\n      return toClient({\n        realm: realmName,\n        clientId: clientRoleMatch.params.clientId!,\n        tab: \"roles\",\n      });\n    }\n\n    throw new Error(\"Roles overview route could not be determined.\");\n  };\n\n  const toTab = (tab: RealmRoleTab | ClientRoleTab) => {\n    if (realmRoleMatch) {\n      return toRealmRole({\n        realm: realmName,\n        id,\n        tab,\n      });\n    }\n\n    if (clientRoleMatch) {\n      return toClientRole({\n        realm: realmName,\n        id,\n        clientId: clientRoleMatch.params.clientId!,\n        tab: tab as ClientRoleTab,\n      });\n    }\n\n    throw new Error(\"Route could not be determined.\");\n  };\n\n  const useTab = (tab: RealmRoleTab | ClientRoleTab) =>\n    useRoutableTab(toTab(tab));\n\n  const detailsTab = useTab(\"details\");\n  const associatedRolesTab = useTab(\"associated-roles\");\n  const attributesTab = useTab(\"attributes\");\n  const usersInRoleTab = useTab(\"users-in-role\");\n  const permissionsTab = useTab(\"permissions\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"roles:roleDeleteConfirm\",\n    messageKey: t(\"roles:roleDeleteConfirmDialog\", {\n      selectedRoleName: roleName || t(\"createRole\"),\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        if (!clientId) {\n          await adminClient.roles.delById({ id });\n        } else {\n          await adminClient.clients.delRole({\n            id: clientId,\n            roleName: roleName!,\n          });\n        }\n        addAlert(t(\"roleDeletedSuccess\"), AlertVariant.success);\n        navigate(toOverview());\n      } catch (error) {\n        addError(\"roles:roleDeleteError\", error);\n      }\n    },\n  });\n\n  const dropdownItems = pathname.includes(\"associated-roles\")\n    ? [\n        <DropdownItem\n          key=\"delete-all-associated\"\n          component=\"button\"\n          onClick={() => toggleDeleteAllAssociatedRolesDialog()}\n        >\n          {t(\"roles:removeAllAssociatedRoles\")}\n        </DropdownItem>,\n        <DropdownItem\n          key=\"delete-role\"\n          component=\"button\"\n          onClick={() => {\n            toggleDeleteDialog();\n          }}\n        >\n          {t(\"deleteRole\")}\n        </DropdownItem>,\n      ]\n    : [\n        <DropdownItem\n          key=\"toggle-modal\"\n          data-testid=\"add-roles\"\n          component=\"button\"\n          onClick={() => toggleModal()}\n        >\n          {t(\"addAssociatedRolesText\")}\n        </DropdownItem>,\n        <DropdownItem\n          key=\"delete-role\"\n          component=\"button\"\n          onClick={() => toggleDeleteDialog()}\n        >\n          {t(\"deleteRole\")}\n        </DropdownItem>,\n      ];\n\n  const [\n    toggleDeleteAllAssociatedRolesDialog,\n    DeleteAllAssociatedRolesConfirm,\n  ] = useConfirmDialog({\n    titleKey: t(\"roles:removeAllAssociatedRoles\") + \"?\",\n    messageKey: t(\"roles:removeAllAssociatedRolesConfirmDialog\", {\n      name: roleName || t(\"createRole\"),\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        const additionalRoles = await adminClient.roles.getCompositeRoles({\n          id,\n        });\n        await adminClient.roles.delCompositeRoles({ id }, additionalRoles);\n        addAlert(\n          t(\"compositeRoleOff\"),\n          AlertVariant.success,\n          t(\"compositesRemovedAlertDescription\")\n        );\n        navigate(toTab(\"details\"));\n        refresh();\n      } catch (error) {\n        addError(\"roles:roleDeleteError\", error);\n      }\n    },\n  });\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const addComposites = async (composites: RoleRepresentation[]) => {\n    try {\n      await adminClient.roles.createComposite(\n        { roleId: id, realm: realm!.realm },\n        composites\n      );\n      refresh();\n      navigate(toTab(\"associated-roles\"));\n      addAlert(t(\"addAssociatedRolesSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roles:addAssociatedRolesError\", error);\n    }\n  };\n\n  const isDefaultRole = (name: string | undefined) =>\n    realm?.defaultRole!.name === name;\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <DeleteAllAssociatedRolesConfirm />\n      {open && (\n        <AddRoleMappingModal\n          id={id}\n          type=\"roles\"\n          name={roleName}\n          onAssign={(rows) => addComposites(rows.map((r) => r.role))}\n          onClose={() => setOpen(false)}\n        />\n      )}\n      <ViewHeader\n        titleKey={roleName!}\n        badges={[\n          {\n            id: \"composite-role-badge\",\n            text: composites ? t(\"composite\") : \"\",\n            readonly: true,\n          },\n        ]}\n        actionsDropdownId=\"roles-actions-dropdown\"\n        dropdownItems={dropdownItems}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs isBox mountOnEnter defaultLocation={toTab(\"details\")}>\n          <Tab\n            title={<TabTitleText>{t(\"common:details\")}</TabTitleText>}\n            {...detailsTab}\n          >\n            <RoleForm\n              form={form}\n              onSubmit={onSubmit}\n              role={clientRoleMatch ? \"manage-clients\" : \"manage-realm\"}\n              cancelLink={\n                clientRoleMatch\n                  ? toClient({ realm: realmName, clientId, tab: \"roles\" })\n                  : toRealmRoles({ realm: realmName })\n              }\n              editMode\n            />\n          </Tab>\n          {composites && (\n            <Tab\n              data-testid=\"associatedRolesTab\"\n              title={<TabTitleText>{t(\"associatedRolesText\")}</TabTitleText>}\n              {...associatedRolesTab}\n            >\n              <RoleMapping\n                name={roleName!}\n                id={id}\n                type=\"roles\"\n                isManager\n                save={(rows) => addComposites(rows.map((r) => r.role))}\n              />\n            </Tab>\n          )}\n          {!isDefaultRole(roleName) && (\n            <Tab\n              data-testid=\"attributesTab\"\n              className=\"kc-attributes-tab\"\n              title={<TabTitleText>{t(\"common:attributes\")}</TabTitleText>}\n              {...attributesTab}\n            >\n              <AttributesForm\n                form={form}\n                save={onSubmit}\n                reset={() =>\n                  setValue(\"attributes\", attributes, { shouldDirty: false })\n                }\n              />\n            </Tab>\n          )}\n          {!isDefaultRole(roleName) && (\n            <Tab\n              title={<TabTitleText>{t(\"usersInRole\")}</TabTitleText>}\n              {...usersInRoleTab}\n            >\n              <UsersInRoleTab data-cy=\"users-in-role-tab\" />\n            </Tab>\n          )}\n          {!profileInfo?.disabledFeatures?.includes(\n            \"ADMIN_FINE_GRAINED_AUTHZ\"\n          ) && (\n            <Tab\n              title={<TabTitleText>{t(\"common:permissions\")}</TabTitleText>}\n              {...permissionsTab}\n            >\n              <PermissionsTab id={id} type=\"roles\" />\n            </Tab>\n          )}\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["UsersInRoleTab","navigate","useNavigate","realm","useRealm","t","useTranslation","id","clientId","useParams","adminClient","useAdminClient","loader","first","max","role","enabled","useHelp","jsx","PageSection","KeycloakDataTable","Popover","Button","jsxs","QuestionCircleIcon","ListEmptyState","emptyFormatter","upperCaseFormatter","RealmRoleTabs","form","useForm","control","reset","setValue","pathname","useLocation","realmName","key","setKey","useState","attributes","setAttributes","profileInfo","useServerInfo","refresh","addAlert","addError","useAlerts","open","setOpen","convert","rest","arrayToKeyValue","roleName","useWatch","composites","setRealm","useFetch","convertedRole","onSubmit","formValues","roleRepresentation","keyValueToArray","AlertVariant","error","realmRoleMatch","useMatch","RealmRoleRoute","clientRoleMatch","ClientRoleRoute","toOverview","toRealmRoles","toClient","toTab","tab","toRealmRole","toClientRole","useTab","useRoutableTab","detailsTab","associatedRolesTab","attributesTab","usersInRoleTab","permissionsTab","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","dropdownItems","DropdownItem","toggleDeleteAllAssociatedRolesDialog","toggleModal","DeleteAllAssociatedRolesConfirm","additionalRoles","addComposites","isDefaultRole","name","Fragment","AddRoleMappingModal","rows","r","ViewHeader","RoutableTabs","Tab","TabTitleText","RoleForm","RoleMapping","AttributesForm","PermissionsTab","KeycloakSpinner"],"mappings":"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"}