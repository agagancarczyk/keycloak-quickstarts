{"version":3,"file":"ClientScopesSection-6e89ea39.js","sources":["../../src/client-scopes/ClientScopesSection.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\n\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emptyFormatter } from \"../util\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\nimport {\n  CellDropdown,\n  ClientScope,\n  AllClientScopes,\n  ClientScopeDefaultOptionalType,\n  changeScope,\n  removeScope,\n  AllClientScopeType,\n} from \"../components/client-scope/ClientScopeTypes\";\nimport { ChangeTypeDropdown } from \"./ChangeTypeDropdown\";\nimport { toNewClientScope } from \"./routes/NewClientScope\";\n\nimport { toClientScope } from \"./routes/ClientScope\";\nimport {\n  nameFilter,\n  protocolFilter,\n  ProtocolType,\n  SearchDropdown,\n  SearchToolbar,\n  SearchType,\n  typeFilter,\n} from \"./details/SearchFilter\";\nimport type { Row } from \"../clients/scopes/ClientScopes\";\nimport { getProtocolName } from \"../clients/utils\";\nimport helpUrls from \"../help-urls\";\n\nimport \"./client-scope.css\";\n\ntype TypeSelectorProps = ClientScopeDefaultOptionalType & {\n  refresh: () => void;\n};\n\nconst TypeSelector = (scope: TypeSelectorProps) => {\n  const { t } = useTranslation(\"client-scopes\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  return (\n    <CellDropdown\n      clientScope={scope}\n      type={scope.type}\n      all\n      onSelect={async (value) => {\n        try {\n          await changeScope(adminClient, scope, value as AllClientScopeType);\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n          scope.refresh();\n        } catch (error) {\n          addError(\"client-scopes:clientScopeError\", error);\n        }\n      }}\n    />\n  );\n};\n\nconst ClientScopeDetailLink = ({\n  id,\n  name,\n}: ClientScopeDefaultOptionalType) => {\n  const { realm } = useRealm();\n  return (\n    <Link key={id} to={toClientScope({ realm, id: id!, tab: \"settings\" })}>\n      {name}\n    </Link>\n  );\n};\n\nexport default function ClientScopesSection() {\n  const { realm } = useRealm();\n  const { t } = useTranslation(\"client-scopes\");\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [kebabOpen, setKebabOpen] = useState(false);\n  const [selectedScopes, setSelectedScopes] = useState<\n    ClientScopeDefaultOptionalType[]\n  >([]);\n\n  const [searchType, setSearchType] = useState<SearchType>(\"name\");\n  const [searchTypeType, setSearchTypeType] = useState<AllClientScopes>(\n    AllClientScopes.none\n  );\n  const [searchProtocol, setSearchProtocol] = useState<ProtocolType>(\"all\");\n  const localeSort = useLocaleSort();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setSelectedScopes([]);\n    setKey(key + 1);\n  };\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const defaultScopes =\n      await adminClient.clientScopes.listDefaultClientScopes();\n    const optionalScopes =\n      await adminClient.clientScopes.listDefaultOptionalClientScopes();\n    const clientScopes = await adminClient.clientScopes.find();\n\n    const filter =\n      searchType === \"name\"\n        ? nameFilter(search)\n        : searchType === \"type\"\n        ? typeFilter(searchTypeType)\n        : protocolFilter(searchProtocol);\n\n    const transformed = clientScopes\n      .map((scope) => {\n        const row: Row = {\n          ...scope,\n          type: defaultScopes.find(\n            (defaultScope) => defaultScope.name === scope.name\n          )\n            ? ClientScope.default\n            : optionalScopes.find(\n                (optionalScope) => optionalScope.name === scope.name\n              )\n            ? ClientScope.optional\n            : AllClientScopes.none,\n        };\n        return row;\n      })\n      .filter(filter);\n\n    return localeSort(transformed, mapByKey(\"name\")).slice(\n      first,\n      Number(first) + Number(max)\n    );\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientScope\", {\n      count: selectedScopes.length,\n      name: selectedScopes[0]?.name,\n    }),\n    messageKey: \"client-scopes:deleteConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        for (const scope of selectedScopes) {\n          try {\n            await removeScope(adminClient, scope);\n          } catch (error: any) {\n            console.warn(\n              \"could not remove scope\",\n              error.response?.data?.errorMessage || error\n            );\n          }\n          await adminClient.clientScopes.del({ id: scope.id! });\n        }\n        addAlert(t(\"deletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"client-scopes:deleteError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey=\"clientScopes\"\n        subKey=\"client-scopes:clientScopeExplain\"\n        helpUrl={helpUrls.clientScopesUrl}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <KeycloakDataTable\n          key={key}\n          loader={loader}\n          ariaLabelKey=\"client-scopes:clientScopeList\"\n          searchPlaceholderKey={\n            searchType === \"name\" ? \"client-scopes:searchFor\" : undefined\n          }\n          isSearching={searchType !== \"name\"}\n          searchTypeComponent={\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={(searchType) => setSearchType(searchType)}\n              withProtocol\n            />\n          }\n          isPaginated\n          onSelect={(clientScopes) => setSelectedScopes([...clientScopes])}\n          canSelectAll\n          toolbarItem={\n            <>\n              <SearchToolbar\n                searchType={searchType}\n                type={searchTypeType}\n                onSelect={(searchType) => {\n                  setSearchType(searchType);\n                  setSearchProtocol(\"all\");\n                  setSearchTypeType(AllClientScopes.none);\n                  refresh();\n                }}\n                onType={(value) => {\n                  setSearchTypeType(value);\n                  setSearchProtocol(\"all\");\n                  refresh();\n                }}\n                protocol={searchProtocol}\n                onProtocol={(protocol) => {\n                  setSearchProtocol(protocol);\n                  setSearchTypeType(AllClientScopes.none);\n                  refresh();\n                }}\n              />\n\n              <ToolbarItem>\n                <Button\n                  component={(props) => (\n                    <Link {...props} to={toNewClientScope({ realm })} />\n                  )}\n                >\n                  {t(\"createClientScope\")}\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem>\n                <ChangeTypeDropdown\n                  selectedRows={selectedScopes}\n                  refresh={refresh}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  toggle={<KebabToggle onToggle={setKebabOpen} />}\n                  isOpen={kebabOpen}\n                  isPlain\n                  dropdownItems={[\n                    <DropdownItem\n                      key=\"action\"\n                      component=\"button\"\n                      isDisabled={selectedScopes.length === 0}\n                      onClick={() => {\n                        toggleDeleteDialog();\n                        setKebabOpen(false);\n                      }}\n                    >\n                      {t(\"common:delete\")}\n                    </DropdownItem>,\n                  ]}\n                />\n              </ToolbarItem>\n            </>\n          }\n          actions={[\n            {\n              title: t(\"common:delete\"),\n              onRowClick: (clientScope) => {\n                setSelectedScopes([clientScope]);\n                toggleDeleteDialog();\n              },\n            } as Action<Row>,\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              cellRenderer: ClientScopeDetailLink,\n            },\n            {\n              name: \"type\",\n              displayKey: \"client-scopes:assignedType\",\n              cellRenderer: (row) => (\n                <TypeSelector {...row} refresh={refresh} />\n              ),\n            },\n            {\n              name: \"protocol\",\n              displayKey: \"client-scopes:protocol\",\n              cellRenderer: (client) =>\n                getProtocolName(t, client.protocol ?? \"openid-connect\"),\n              transforms: [cellWidth(15)],\n            },\n            {\n              name: \"attributes['gui.order']\",\n              displayKey: \"client-scopes:displayOrder\",\n              cellFormatters: [emptyFormatter()],\n              transforms: [cellWidth(15)],\n            },\n            { name: \"description\", cellFormatters: [emptyFormatter()] },\n          ]}\n        />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["TypeSelector","scope","t","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","jsx","CellDropdown","value","changeScope","AlertVariant","error","ClientScopeDetailLink","id","name","realm","useRealm","Link","toClientScope","ClientScopesSection","kebabOpen","setKebabOpen","useState","selectedScopes","setSelectedScopes","searchType","setSearchType","searchTypeType","setSearchTypeType","AllClientScopes","searchProtocol","setSearchProtocol","localeSort","useLocaleSort","key","setKey","refresh","loader","first","max","search","defaultScopes","optionalScopes","clientScopes","filter","nameFilter","typeFilter","protocolFilter","transformed","defaultScope","ClientScope","optionalScope","mapByKey","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","removeScope","jsxs","Fragment","ViewHeader","helpUrls","PageSection","KeycloakDataTable","SearchDropdown","SearchToolbar","protocol","ToolbarItem","Button","props","toNewClientScope","ChangeTypeDropdown","Dropdown","KebabToggle","DropdownItem","clientScope","row","client","getProtocolName","cellWidth","emptyFormatter"],"mappings":"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"}