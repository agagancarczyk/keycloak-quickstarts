{"version":3,"file":"DetailSettings-defa4606.js","sources":["../../src/identity-providers/add/AdvancedSettings.tsx","../../src/identity-providers/add/ExtendedNonDiscoverySettings.tsx","../../src/identity-providers/add/ReqAuthnConstraintsSettings.tsx","../../src/identity-providers/add/DetailSettings.tsx"],"sourcesContent":["import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport { HelpItem } from \"ui-shared\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport type { FieldProps } from \"../component/FormGroupField\";\nimport { SwitchField } from \"../component/SwitchField\";\nimport { TextField } from \"../component/TextField\";\n\nconst LoginFlow = ({\n  field,\n  label,\n  defaultValue,\n}: FieldProps & { defaultValue: string }) => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { control } = useFormContext();\n\n  const { adminClient } = useAdminClient();\n  const [flows, setFlows] = useState<AuthenticationFlowRepresentation[]>();\n  const [open, setOpen] = useState(false);\n\n  useFetch(\n    () => adminClient.authenticationManagement.getFlows(),\n    (flows) =>\n      setFlows(flows.filter((flow) => flow.providerId === \"basic-flow\")),\n    []\n  );\n\n  return (\n    <FormGroup\n      label={t(label)}\n      labelIcon={\n        <HelpItem\n          helpText={t(`identity-providers-help:${label}`)}\n          fieldLabelId={`identity-providers:${label}`}\n        />\n      }\n      fieldId={label}\n    >\n      <Controller\n        name={field}\n        defaultValue={defaultValue}\n        control={control}\n        render={({ field }) => (\n          <Select\n            toggleId={label}\n            required\n            onToggle={() => setOpen(!open)}\n            onSelect={(_, value) => {\n              field.onChange(value as string);\n              setOpen(false);\n            }}\n            selections={field.value || t(\"common:none\")}\n            variant={SelectVariant.single}\n            aria-label={t(label)}\n            isOpen={open}\n          >\n            {[\n              ...(defaultValue === \"\"\n                ? [\n                    <SelectOption key=\"empty\" value=\"\">\n                      {t(\"common:none\")}\n                    </SelectOption>,\n                  ]\n                : []),\n              ...(flows?.map((option) => (\n                <SelectOption\n                  selected={option.alias === field.value}\n                  key={option.id}\n                  value={option.alias}\n                >\n                  {option.alias}\n                </SelectOption>\n              )) || []),\n            ]}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n\nconst syncModes = [\"import\", \"legacy\", \"force\"];\ntype AdvancedSettingsProps = { isOIDC: boolean; isSAML: boolean };\n\nexport const AdvancedSettings = ({ isOIDC, isSAML }: AdvancedSettingsProps) => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { control } = useFormContext();\n  const [syncModeOpen, setSyncModeOpen] = useState(false);\n  return (\n    <>\n      {!isOIDC && !isSAML && (\n        <TextField field=\"config.defaultScope\" label=\"scopes\" />\n      )}\n      <SwitchField field=\"storeToken\" label=\"storeTokens\" fieldType=\"boolean\" />\n      {(isSAML || isOIDC) && (\n        <SwitchField\n          field=\"addReadTokenRoleOnCreate\"\n          label=\"storedTokensReadable\"\n          fieldType=\"boolean\"\n        />\n      )}\n      {!isOIDC && !isSAML && (\n        <>\n          <SwitchField\n            field=\"config.acceptsPromptNoneForwardFromClient\"\n            label=\"acceptsPromptNone\"\n          />\n          <SwitchField field=\"config.disableUserInfo\" label=\"disableUserInfo\" />\n        </>\n      )}\n      <SwitchField field=\"trustEmail\" label=\"trustEmail\" fieldType=\"boolean\" />\n      <SwitchField\n        field=\"linkOnly\"\n        label=\"accountLinkingOnly\"\n        fieldType=\"boolean\"\n      />\n      <SwitchField field=\"config.hideOnLoginPage\" label=\"hideOnLoginPage\" />\n\n      <LoginFlow\n        field=\"firstBrokerLoginFlowAlias\"\n        label=\"firstBrokerLoginFlowAlias\"\n        defaultValue=\"fist broker login\"\n      />\n      <LoginFlow\n        field=\"postBrokerLoginFlowAlias\"\n        label=\"postBrokerLoginFlowAlias\"\n        defaultValue=\"\"\n      />\n\n      <FormGroup\n        className=\"pf-u-pb-3xl\"\n        label={t(\"syncMode\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:syncMode\")}\n            fieldLabelId=\"identity-providers:syncMode\"\n          />\n        }\n        fieldId=\"syncMode\"\n      >\n        <Controller\n          name=\"config.syncMode\"\n          defaultValue={syncModes[0].toUpperCase()}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"syncMode\"\n              required\n              direction=\"up\"\n              onToggle={() => setSyncModeOpen(!syncModeOpen)}\n              onSelect={(_, value) => {\n                field.onChange(value as string);\n                setSyncModeOpen(false);\n              }}\n              selections={t(`syncModes.${field.value.toLowerCase()}`)}\n              variant={SelectVariant.single}\n              aria-label={t(\"syncMode\")}\n              isOpen={syncModeOpen}\n            >\n              {syncModes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option.toUpperCase()}\n                >\n                  {t(`syncModes.${option}`)}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import {\n  ExpandableSection,\n  Form,\n  FormGroup,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { FormGroupField } from \"../component/FormGroupField\";\nimport { SwitchField } from \"../component/SwitchField\";\nimport { TextField } from \"../component/TextField\";\n\nconst promptOptions = {\n  unspecified: \"\",\n  none: \"none\",\n  consent: \"consent\",\n  login: \"login\",\n  select_account: \"select_account\",\n};\n\nexport const ExtendedNonDiscoverySettings = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { control } = useFormContext();\n\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [promptOpen, setPromptOpen] = useState(false);\n\n  return (\n    <ExpandableSection\n      toggleText={t(\"advanced\")}\n      onToggle={() => setIsExpanded(!isExpanded)}\n      isExpanded={isExpanded}\n    >\n      <Form isHorizontal>\n        <SwitchField label=\"passLoginHint\" field=\"config.loginHint\" />\n        <SwitchField label=\"passMaxAge\" field=\"config.passMaxAge\" />\n        <SwitchField label=\"passCurrentLocale\" field=\"config.uiLocales\" />\n        <SwitchField\n          field=\"config.backchannelSupported\"\n          label=\"backchannelLogout\"\n        />\n        <SwitchField field=\"config.disableUserInfo\" label=\"disableUserInfo\" />\n        <TextField field=\"config.defaultScope\" label=\"scopes\" />\n        <FormGroupField label=\"prompt\">\n          <Controller\n            name=\"config.prompt\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"prompt\"\n                required\n                onToggle={() => setPromptOpen(!promptOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setPromptOpen(false);\n                }}\n                selections={field.value || t(`prompts.unspecified`)}\n                variant={SelectVariant.single}\n                aria-label={t(\"prompt\")}\n                isOpen={promptOpen}\n              >\n                {Object.entries(promptOptions).map(([key, val]) => (\n                  <SelectOption\n                    selected={val === field.value}\n                    key={key}\n                    value={val}\n                  >\n                    {t(`prompts.${key}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroupField>\n        <SwitchField\n          field=\"config.acceptsPromptNoneForwardFromClient\"\n          label=\"acceptsPromptNone\"\n        />\n        <FormGroup\n          label={t(\"allowedClockSkew\")}\n          labelIcon={\n            <HelpItem\n              helpText={\"identity-providers-help:allowedClockSkew\"}\n              fieldLabelId=\"identity-providers:allowedClockSkew\"\n            />\n          }\n          fieldId=\"allowedClockSkew\"\n        >\n          <Controller\n            name=\"config.allowedClockSkew\"\n            defaultValue={0}\n            control={control}\n            render={({ field }) => {\n              const v = Number(field.value);\n              return (\n                <NumberInput\n                  data-testid=\"allowedClockSkew\"\n                  inputName=\"allowedClockSkew\"\n                  min={0}\n                  max={2147483}\n                  value={v}\n                  readOnly\n                  onPlus={() => field.onChange(v + 1)}\n                  onMinus={() => field.onChange(v - 1)}\n                  onChange={(event) => {\n                    const value = Number(\n                      (event.target as HTMLInputElement).value\n                    );\n                    field.onChange(value < 0 ? 0 : value);\n                  }}\n                />\n              );\n            }}\n          />\n        </FormGroup>\n        <TextField field=\"config.forwardParameters\" label=\"forwardParameters\" />\n      </Form>\n    </ExpandableSection>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\n\nconst comparisonValues = [\"exact\", \"minimum\", \"maximum\", \"better\"];\n\nexport const ReqAuthnConstraints = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { control } = useFormContext();\n  const [comparisonOpen, setComparisonOpen] = useState(false);\n  return (\n    <>\n      <FormGroup\n        label={t(\"comparison\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:comparison\")}\n            fieldLabelId=\"identity-providers:comparison\"\n          />\n        }\n        fieldId=\"comparison\"\n      >\n        <Controller\n          name=\"config.authnContextComparisonType\"\n          defaultValue={comparisonValues[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"comparison\"\n              required\n              direction=\"up\"\n              onToggle={(isExpanded) => setComparisonOpen(isExpanded)}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setComparisonOpen(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"comparison\")}\n              isOpen={comparisonOpen}\n            >\n              {comparisonValues.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                >\n                  {t(option)}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authnContextClassRefs\")}\n        fieldId=\"kc-authnContextClassRefs\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:authnContextClassRefs\")}\n            fieldLabelId=\"authnContextClassRefs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name=\"config.authnContextClassRefs\"\n          aria-label={t(\"identify-providers:authnContextClassRefs\")}\n          addButtonLabel=\"identity-providers:addAuthnContextClassRef\"\n          data-testid=\"classref-field\"\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authnContextDeclRefs\")}\n        fieldId=\"kc-authnContextDeclRefs\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:authnContextDeclRefs\")}\n            fieldLabelId=\"authnContextDeclRefs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name=\"config.authnContextDeclRefs\"\n          aria-label={t(\"identify-providers:authnContextDeclRefs\")}\n          addButtonLabel=\"identity-providers:addAuthnContextDeclRef\"\n          data-testid=\"declref-field\"\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import type IdentityProviderMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperRepresentation\";\nimport type IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  DropdownItem,\n  Form,\n  PageSection,\n  Tab,\n  TabTitleText,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { PermissionsTab } from \"../../components/permission-tab/PermissionTab\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { ScrollForm } from \"../../components/scroll-form/ScrollForm\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { toUpperCase } from \"../../util\";\nimport { useParams } from \"../../utils/useParams\";\nimport { ExtendedFieldsForm } from \"../component/ExtendedFieldsForm\";\nimport { toIdentityProviderAddMapper } from \"../routes/AddMapper\";\nimport { toIdentityProviderEditMapper } from \"../routes/EditMapper\";\nimport {\n  IdentityProviderParams,\n  IdentityProviderTab,\n  toIdentityProvider,\n} from \"../routes/IdentityProvider\";\nimport { toIdentityProviders } from \"../routes/IdentityProviders\";\nimport { AdvancedSettings } from \"./AdvancedSettings\";\nimport { DescriptorSettings } from \"./DescriptorSettings\";\nimport { DiscoverySettings } from \"./DiscoverySettings\";\nimport { ExtendedNonDiscoverySettings } from \"./ExtendedNonDiscoverySettings\";\nimport { GeneralSettings } from \"./GeneralSettings\";\nimport { OIDCAuthentication } from \"./OIDCAuthentication\";\nimport { OIDCGeneralSettings } from \"./OIDCGeneralSettings\";\nimport { ReqAuthnConstraints } from \"./ReqAuthnConstraintsSettings\";\nimport { SamlGeneralSettings } from \"./SamlGeneralSettings\";\n\ntype HeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean;\n  save: () => void;\n  toggleDeleteDialog: () => void;\n};\n\ntype IdPWithMapperAttributes = IdentityProviderMapperRepresentation & {\n  name: string;\n  category?: string;\n  helpText?: string;\n  type: string;\n  mapperId: string;\n};\n\nconst Header = ({ onChange, value, save, toggleDeleteDialog }: HeaderProps) => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { alias: displayName } = useParams<{ alias: string }>();\n  const { adminClient } = useAdminClient();\n  const [provider, setProvider] = useState<IdentityProviderRepresentation>();\n\n  useFetch(\n    () => adminClient.identityProviders.findOne({ alias: displayName }),\n    (fetchedProvider) => {\n      if (!fetchedProvider) {\n        throw new Error(t(\"common:notFound\"));\n      }\n      setProvider(fetchedProvider);\n    },\n    []\n  );\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"identity-providers:disableProvider\",\n    messageKey: t(\"disableConfirm\", { provider: displayName }),\n    continueButtonLabel: \"common:disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <ViewHeader\n        titleKey={toUpperCase(\n          provider\n            ? provider.displayName\n              ? provider.displayName\n              : provider.providerId!\n            : \"\"\n        )}\n        divider={false}\n        dropdownItems={[\n          <DropdownItem key=\"delete\" onClick={() => toggleDeleteDialog()}>\n            {t(\"common:delete\")}\n          </DropdownItem>,\n        ]}\n        isEnabled={value}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\ntype MapperLinkProps = IdPWithMapperAttributes & {\n  provider?: IdentityProviderRepresentation;\n};\n\nconst MapperLink = ({ name, mapperId, provider }: MapperLinkProps) => {\n  const { realm } = useRealm();\n  const { alias } = useParams<IdentityProviderParams>();\n\n  return (\n    <Link\n      to={toIdentityProviderEditMapper({\n        realm,\n        alias,\n        providerId: provider?.providerId!,\n        id: mapperId,\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n\nexport default function DetailSettings() {\n  const { t } = useTranslation(\"identity-providers\");\n  const { alias, providerId } = useParams<IdentityProviderParams>();\n\n  const form = useForm<IdentityProviderRepresentation>();\n  const { handleSubmit, getValues, reset } = form;\n  const [provider, setProvider] = useState<IdentityProviderRepresentation>();\n  const [selectedMapper, setSelectedMapper] =\n    useState<IdPWithMapperAttributes>();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const [key, setKey] = useState(0);\n  const { profileInfo } = useServerInfo();\n  const refresh = () => setKey(key + 1);\n\n  useFetch(\n    () => adminClient.identityProviders.findOne({ alias }),\n    (fetchedProvider) => {\n      if (!fetchedProvider) {\n        throw new Error(t(\"common:notFound\"));\n      }\n\n      reset(fetchedProvider);\n      setProvider(fetchedProvider);\n\n      if (fetchedProvider.config!.authnContextClassRefs) {\n        form.setValue(\n          \"config.authnContextClassRefs\",\n          JSON.parse(fetchedProvider.config?.authnContextClassRefs)\n        );\n      }\n\n      if (fetchedProvider.config!.authnContextDeclRefs) {\n        form.setValue(\n          \"config.authnContextDeclRefs\",\n          JSON.parse(fetchedProvider.config?.authnContextDeclRefs)\n        );\n      }\n    },\n    []\n  );\n\n  const toTab = (tab: IdentityProviderTab) =>\n    toIdentityProvider({\n      realm,\n      alias,\n      providerId,\n      tab,\n    });\n\n  const useTab = (tab: IdentityProviderTab) => useRoutableTab(toTab(tab));\n\n  const settingsTab = useTab(\"settings\");\n  const mappersTab = useTab(\"mappers\");\n  const permissionsTab = useTab(\"permissions\");\n\n  const save = async (savedProvider?: IdentityProviderRepresentation) => {\n    const p = savedProvider || getValues();\n    if (p.config?.authnContextClassRefs)\n      p.config.authnContextClassRefs = JSON.stringify(\n        p.config.authnContextClassRefs\n      );\n    if (p.config?.authnContextDeclRefs)\n      p.config.authnContextDeclRefs = JSON.stringify(\n        p.config.authnContextDeclRefs\n      );\n\n    try {\n      await adminClient.identityProviders.update(\n        { alias },\n        {\n          ...p,\n          config: { ...provider?.config, ...p.config },\n          alias,\n          providerId,\n        }\n      );\n      addAlert(t(\"updateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"identity-providers:updateError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"identity-providers:deleteProvider\",\n    messageKey: t(\"identity-providers:deleteConfirm\", { provider: alias }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.identityProviders.del({ alias: alias });\n        addAlert(t(\"deletedSuccess\"), AlertVariant.success);\n        navigate(toIdentityProviders({ realm }));\n      } catch (error) {\n        addError(\"identity-providers:deleteErrorError\", error);\n      }\n    },\n  });\n\n  const [toggleDeleteMapperDialog, DeleteMapperConfirm] = useConfirmDialog({\n    titleKey: \"identity-providers:deleteProviderMapper\",\n    messageKey: t(\"identity-providers:deleteMapperConfirm\", {\n      mapper: selectedMapper?.name,\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.identityProviders.delMapper({\n          alias: alias,\n          id: selectedMapper?.mapperId!,\n        });\n        addAlert(t(\"deleteMapperSuccess\"), AlertVariant.success);\n        refresh();\n        navigate(\n          toIdentityProvider({ providerId, alias, tab: \"mappers\", realm })\n        );\n      } catch (error) {\n        addError(\"identity-providers:deleteErrorError\", error);\n      }\n    },\n  });\n\n  if (!provider) {\n    return <KeycloakSpinner />;\n  }\n\n  const isOIDC = provider.providerId!.includes(\"oidc\");\n  const isSAML = provider.providerId!.includes(\"saml\");\n\n  const loader = async () => {\n    const [loaderMappers, loaderMapperTypes] = await Promise.all([\n      adminClient.identityProviders.findMappers({ alias }),\n      adminClient.identityProviders.findMapperTypes({ alias }),\n    ]);\n\n    const components = loaderMappers.map((loaderMapper) => {\n      const mapperType = Object.values(loaderMapperTypes).find(\n        (loaderMapperType) =>\n          loaderMapper.identityProviderMapper! === loaderMapperType.id!\n      );\n\n      const result: IdPWithMapperAttributes = {\n        ...mapperType,\n        name: loaderMapper.name!,\n        type: mapperType?.name!,\n        mapperId: loaderMapper.id!,\n      };\n\n      return result;\n    });\n\n    return components;\n  };\n\n  const sections = [\n    {\n      title: t(\"generalSettings\"),\n      panel: (\n        <FormAccess\n          role=\"manage-identity-providers\"\n          isHorizontal\n          onSubmit={handleSubmit(save)}\n        >\n          {!isOIDC && !isSAML && (\n            <>\n              <GeneralSettings create={false} id={alias} />\n              <ExtendedFieldsForm providerId={alias} />\n            </>\n          )}\n          {isOIDC && <OIDCGeneralSettings id={alias} />}\n          {isSAML && <SamlGeneralSettings id={alias} isAliasReadonly />}\n        </FormAccess>\n      ),\n    },\n    {\n      title: t(\"oidcSettings\"),\n      isHidden: !isOIDC,\n      panel: (\n        <>\n          <DiscoverySettings readOnly={false} />\n          <Form isHorizontal className=\"pf-u-py-lg\">\n            <Divider />\n            <OIDCAuthentication create={false} />\n          </Form>\n          <ExtendedNonDiscoverySettings />\n        </>\n      ),\n    },\n    {\n      title: t(\"samlSettings\"),\n      isHidden: !isSAML,\n      panel: <DescriptorSettings readOnly={false} />,\n    },\n    {\n      title: t(\"reqAuthnConstraints\"),\n      isHidden: !isSAML,\n      panel: (\n        <FormAccess\n          role=\"manage-identity-providers\"\n          isHorizontal\n          onSubmit={handleSubmit(save)}\n        >\n          <ReqAuthnConstraints />\n        </FormAccess>\n      ),\n    },\n    {\n      title: t(\"advancedSettings\"),\n      panel: (\n        <FormAccess\n          role=\"manage-identity-providers\"\n          isHorizontal\n          onSubmit={handleSubmit(save)}\n        >\n          <AdvancedSettings isOIDC={isOIDC!} isSAML={isSAML!} />\n\n          <ActionGroup className=\"keycloak__form_actions\">\n            <Button data-testid={\"save\"} type=\"submit\">\n              {t(\"common:save\")}\n            </Button>\n            <Button\n              data-testid={\"revert\"}\n              variant=\"link\"\n              onClick={() => {\n                reset();\n              }}\n            >\n              {t(\"common:revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      ),\n    },\n  ];\n\n  return (\n    <FormProvider {...form}>\n      <DeleteConfirm />\n      <DeleteMapperConfirm />\n      <Controller\n        name=\"enabled\"\n        control={form.control}\n        defaultValue={true}\n        render={({ field }) => (\n          <Header\n            value={field.value || false}\n            onChange={field.onChange}\n            save={save}\n            toggleDeleteDialog={toggleDeleteDialog}\n          />\n        )}\n      />\n\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs isBox defaultLocation={toTab(\"settings\")}>\n          <Tab\n            id=\"settings\"\n            title={<TabTitleText>{t(\"common:settings\")}</TabTitleText>}\n            {...settingsTab}\n          >\n            <ScrollForm className=\"pf-u-px-lg\" sections={sections} />\n          </Tab>\n          <Tab\n            id=\"mappers\"\n            data-testid=\"mappers-tab\"\n            title={<TabTitleText>{t(\"common:mappers\")}</TabTitleText>}\n            {...mappersTab}\n          >\n            <KeycloakDataTable\n              emptyState={\n                <ListEmptyState\n                  message={t(\"identity-providers:noMappers\")}\n                  instructions={t(\"identity-providers:noMappersInstructions\")}\n                  primaryActionText={t(\"identity-providers:addMapper\")}\n                  onPrimaryAction={() =>\n                    navigate(\n                      toIdentityProviderAddMapper({\n                        realm,\n                        alias: alias!,\n                        providerId: provider.providerId!,\n                        tab: \"mappers\",\n                      })\n                    )\n                  }\n                />\n              }\n              loader={loader}\n              key={key}\n              ariaLabelKey=\"identity-providers:mappersList\"\n              searchPlaceholderKey=\"identity-providers:searchForMapper\"\n              toolbarItem={\n                <ToolbarItem>\n                  <Button\n                    id=\"add-mapper-button\"\n                    component={(props) => (\n                      <Link\n                        {...props}\n                        to={toIdentityProviderAddMapper({\n                          realm,\n                          alias: alias!,\n                          providerId: provider.providerId!,\n                          tab: \"mappers\",\n                        })}\n                      />\n                    )}\n                    data-testid=\"addMapper\"\n                  >\n                    {t(\"addMapper\")}\n                  </Button>\n                </ToolbarItem>\n              }\n              columns={[\n                {\n                  name: \"name\",\n                  displayKey: \"common:name\",\n                  cellRenderer: (row) => (\n                    <MapperLink {...row} provider={provider} />\n                  ),\n                },\n                {\n                  name: \"category\",\n                  displayKey: \"common:category\",\n                },\n                {\n                  name: \"type\",\n                  displayKey: \"common:type\",\n                },\n              ]}\n              actions={[\n                {\n                  title: t(\"common:delete\"),\n                  onRowClick: (mapper) => {\n                    setSelectedMapper(mapper);\n                    toggleDeleteMapperDialog();\n                  },\n                } as Action<IdPWithMapperAttributes>,\n              ]}\n            />\n          </Tab>\n          {!profileInfo?.disabledFeatures?.includes(\n            \"ADMIN_FINE_GRAINED_AUTHZ\"\n          ) && (\n            <Tab\n              id=\"permissions\"\n              data-testid=\"permissionsTab\"\n              title={<TabTitleText>{t(\"common:permissions\")}</TabTitleText>}\n              {...permissionsTab}\n            >\n              <PermissionsTab id={alias} type=\"identityProviders\" />\n            </Tab>\n          )}\n        </RoutableTabs>\n      </PageSection>\n    </FormProvider>\n  );\n}\n"],"names":["LoginFlow","field","label","defaultValue","t","useTranslation","control","useFormContext","adminClient","useAdminClient","flows","setFlows","useState","open","setOpen","useFetch","flow","jsx","FormGroup","HelpItem","Controller","Select","_","value","SelectVariant","SelectOption","option","syncModes","AdvancedSettings","isOIDC","isSAML","syncModeOpen","setSyncModeOpen","jsxs","Fragment","TextField","SwitchField","promptOptions","ExtendedNonDiscoverySettings","isExpanded","setIsExpanded","promptOpen","setPromptOpen","ExpandableSection","Form","FormGroupField","key","val","v","NumberInput","event","comparisonValues","ReqAuthnConstraints","comparisonOpen","setComparisonOpen","MultiLineInput","Header","onChange","save","toggleDeleteDialog","displayName","useParams","provider","setProvider","fetchedProvider","toggleDisableDialog","DisableConfirm","useConfirmDialog","ViewHeader","toUpperCase","DropdownItem","MapperLink","name","mapperId","realm","useRealm","alias","Link","toIdentityProviderEditMapper","DetailSettings","providerId","form","useForm","handleSubmit","getValues","reset","selectedMapper","setSelectedMapper","addAlert","addError","useAlerts","navigate","useNavigate","setKey","profileInfo","useServerInfo","refresh","toTab","tab","toIdentityProvider","useTab","useRoutableTab","settingsTab","mappersTab","permissionsTab","savedProvider","p","AlertVariant","error","DeleteConfirm","ButtonVariant","toIdentityProviders","toggleDeleteMapperDialog","DeleteMapperConfirm","KeycloakSpinner","loader","loaderMappers","loaderMapperTypes","loaderMapper","mapperType","loaderMapperType","sections","FormAccess","GeneralSettings","ExtendedFieldsForm","OIDCGeneralSettings","SamlGeneralSettings","DiscoverySettings","Divider","OIDCAuthentication","DescriptorSettings","ActionGroup","Button","FormProvider","PageSection","RoutableTabs","Tab","TabTitleText","ScrollForm","KeycloakDataTable","ListEmptyState","toIdentityProviderAddMapper","ToolbarItem","props","row","mapper","PermissionsTab"],"mappings":"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"}