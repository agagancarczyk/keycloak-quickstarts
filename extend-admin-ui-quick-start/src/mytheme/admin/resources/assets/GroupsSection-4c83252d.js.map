{"version":3,"file":"GroupsSection-4c83252d.js","sources":["../../../../node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelBody.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerHead.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js","../../../../node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.mjs","../../../../node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewRoot.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js","../../src/groups/GroupsModal.tsx","../../src/groups/groupIdUtils.ts","../../src/groups/components/DeleteGroup.tsx","../../src/groups/components/GroupToolbar.tsx","../../src/groups/components/MoveDialog.tsx","../../src/groups/GroupTable.tsx","../../src/groups/MembersModal.tsx","../../src/groups/Members.tsx","../../src/groups/GroupAttributes.tsx","../../src/groups/GroupRoleMapping.tsx","../../src/groups/components/GroupTree.tsx","../../src/components/bread-crumb/GroupBreadCrumbs.tsx","../../src/groups/GroupsSection.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nexport const DrawerPanelBody = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', children, hasNoPadding = false } = _a, props = __rest(_a, [\"className\", \"children\", \"hasNoPadding\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.drawerBody, hasNoPadding && styles.modifiers.noPadding, className) }, props), children));\n};\nDrawerPanelBody.displayName = 'DrawerPanelBody';\n//# sourceMappingURL=DrawerPanelBody.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerPanelBody } from './DrawerPanelBody';\nexport const DrawerHead = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', children, hasNoPadding = false } = _a, props = __rest(_a, [\"className\", \"children\", \"hasNoPadding\"]);\n    return (React.createElement(DrawerPanelBody, { hasNoPadding: hasNoPadding },\n        React.createElement(\"div\", Object.assign({ className: css(styles.drawerHead, className) }, props), children)));\n};\nDrawerHead.displayName = 'DrawerHead';\n//# sourceMappingURL=DrawerHead.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Divider } from '../Divider';\nexport const TreeViewList = (_a) => {\n    var { isNested = false, toolbar, children } = _a, props = __rest(_a, [\"isNested\", \"toolbar\", \"children\"]);\n    return (React.createElement(React.Fragment, null,\n        toolbar && (React.createElement(React.Fragment, null,\n            toolbar,\n            React.createElement(Divider, null))),\n        React.createElement(\"ul\", Object.assign({ className: css('pf-c-tree-view__list'), role: isNested ? 'group' : 'tree' }, props), children)));\n};\nTreeViewList.displayName = 'TreeViewList';\n//# sourceMappingURL=TreeViewList.js.map","import './tree-view.css';\nexport default {\n  \"badge\": \"pf-c-badge\",\n  \"modifiers\": {\n    \"compact\": \"pf-m-compact\",\n    \"guides\": \"pf-m-guides\",\n    \"expanded\": \"pf-m-expanded\",\n    \"noBackground\": \"pf-m-no-background\",\n    \"current\": \"pf-m-current\",\n    \"read\": \"pf-m-read\",\n    \"selectable\": \"pf-m-selectable\",\n    \"truncate\": \"pf-m-truncate\"\n  },\n  \"themeDark\": \"pf-theme-dark\",\n  \"treeView\": \"pf-c-tree-view\",\n  \"treeViewAction\": \"pf-c-tree-view__action\",\n  \"treeViewContent\": \"pf-c-tree-view__content\",\n  \"treeViewListItem\": \"pf-c-tree-view__list-item\",\n  \"treeViewNode\": \"pf-c-tree-view__node\",\n  \"treeViewNodeCheck\": \"pf-c-tree-view__node-check\",\n  \"treeViewNodeContainer\": \"pf-c-tree-view__node-container\",\n  \"treeViewNodeContent\": \"pf-c-tree-view__node-content\",\n  \"treeViewNodeCount\": \"pf-c-tree-view__node-count\",\n  \"treeViewNodeIcon\": \"pf-c-tree-view__node-icon\",\n  \"treeViewNodeText\": \"pf-c-tree-view__node-text\",\n  \"treeViewNodeTitle\": \"pf-c-tree-view__node-title\",\n  \"treeViewNodeToggle\": \"pf-c-tree-view__node-toggle\",\n  \"treeViewNodeToggleIcon\": \"pf-c-tree-view__node-toggle-icon\",\n  \"treeViewSearch\": \"pf-c-tree-view__search\"\n};","import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nconst TreeViewListItemBase = ({ name, title, id, isExpanded, defaultExpanded = false, children = null, onSelect, onCheck, hasCheck = false, checkProps = {\n    checked: false\n}, hasBadge = false, customBadgeContent, badgeProps = { isRead: true }, isSelectable = false, isCompact, activeItems = [], itemData, parentItem, icon, expandedIcon, action, compareItems, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nuseMemo }) => {\n    const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n    useEffect(() => {\n        if (isExpanded !== undefined && isExpanded !== null) {\n            setIsExpanded(isExpanded);\n        }\n        else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n            setIsExpanded(internalIsExpanded || defaultExpanded);\n        }\n    }, [isExpanded, defaultExpanded]);\n    let Component = 'button';\n    if (hasCheck) {\n        Component = 'label';\n    }\n    else if (isSelectable) {\n        Component = 'div';\n    }\n    const ToggleComponent = hasCheck || isSelectable ? 'button' : 'span';\n    const renderToggle = (randomId) => (React.createElement(ToggleComponent, Object.assign({ className: css(styles.treeViewNodeToggle), onClick: (evt) => {\n            if (isSelectable || hasCheck) {\n                setIsExpanded(!internalIsExpanded);\n            }\n            if (isSelectable) {\n                evt.stopPropagation();\n            }\n        } }, ((hasCheck || isSelectable) && { 'aria-labelledby': `label-${randomId}` }), { tabIndex: -1 }),\n        React.createElement(\"span\", { className: css(styles.treeViewNodeToggleIcon) },\n            React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" }))));\n    const renderCheck = (randomId) => (React.createElement(\"span\", { className: css(styles.treeViewNodeCheck) },\n        React.createElement(\"input\", Object.assign({ type: \"checkbox\", onChange: evt => onCheck && onCheck(evt, itemData, parentItem), onClick: evt => evt.stopPropagation(), ref: elem => elem && (elem.indeterminate = checkProps.checked === null) }, checkProps, { checked: checkProps.checked === null ? false : checkProps.checked, id: randomId, tabIndex: -1 }))));\n    const iconRendered = (React.createElement(\"span\", { className: css(styles.treeViewNodeIcon) },\n        !internalIsExpanded && icon,\n        internalIsExpanded && (expandedIcon || icon)));\n    const renderNodeContent = () => {\n        const content = (React.createElement(React.Fragment, null,\n            isCompact && title && React.createElement(\"span\", { className: css(styles.treeViewNodeTitle) }, title),\n            isSelectable ? (React.createElement(\"button\", { tabIndex: -1, className: css(styles.treeViewNodeText) }, name)) : (React.createElement(\"span\", { className: css(styles.treeViewNodeText) }, name))));\n        return isCompact ? React.createElement(\"span\", { className: css(styles.treeViewNodeContent) }, content) : content;\n    };\n    const badgeRendered = (React.createElement(React.Fragment, null,\n        hasBadge && children && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length))),\n        hasBadge && !children && customBadgeContent !== undefined && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)))));\n    return (React.createElement(\"li\", Object.assign({ id: id, className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded) }, (internalIsExpanded && { 'aria-expanded': 'true' }), { role: \"treeitem\", tabIndex: -1 }),\n        React.createElement(\"div\", { className: css(styles.treeViewContent) },\n            React.createElement(GenerateId, { prefix: isSelectable ? 'selectable-id' : 'checkbox-id' }, randomId => (React.createElement(Component, Object.assign({ className: css(styles.treeViewNode, children && (isSelectable || hasCheck) && styles.modifiers.selectable, (!children || isSelectable) &&\n                    activeItems &&\n                    activeItems.length > 0 &&\n                    activeItems.some(item => compareItems && item && compareItems(item, itemData))\n                    ? styles.modifiers.current\n                    : ''), onClick: (evt) => {\n                    if (!hasCheck) {\n                        onSelect && onSelect(evt, itemData, parentItem);\n                        if (!isSelectable && children && evt.isDefaultPrevented() !== true) {\n                            setIsExpanded(!internalIsExpanded);\n                        }\n                    }\n                } }, (hasCheck && { htmlFor: randomId }), ((hasCheck || (isSelectable && children)) && { id: `label-${randomId}` })),\n                React.createElement(\"span\", { className: css(styles.treeViewNodeContainer) },\n                    children && renderToggle(randomId),\n                    hasCheck && renderCheck(randomId),\n                    icon && iconRendered,\n                    renderNodeContent(),\n                    badgeRendered)))),\n            action && React.createElement(\"div\", { className: css(styles.treeViewAction) }, action)),\n        internalIsExpanded && children));\n};\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n    if (!nextProps.useMemo) {\n        return false;\n    }\n    const prevIncludes = prevProps.activeItems &&\n        prevProps.activeItems.length > 0 &&\n        prevProps.activeItems.some(item => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));\n    const nextIncludes = nextProps.activeItems &&\n        nextProps.activeItems.length > 0 &&\n        nextProps.activeItems.some(item => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));\n    if (prevIncludes || nextIncludes) {\n        return false;\n    }\n    if (prevProps.name !== nextProps.name ||\n        prevProps.title !== nextProps.title ||\n        prevProps.id !== nextProps.id ||\n        prevProps.isExpanded !== nextProps.isExpanded ||\n        prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n        prevProps.onSelect !== nextProps.onSelect ||\n        prevProps.onCheck !== nextProps.onCheck ||\n        prevProps.hasCheck !== nextProps.hasCheck ||\n        prevProps.checkProps !== nextProps.checkProps ||\n        prevProps.hasBadge !== nextProps.hasBadge ||\n        prevProps.customBadgeContent !== nextProps.customBadgeContent ||\n        prevProps.badgeProps !== nextProps.badgeProps ||\n        prevProps.isCompact !== nextProps.isCompact ||\n        prevProps.icon !== nextProps.icon ||\n        prevProps.expandedIcon !== nextProps.expandedIcon ||\n        prevProps.action !== nextProps.action ||\n        prevProps.parentItem !== nextProps.parentItem ||\n        prevProps.itemData !== nextProps.itemData) {\n        return false;\n    }\n    return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';\n//# sourceMappingURL=TreeViewListItem.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nexport class TreeViewRoot extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.displayName = 'TreeViewRoot';\n        this.treeRef = React.createRef();\n        this.handleKeys = (event) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')).filter(el => !el.classList.contains('pf-m-disabled'));\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            handleArrows(event, treeItems, (element) => activeElement === element, undefined, [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains('pf-c-tree-view__node-toggle');\n                const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _d === void 0 ? void 0 : _d.classList.contains('pf-m-expanded');\n                if (key === 'ArrowLeft') {\n                    if (isExpandable && isExpanded) {\n                        activeElement.click();\n                    }\n                    else {\n                        const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('ul')) === null || _e === void 0 ? void 0 : _e.parentElement;\n                        if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== 'DIV') {\n                            const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector('button');\n                            activeElement.tabIndex = -1;\n                            if (parentButton) {\n                                parentButton.tabIndex = 0;\n                                parentButton.focus();\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (isExpandable && !isExpanded) {\n                        activeElement.tabIndex = -1;\n                        activeElement.click();\n                        const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _f === void 0 ? void 0 : _f.querySelector('ul > li')) === null || _g === void 0 ? void 0 : _g.querySelector('button');\n                        if (childElement) {\n                            childElement.tabIndex = 0;\n                            childElement.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.handleKeysCheckbox = (event) => {\n            var _a, _b, _c, _d, _e;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node'));\n            handleArrows(event, treeNodes, (element) => element.contains(activeElement), (element) => element.querySelector('button,input'), [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                if (key === 'ArrowLeft') {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) &&\n                            activeElement.parentElement.previousSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {\n                        if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === 'SPAN') {\n                            activeElement.previousSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.previousSibling.focus();\n                        }\n                    }\n                }\n                else {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {\n                        if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === 'SPAN') {\n                            activeElement.nextSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.nextSibling.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.variantStyleModifiers = {\n            default: '',\n            compact: styles.modifiers.compact,\n            compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n        };\n    }\n    componentDidMount() {\n        var _a;\n        if (canUseDOM) {\n            window.addEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n        if (this.props.hasChecks || this.props.hasSelectableNodes) {\n            const firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0];\n            if (firstToggle) {\n                firstToggle.tabIndex = 0;\n            }\n            if (this.props.hasChecks) {\n                const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n                if (firstInput) {\n                    firstInput.tabIndex = 0;\n                }\n            }\n            if (this.props.hasSelectableNodes) {\n                const firstTextButton = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-text')[0];\n                if (firstTextButton) {\n                    firstTextButton.tabIndex = 0;\n                }\n            }\n        }\n        else {\n            ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')[0]).tabIndex = 0;\n        }\n    }\n    componentWillUnmount() {\n        if (canUseDOM) {\n            window.removeEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, hasChecks, hasGuides, variant, className, hasSelectableNodes } = _a, props = __rest(_a, [\"children\", \"hasChecks\", \"hasGuides\", \"variant\", \"className\", \"hasSelectableNodes\"]);\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className), ref: this.treeRef }, props), children));\n    }\n}\n//# sourceMappingURL=TreeViewRoot.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport const TreeView = (_a) => {\n    var { data, isNested = false, hasChecks = false, hasBadges = false, hasGuides = false, hasSelectableNodes = false, variant = 'default', defaultAllExpanded = false, allExpanded, icon, expandedIcon, parentItem, onSelect, onCheck, toolbar, activeItems, compareItems = (item, itemToCheck) => item.id === itemToCheck.id, className, useMemo } = _a, props = __rest(_a, [\"data\", \"isNested\", \"hasChecks\", \"hasBadges\", \"hasGuides\", \"hasSelectableNodes\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\"]);\n    const treeViewList = (React.createElement(TreeViewList, { isNested: isNested, toolbar: toolbar }, data.map(item => {\n        var _a, _b;\n        return (React.createElement(TreeViewListItem, Object.assign({ key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()), name: item.name, title: item.title, id: item.id, isExpanded: allExpanded, isSelectable: hasSelectableNodes, defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, hasCheck: item.hasCheck !== undefined ? item.hasCheck : hasChecks, checkProps: item.checkProps, hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges, customBadgeContent: item.customBadgeContent, badgeProps: item.badgeProps, activeItems: activeItems, parentItem: parentItem, itemData: item, icon: item.icon !== undefined ? item.icon : icon, expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon, action: item.action, compareItems: compareItems, isCompact: variant === 'compact' || variant === 'compactNoBackground', useMemo: useMemo }, (item.children && {\n            children: (React.createElement(TreeView, { data: item.children, isNested: true, parentItem: item, hasChecks: hasChecks, hasBadges: hasBadges, hasGuides: hasGuides, hasSelectableNodes: hasSelectableNodes, variant: variant, allExpanded: allExpanded, defaultAllExpanded: defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, activeItems: activeItems, icon: icon, expandedIcon: expandedIcon }))\n        }))));\n    })));\n    return (React.createElement(React.Fragment, null, parentItem ? (treeViewList) : (React.createElement(TreeViewRoot, Object.assign({ hasSelectableNodes: hasSelectableNodes, hasChecks: hasChecks, hasGuides: hasGuides, variant: variant, className: className }, props), treeViewList))));\n};\nTreeView.displayName = 'TreeView';\n//# sourceMappingURL=TreeView.js.map","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\n\ntype GroupsModalProps = {\n  id?: string;\n  rename?: string;\n  handleModalToggle: () => void;\n  refresh: (group?: GroupRepresentation) => void;\n};\n\nexport const GroupsModal = ({\n  id,\n  rename,\n  handleModalToggle,\n  refresh,\n}: GroupsModalProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    defaultValues: { name: rename },\n  });\n\n  const submitForm = async (group: GroupRepresentation) => {\n    group.name = group.name?.trim();\n\n    try {\n      if (!id) {\n        await adminClient.groups.create(group);\n      } else if (rename) {\n        await adminClient.groups.update({ id }, group);\n      } else {\n        await adminClient.groups.setOrCreateChild({ id }, group);\n      }\n\n      refresh(rename ? group : undefined);\n      handleModalToggle();\n      addAlert(\n        t(rename ? \"groupUpdated\" : \"groupCreated\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"groups:couldNotCreateGroup\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(rename ? \"renameAGroup\" : \"createAGroup\")}\n      isOpen={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid={`${rename ? \"rename\" : \"create\"}Group`}\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"group-form\"\n        >\n          {t(rename ? \"rename\" : \"create\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id=\"group-form\" isHorizontal onSubmit={handleSubmit(submitForm)}>\n        <FormGroup\n          name=\"create-modal-group\"\n          label={t(\"common:name\")}\n          fieldId=\"create-group-name\"\n          helperTextInvalid={t(\"common:required\")}\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            data-testid=\"groupNameInput\"\n            autoFocus\n            id=\"create-group-name\"\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            {...register(\"name\", { required: true })}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","export const getId = (pathname: string) => {\n  const pathParts = pathname.substr(1).split(\"/\");\n  return pathParts.length > 1 ? pathParts.splice(2) : undefined;\n};\n\nexport const getLastId = (pathname: string) => {\n  const pathParts = getId(pathname);\n  return pathParts ? pathParts[pathParts.length - 1] : undefined;\n};\n","import { useTranslation } from \"react-i18next\";\nimport { ButtonVariant } from \"@patternfly/react-core\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\n\ntype DeleteConfirmProps = {\n  selectedRows: GroupRepresentation[];\n  show: boolean;\n  toggleDialog: () => void;\n  refresh: () => void;\n};\n\nexport const DeleteGroup = ({\n  selectedRows,\n  show,\n  toggleDialog,\n  refresh,\n}: DeleteConfirmProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const multiDelete = async () => {\n    try {\n      for (const group of selectedRows) {\n        await adminClient.groups.del({\n          id: group.id!,\n        });\n      }\n      refresh();\n      addAlert(t(\"groupDeleted\", { count: selectedRows.length }));\n    } catch (error) {\n      addError(\"groups:groupDeleteError\", error);\n    }\n  };\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"deleteConfirmTitle\", { count: selectedRows.length })}\n      messageKey={t(\"deleteConfirm\", {\n        count: selectedRows.length,\n        groupName: selectedRows[0]?.name,\n      })}\n      continueButtonLabel=\"common:delete\"\n      continueButtonVariant={ButtonVariant.danger}\n      onConfirm={multiDelete}\n      open={show}\n      toggleDialog={toggleDialog}\n    />\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n\nimport { useSubGroups } from \"../SubGroupsContext\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype GroupToolbarProps = {\n  toggleCreate: () => void;\n  toggleDelete: () => void;\n  kebabDisabled: boolean;\n};\n\nexport const GroupToolbar = ({\n  toggleCreate,\n  toggleDelete,\n  kebabDisabled,\n}: GroupToolbarProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { currentGroup } = useSubGroups();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n\n  const [openKebab, toggleKebab] = useToggle();\n\n  if (!isManager) return <div />;\n\n  return (\n    <>\n      <ToolbarItem>\n        <Button\n          data-testid=\"openCreateGroupModal\"\n          variant=\"primary\"\n          onClick={toggleCreate}\n        >\n          {t(\"createGroup\")}\n        </Button>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Dropdown\n          toggle={\n            <KebabToggle onToggle={toggleKebab} isDisabled={kebabDisabled} />\n          }\n          isOpen={openKebab}\n          isPlain\n          dropdownItems={[\n            <DropdownItem\n              key=\"action\"\n              component=\"button\"\n              onClick={() => {\n                toggleDelete();\n                toggleKebab();\n              }}\n            >\n              {t(\"common:delete\")}\n            </DropdownItem>,\n          ]}\n        />\n      </ToolbarItem>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { GroupPickerDialog } from \"../../components/group/GroupPickerDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\n\ntype MoveDialogProps = {\n  source: GroupRepresentation;\n  onClose: () => void;\n  refresh: () => void;\n};\n\nconst moveToRoot = async (\n  adminClient: KeycloakAdminClient,\n  source: GroupRepresentation\n) => {\n  await adminClient.groups.del({ id: source.id! });\n  const { id } = await adminClient.groups.create({\n    ...source,\n    id: undefined,\n  });\n  if (source.subGroups) {\n    await Promise.all(\n      source.subGroups.map((s) =>\n        adminClient.groups.setOrCreateChild(\n          { id: id! },\n          {\n            ...s,\n            id: undefined,\n          }\n        )\n      )\n    );\n  }\n};\n\nconst moveToGroup = async (\n  adminClient: KeycloakAdminClient,\n  source: GroupRepresentation,\n  dest: GroupRepresentation\n) => {\n  try {\n    await adminClient.groups.setOrCreateChild({ id: dest.id! }, source);\n  } catch (error: any) {\n    if (error.response) {\n      throw error;\n    }\n  }\n};\n\nexport const MoveDialog = ({ source, onClose, refresh }: MoveDialogProps) => {\n  const { t } = useTranslation(\"groups\");\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const moveGroup = async (group?: GroupRepresentation[]) => {\n    try {\n      await (group\n        ? moveToGroup(adminClient, source, group[0])\n        : moveToRoot(adminClient, source));\n      refresh();\n      addAlert(t(\"moveGroupSuccess\"));\n    } catch (error) {\n      addError(\"groups:moveGroupError\", error);\n    }\n  };\n\n  return (\n    <GroupPickerDialog\n      type=\"selectOne\"\n      filterGroups={[source]}\n      text={{\n        title: \"groups:moveToGroup\",\n        ok: \"groups:moveHere\",\n      }}\n      onClose={onClose}\n      onConfirm={moveGroup}\n    />\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { SearchInput, ToolbarItem } from \"@patternfly/react-core\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { fetchAdminUI } from \"../context/auth/admin-ui-endpoint\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { GroupsModal } from \"./GroupsModal\";\nimport { getLastId } from \"./groupIdUtils\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { toGroups } from \"./routes/Groups\";\nimport { useAccess } from \"../context/access/Access\";\nimport useToggle from \"../utils/useToggle\";\nimport { DeleteGroup } from \"./components/DeleteGroup\";\nimport { GroupToolbar } from \"./components/GroupToolbar\";\nimport { MoveDialog } from \"./components/MoveDialog\";\n\ntype GroupTableProps = {\n  refresh: () => void;\n  canViewDetails: boolean;\n};\n\nexport const GroupTable = ({\n  refresh: viewRefresh,\n  canViewDetails,\n}: GroupTableProps) => {\n  const { t } = useTranslation(\"groups\");\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const [selectedRows, setSelectedRows] = useState<GroupRepresentation[]>([]);\n\n  const [rename, setRename] = useState<GroupRepresentation>();\n  const [isCreateModalOpen, toggleCreateOpen] = useToggle();\n  const [showDelete, toggleShowDelete] = useToggle();\n  const [move, setMove] = useState<GroupRepresentation>();\n\n  const { currentGroup } = useSubGroups();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [search, setSearch] = useState<string>();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n\n  const loader = async (first?: number, max?: number) => {\n    const params: Record<string, string> = {\n      search: search || \"\",\n      first: first?.toString() || \"\",\n      max: max?.toString() || \"\",\n    };\n\n    let groupsData = undefined;\n    if (id) {\n      const group = await adminClient.groups.findOne({ id });\n      if (!group) {\n        throw new Error(t(\"common:notFound\"));\n      }\n\n      groupsData = !search\n        ? group.subGroups\n        : group.subGroups?.filter((g) => g.name?.includes(search));\n    } else {\n      groupsData = await fetchAdminUI<GroupRepresentation[]>(\n        adminClient,\n        \"ui-ext/groups\",\n        {\n          ...params,\n          global: \"false\",\n        }\n      );\n    }\n\n    if (!groupsData) {\n      navigate(toGroups({ realm }));\n    }\n\n    return groupsData || [];\n  };\n\n  return (\n    <>\n      <DeleteGroup\n        show={showDelete}\n        toggleDialog={toggleShowDelete}\n        selectedRows={selectedRows}\n        refresh={() => {\n          refresh();\n          viewRefresh();\n          setSelectedRows([]);\n        }}\n      />\n      {rename && (\n        <GroupsModal\n          id={rename.id}\n          rename={rename.name}\n          refresh={() => {\n            refresh();\n            viewRefresh();\n          }}\n          handleModalToggle={() => setRename(undefined)}\n        />\n      )}\n      {isCreateModalOpen && (\n        <GroupsModal\n          id={selectedRows[0]?.id || id}\n          handleModalToggle={toggleCreateOpen}\n          refresh={() => {\n            setSelectedRows([]);\n            refresh();\n            viewRefresh();\n          }}\n        />\n      )}\n      {move && (\n        <MoveDialog\n          source={move}\n          refresh={() => {\n            setMove(undefined);\n            refresh();\n            viewRefresh();\n          }}\n          onClose={() => setMove(undefined)}\n        />\n      )}\n      <KeycloakDataTable\n        key={`${id}${key}`}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        canSelectAll\n        loader={loader}\n        ariaLabelKey=\"groups:groups\"\n        isPaginated\n        isSearching={!!search}\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <SearchInput\n                data-testid=\"group-search\"\n                placeholder={t(\"filterGroups\")}\n                value={search}\n                onChange={(_, value) => {\n                  setSearch(value);\n                }}\n                onSearch={refresh}\n                onClear={() => {\n                  setSearch(\"\");\n                  refresh();\n                }}\n              />\n            </ToolbarItem>\n            <GroupToolbar\n              toggleCreate={toggleCreateOpen}\n              toggleDelete={toggleShowDelete}\n              kebabDisabled={selectedRows!.length === 0}\n            />\n          </>\n        }\n        actions={\n          !isManager\n            ? []\n            : [\n                {\n                  title: t(\"rename\"),\n                  onRowClick: async (group) => {\n                    setRename(group);\n                    return false;\n                  },\n                },\n                {\n                  title: t(\"moveTo\"),\n                  onRowClick: async (group) => {\n                    setMove(group);\n                    return false;\n                  },\n                },\n                {\n                  title: t(\"createChildGroup\"),\n                  onRowClick: async (group) => {\n                    setSelectedRows([group]);\n                    toggleCreateOpen();\n                    return false;\n                  },\n                },\n                {\n                  isSeparator: true,\n                },\n                {\n                  title: t(\"common:delete\"),\n                  onRowClick: async (group: GroupRepresentation) => {\n                    setSelectedRows([group]);\n                    toggleShowDelete();\n                    return true;\n                  },\n                },\n              ]\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"groups:groupName\",\n            cellRenderer: (group) =>\n              canViewDetails ? (\n                <Link\n                  key={group.id}\n                  to={`${location.pathname}/${group.id}`}\n                  onClick={() => navigate(toGroups({ realm, id: group.id }))}\n                >\n                  {group.name}\n                </Link>\n              ) : (\n                <span>{group.name}</span>\n              ),\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            message={t(`noGroupsInThis${id ? \"SubGroup\" : \"Realm\"}`)}\n            instructions={t(\n              `noGroupsInThis${id ? \"SubGroup\" : \"Realm\"}Instructions`\n            )}\n            primaryActionText={t(\"createGroup\")}\n            onPrimaryAction={toggleCreateOpen}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Button,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { emptyFormatter } from \"../util\";\nimport { differenceBy } from \"lodash-es\";\n\ntype MemberModalProps = {\n  groupId: string;\n  onClose: () => void;\n};\n\nexport const MemberModal = ({ groupId, onClose }: MemberModalProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const members = await adminClient.groups.listMembers({ id: groupId });\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max! + members.length,\n      search: search || \"\",\n    };\n\n    try {\n      const users = await adminClient.users.find({ ...params });\n      return differenceBy(users, members, \"id\").slice(0, max);\n    } catch (error) {\n      addError(\"groups:noUsersFoundError\", error);\n      return [];\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title={t(\"addMember\")}\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"add\"\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={async () => {\n            try {\n              await Promise.all(\n                selectedRows.map((user) =>\n                  adminClient.users.addToGroup({ id: user.id!, groupId })\n                )\n              );\n              onClose();\n              addAlert(\n                t(\"usersAdded\", { count: selectedRows.length }),\n                AlertVariant.success\n              );\n            } catch (error) {\n              addError(\"groups:usersAddedError\", error);\n            }\n          }}\n        >\n          {t(\"common:add\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"users:title\"\n        searchPlaceholderKey=\"users:searchForUser\"\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        emptyState={\n          <ListEmptyState\n            message={t(\"users:noUsersFound\")}\n            instructions={t(\"users:emptyInstructions\")}\n          />\n        }\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"users:username\",\n          },\n          {\n            name: \"email\",\n            displayKey: \"users:email\",\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"users:lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"users:firstName\",\n            cellFormatters: [emptyFormatter()],\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { uniqBy } from \"lodash-es\";\nimport {\n  AlertVariant,\n  Button,\n  Checkbox,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { emptyFormatter } from \"../util\";\n\nimport { getLastId } from \"./groupIdUtils\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { MemberModal } from \"./MembersModal\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { GroupPath } from \"../components/group/GroupPath\";\nimport { toUser } from \"../user/routes/User\";\nimport { useAccess } from \"../context/access/Access\";\n\ntype MembersOf = UserRepresentation & {\n  membership: GroupRepresentation[];\n};\n\nconst MemberOfRenderer = (member: MembersOf) => {\n  return (\n    <>\n      {member.membership.map((group, index) => (\n        <>\n          <GroupPath key={group.id} group={group} />\n          {member.membership[index + 1] ? \", \" : \"\"}\n        </>\n      ))}\n    </>\n  );\n};\n\nconst UserDetailLink = (user: MembersOf) => {\n  const { realm } = useRealm();\n  return (\n    <Link key={user.id} to={toUser({ realm, id: user.id!, tab: \"settings\" })}>\n      {user.username}\n    </Link>\n  );\n};\n\nexport const Members = () => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n\n  const { addAlert, addError } = useAlerts();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n  const [includeSubGroup, setIncludeSubGroup] = useState(false);\n  const { currentGroup } = useSubGroups();\n  const [addMembers, setAddMembers] = useState(false);\n  const [isKebabOpen, setIsKebabOpen] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n  const { hasAccess } = useAccess();\n\n  const isManager =\n    hasAccess(\"manage-users\") || currentGroup()!.access!.manageMembership;\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const getMembership = async (id: string) =>\n    await adminClient.users.listGroups({ id: id! });\n\n  const getSubGroups = (groups: GroupRepresentation[]) => {\n    let subGroups: GroupRepresentation[] = [];\n    for (const group of groups!) {\n      subGroups.push(group);\n      const subs = getSubGroups(group.subGroups!);\n      subGroups = subGroups.concat(subs);\n    }\n    return subGroups;\n  };\n\n  const loader = async (first?: number, max?: number) => {\n    let members = await adminClient.groups.listMembers({\n      id: id!,\n      first,\n      max,\n    });\n\n    if (includeSubGroup) {\n      const subGroups = getSubGroups(currentGroup()?.subGroups!);\n      for (const group of subGroups) {\n        members = members.concat(\n          await adminClient.groups.listMembers({ id: group.id! })\n        );\n      }\n      members = uniqBy(members, (member) => member.username);\n    }\n\n    const memberOfPromises = await Promise.all(\n      members.map((member) => getMembership(member.id!))\n    );\n    return members.map((member: UserRepresentation, i) => {\n      return { ...member, membership: memberOfPromises[i] };\n    });\n  };\n\n  return (\n    <>\n      {addMembers && (\n        <MemberModal\n          groupId={id!}\n          onClose={() => {\n            setAddMembers(false);\n            refresh();\n          }}\n        />\n      )}\n      <KeycloakDataTable\n        data-testid=\"members-table\"\n        key={`${id}${key}${includeSubGroup}`}\n        loader={loader}\n        ariaLabelKey=\"groups:members\"\n        isPaginated\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        toolbarItem={\n          isManager && (\n            <>\n              <ToolbarItem>\n                <Button\n                  data-testid=\"addMember\"\n                  variant=\"primary\"\n                  onClick={() => setAddMembers(true)}\n                >\n                  {t(\"addMember\")}\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem>\n                <Checkbox\n                  data-testid=\"includeSubGroupsCheck\"\n                  label={t(\"includeSubGroups\")}\n                  id=\"kc-include-sub-groups\"\n                  isChecked={includeSubGroup}\n                  onChange={() => setIncludeSubGroup(!includeSubGroup)}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  toggle={\n                    <KebabToggle\n                      onToggle={() => setIsKebabOpen(!isKebabOpen)}\n                      isDisabled={selectedRows.length === 0}\n                    />\n                  }\n                  isOpen={isKebabOpen}\n                  isPlain\n                  dropdownItems={[\n                    <DropdownItem\n                      key=\"action\"\n                      component=\"button\"\n                      onClick={async () => {\n                        try {\n                          await Promise.all(\n                            selectedRows.map((user) =>\n                              adminClient.users.delFromGroup({\n                                id: user.id!,\n                                groupId: id!,\n                              })\n                            )\n                          );\n                          setIsKebabOpen(false);\n                          addAlert(\n                            t(\"usersLeft\", { count: selectedRows.length }),\n                            AlertVariant.success\n                          );\n                        } catch (error) {\n                          addError(\"groups:usersLeftError\", error);\n                        }\n\n                        refresh();\n                      }}\n                    >\n                      {t(\"leave\")}\n                    </DropdownItem>,\n                  ]}\n                />\n              </ToolbarItem>\n            </>\n          )\n        }\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"leave\"),\n                  onRowClick: async (user) => {\n                    try {\n                      await adminClient.users.delFromGroup({\n                        id: user.id!,\n                        groupId: id!,\n                      });\n                      addAlert(\n                        t(\"usersLeft\", { count: 1 }),\n                        AlertVariant.success\n                      );\n                    } catch (error) {\n                      addError(\"groups:usersLeftError\", error);\n                    }\n\n                    return true;\n                  },\n                } as Action<UserRepresentation>,\n              ]\n            : []\n        }\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"common:name\",\n            cellRenderer: UserDetailLink,\n          },\n          {\n            name: \"email\",\n            displayKey: \"groups:email\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"groups:firstName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"groups:lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"membership\",\n            displayKey: \"groups:membership\",\n            cellRenderer: MemberOfRenderer,\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"users:noUsersFound\")}\n            instructions={isManager ? t(\"users:emptyInstructions\") : undefined}\n            primaryActionText={isManager ? t(\"addMember\") : undefined}\n            onPrimaryAction={() => setAddMembers(true)}\n            secondaryActions={[\n              {\n                text: t(\"includeSubGroups\"),\n                onClick: () => setIncludeSubGroup(true),\n              },\n            ]}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport {\n  keyValueToArray,\n  arrayToKeyValue,\n} from \"../components/key-value-form/key-value-convert\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\n\nimport { getLastId } from \"./groupIdUtils\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { useLocation } from \"react-router-dom\";\n\nexport const GroupAttributes = () => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const form = useForm<AttributeForm>({\n    mode: \"onChange\",\n  });\n\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n  const { currentGroup, subGroups, setSubGroups } = useSubGroups();\n\n  const convertAttributes = (attr?: Record<string, any>) => {\n    return arrayToKeyValue(attr || currentGroup()?.attributes!);\n  };\n\n  useEffect(() => {\n    form.setValue(\"attributes\", convertAttributes());\n  }, [subGroups]);\n\n  const save = async (attributeForm: AttributeForm) => {\n    try {\n      const group = currentGroup();\n      const attributes = keyValueToArray(attributeForm.attributes!);\n      await adminClient.groups.update({ id: id! }, { ...group, attributes });\n\n      setSubGroups([\n        ...subGroups.slice(0, subGroups.length - 1),\n        { ...group, attributes },\n      ]);\n      addAlert(t(\"groupUpdated\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"groups:groupUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <AttributesForm\n        form={form}\n        save={save}\n        fineGrainedAccess={currentGroup()?.access?.manage}\n        reset={() =>\n          form.reset({\n            attributes: convertAttributes(),\n          })\n        }\n      />\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { AlertVariant } from \"@patternfly/react-core\";\n\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { RoleMapping, Row } from \"../components/role-mapping/RoleMapping\";\n\ntype GroupRoleMappingProps = {\n  id: string;\n  name: string;\n};\n\nexport const GroupRoleMapping = ({ id, name }: GroupRoleMappingProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.groups.addRealmRoleMappings({\n        id,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.groups.addClientRoleMappings({\n              id,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            })\n          )\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:roleMappingUpdatedError\", error);\n    }\n  };\n\n  return <RoleMapping name={name} id={id} type=\"groups\" save={assignRoles} />;\n};\n","import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Checkbox,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownSeparator,\n  InputGroup,\n  KebabToggle,\n  Tooltip,\n  TreeView,\n  TreeViewDataItem,\n} from \"@patternfly/react-core\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport useToggle from \"../../utils/useToggle\";\nimport { DeleteGroup } from \"./DeleteGroup\";\nimport { GroupsModal } from \"../GroupsModal\";\nimport { MoveDialog } from \"./MoveDialog\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useSubGroups } from \"../SubGroupsContext\";\nimport { fetchAdminUI } from \"../../context/auth/admin-ui-endpoint\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { joinPath } from \"../../utils/joinPath\";\nimport { toGroups } from \"../routes/Groups\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useAccess } from \"../../context/access/Access\";\n\nimport \"./group-tree.css\";\n\ntype GroupTreeContextMenuProps = {\n  group: GroupRepresentation;\n  refresh: () => void;\n};\n\nconst GroupTreeContextMenu = ({\n  group,\n  refresh,\n}: GroupTreeContextMenuProps) => {\n  const { t } = useTranslation(\"groups\");\n\n  const [isOpen, toggleOpen] = useToggle();\n  const [renameOpen, toggleRenameOpen] = useToggle();\n  const [createOpen, toggleCreateOpen] = useToggle();\n  const [moveOpen, toggleMoveOpen] = useToggle();\n  const [deleteOpen, toggleDeleteOpen] = useToggle();\n\n  return (\n    <>\n      {renameOpen && (\n        <GroupsModal\n          id={group.id}\n          rename={group.name}\n          refresh={() => {\n            refresh();\n          }}\n          handleModalToggle={toggleRenameOpen}\n        />\n      )}\n      {createOpen && (\n        <GroupsModal\n          id={group.id}\n          handleModalToggle={toggleCreateOpen}\n          refresh={refresh}\n        />\n      )}\n      {moveOpen && (\n        <MoveDialog source={group} refresh={refresh} onClose={toggleMoveOpen} />\n      )}\n      <DeleteGroup\n        show={deleteOpen}\n        toggleDialog={toggleDeleteOpen}\n        selectedRows={[group]}\n        refresh={refresh}\n      />\n      <Dropdown\n        toggle={<KebabToggle onToggle={toggleOpen} />}\n        isOpen={isOpen}\n        isPlain\n        position={DropdownPosition.right}\n        dropdownItems={[\n          <DropdownItem key=\"rename\" onClick={toggleRenameOpen}>\n            {t(\"rename\")}\n          </DropdownItem>,\n          <DropdownItem key=\"move\" onClick={toggleMoveOpen}>\n            {t(\"moveTo\")}\n          </DropdownItem>,\n          <DropdownItem key=\"create\" onClick={toggleCreateOpen}>\n            {t(\"createChildGroup\")}\n          </DropdownItem>,\n          <DropdownSeparator key=\"separator\" />,\n          <DropdownItem key=\"delete\" onClick={toggleDeleteOpen}>\n            {t(\"common:delete\")}\n          </DropdownItem>,\n        ]}\n      />\n    </>\n  );\n};\n\ntype GroupTreeProps = {\n  refresh: () => void;\n  canViewDetails: boolean;\n};\n\nexport const GroupTree = ({\n  refresh: viewRefresh,\n  canViewDetails,\n}: GroupTreeProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  const { addAlert } = useAlerts();\n  const { hasAccess } = useAccess();\n\n  const [data, setData] = useState<TreeViewDataItem[]>();\n  const [groups, setGroups] = useState<GroupRepresentation[]>([]);\n  const { subGroups, setSubGroups } = useSubGroups();\n\n  const [search, setSearch] = useState(\"\");\n  const [max, setMax] = useState(20);\n  const [first, setFirst] = useState(0);\n  const [exact, setExact] = useState(false);\n  const [activeItem, setActiveItem] = useState<TreeViewDataItem>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setKey(key + 1);\n    viewRefresh();\n  };\n\n  const mapGroup = (\n    group: GroupRepresentation,\n    parents: GroupRepresentation[],\n    refresh: () => void\n  ): TreeViewDataItem => {\n    const groups = [...parents, group];\n    return {\n      id: joinPath(...groups.map((g) => g.id!)),\n      name: (\n        <Tooltip content={group.name}>\n          <span>{group.name}</span>\n        </Tooltip>\n      ),\n      children:\n        group.subGroups && group.subGroups.length > 0\n          ? group.subGroups.map((g) => mapGroup(g, groups, refresh))\n          : undefined,\n      action: (hasAccess(\"manage-users\") || group.access?.manage) && (\n        <GroupTreeContextMenu group={group} refresh={refresh} />\n      ),\n      defaultExpanded: subGroups.map((g) => g.id).includes(group.id),\n    };\n  };\n\n  useFetch(\n    () =>\n      fetchAdminUI<GroupRepresentation[]>(\n        adminClient,\n        \"ui-ext/groups\",\n        Object.assign(\n          {\n            first: `${first}`,\n            max: `${max + 1}`,\n            exact: `${exact}`,\n          },\n          search === \"\" ? null : { search }\n        )\n      ),\n    (groups) => {\n      setGroups(groups);\n      setData(groups.map((g) => mapGroup(g, [], refresh)));\n    },\n    [key, first, max, search, exact]\n  );\n\n  const findGroup = (\n    groups: GroupRepresentation[],\n    id: string,\n    path: GroupRepresentation[],\n    found: GroupRepresentation[]\n  ) => {\n    return groups.map((group) => {\n      if (found.length > 0) return;\n\n      if (group.subGroups && group.subGroups.length > 0)\n        findGroup(group.subGroups, id, [...path, group], found);\n\n      if (group.id === id) {\n        found.push(...path, group);\n      }\n    });\n  };\n\n  return data ? (\n    <PaginatingTableToolbar\n      count={data.length || 0}\n      first={first}\n      max={max}\n      onNextClick={setFirst}\n      onPreviousClick={setFirst}\n      onPerPageSelect={(first, max) => {\n        setFirst(first);\n        setMax(max);\n      }}\n      inputGroupName=\"searchForGroups\"\n      inputGroupPlaceholder={t(\"groups:searchForGroups\")}\n      inputGroupOnEnter={setSearch}\n      toolbarItem={\n        <InputGroup className=\"pf-u-pt-sm\">\n          <Checkbox\n            id=\"exact\"\n            data-testid=\"exact-search\"\n            name=\"exact\"\n            isChecked={exact}\n            onChange={(value) => setExact(value)}\n          />\n          <label htmlFor=\"exact\" className=\"pf-u-pl-sm\">\n            {t(\"exactSearch\")}\n          </label>\n        </InputGroup>\n      }\n    >\n      {data.length > 0 && (\n        <TreeView\n          data={data}\n          allExpanded={search.length > 0}\n          activeItems={activeItem ? [activeItem] : undefined}\n          hasGuides\n          hasSelectableNodes\n          className=\"keycloak_groups_treeview\"\n          onSelect={(_, item) => {\n            setActiveItem(item);\n            const id = item.id?.substring(item.id.lastIndexOf(\"/\") + 1);\n            const subGroups: GroupRepresentation[] = [];\n            findGroup(groups, id!, [], subGroups);\n            setSubGroups(subGroups);\n\n            if (canViewDetails || subGroups.at(-1)?.access?.view) {\n              navigate(toGroups({ realm, id: item.id }));\n            } else {\n              addAlert(t(\"noViewRights\"), AlertVariant.warning);\n              navigate(toGroups({ realm }));\n            }\n          }}\n        />\n      )}\n    </PaginatingTableToolbar>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import { useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Breadcrumb, BreadcrumbItem } from \"@patternfly/react-core\";\n\nimport { useSubGroups } from \"../../groups/SubGroupsContext\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport const GroupBreadCrumbs = () => {\n  const { t } = useTranslation();\n  const { clear, remove, subGroups } = useSubGroups();\n  const { realm } = useRealm();\n  const location = useLocation();\n\n  useEffect(() => {\n    const { pathname } = location;\n\n    if (!pathname.includes(\"/groups\") || pathname.endsWith(\"/groups\")) {\n      clear();\n    }\n  }, [location]);\n\n  return subGroups.length !== 0 ? (\n    <Breadcrumb>\n      <BreadcrumbItem key=\"home\">\n        <Link to={`/${realm}/groups`}>{t(\"groups\")}</Link>\n      </BreadcrumbItem>\n      {subGroups.map((group, i) => {\n        const isLastGroup = i === subGroups.length - 1;\n        return (\n          <BreadcrumbItem key={group.id} isActive={isLastGroup}>\n            {!isLastGroup && (\n              <Link\n                to={location.pathname.substring(\n                  0,\n                  location.pathname.indexOf(group.id!) + group.id!.length\n                )}\n                onClick={() => remove(group)}\n              >\n                {group.name}\n              </Link>\n            )}\n            {isLastGroup &&\n              (group.id === \"search\" ? group.name : t(\"groups:groupDetails\"))}\n          </BreadcrumbItem>\n        );\n      })}\n    </Breadcrumb>\n  ) : null;\n};\n","import { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  DropdownItem,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  TabTitleText,\n  Tabs,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerPanelContent,\n  DrawerHead,\n} from \"@patternfly/react-core\";\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\n\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useFetch, useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { GroupTable } from \"./GroupTable\";\nimport { getId, getLastId } from \"./groupIdUtils\";\nimport { Members } from \"./Members\";\nimport { GroupAttributes } from \"./GroupAttributes\";\nimport { GroupsModal } from \"./GroupsModal\";\nimport { toGroups } from \"./routes/Groups\";\nimport { GroupRoleMapping } from \"./GroupRoleMapping\";\nimport helpUrls from \"../help-urls\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { GroupTree } from \"./components/GroupTree\";\nimport { DeleteGroup } from \"./components/DeleteGroup\";\nimport useToggle from \"../utils/useToggle\";\nimport { GroupBreadCrumbs } from \"../components/bread-crumb/GroupBreadCrumbs\";\n\nimport \"./GroupsSection.css\";\n\nexport default function GroupsSection() {\n  const { t } = useTranslation(\"groups\");\n  const [activeTab, setActiveTab] = useState(0);\n\n  const { profileInfo } = useServerInfo();\n\n  const { adminClient } = useAdminClient();\n  const { subGroups, setSubGroups, currentGroup } = useSubGroups();\n  const { realm } = useRealm();\n\n  const [rename, setRename] = useState<string>();\n  const [deleteOpen, toggleDeleteOpen] = useToggle();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const { hasAccess } = useAccess();\n  const canViewPermissions =\n    !profileInfo?.disabledFeatures?.includes(\"ADMIN_FINE_GRAINED_AUTHZ\") &&\n    hasAccess(\"manage-authorization\", \"manage-users\", \"manage-clients\");\n  const canManageGroup =\n    hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n  const canManageRoles = hasAccess(\"manage-users\");\n  const canViewDetails =\n    hasAccess(\"query-groups\", \"view-users\") ||\n    hasAccess(\"manage-users\", \"query-groups\");\n  const canViewMembers =\n    hasAccess(\"view-users\") ||\n    currentGroup()?.access?.viewMembers ||\n    currentGroup()?.access?.manageMembers;\n\n  useFetch(\n    async () => {\n      const ids = getId(location.pathname);\n      const isNavigationStateInValid = ids && ids.length > subGroups.length;\n\n      if (isNavigationStateInValid) {\n        const groups: GroupRepresentation[] = [];\n        for (const i of ids!) {\n          const group =\n            i !== \"search\"\n              ? await adminClient.groups.findOne({ id: i })\n              : { name: t(\"searchGroups\"), id: \"search\" };\n          if (group) {\n            groups.push(group);\n          } else {\n            throw new Error(t(\"common:notFound\"));\n          }\n        }\n        return groups;\n      }\n      return [];\n    },\n    (groups: GroupRepresentation[]) => {\n      if (groups.length) setSubGroups(groups);\n    },\n    [id]\n  );\n\n  return (\n    <>\n      <DeleteGroup\n        show={deleteOpen}\n        toggleDialog={toggleDeleteOpen}\n        selectedRows={[currentGroup()!]}\n        refresh={() => {\n          navigate(toGroups({ realm }));\n          refresh();\n        }}\n      />\n      {rename && (\n        <GroupsModal\n          id={id}\n          rename={rename}\n          refresh={(group) => {\n            refresh();\n            setSubGroups([...subGroups.slice(0, subGroups.length - 1), group!]);\n          }}\n          handleModalToggle={() => setRename(undefined)}\n        />\n      )}\n      <PageSection variant={PageSectionVariants.light} className=\"pf-u-p-0\">\n        <Drawer isInline isExpanded key={key}>\n          <DrawerContent\n            panelContent={\n              <DrawerPanelContent isResizable defaultSize=\"80%\" minSize=\"500px\">\n                <DrawerHead>\n                  <GroupBreadCrumbs />\n                  <ViewHeader\n                    titleKey={!id ? \"groups:groups\" : currentGroup()?.name!}\n                    subKey={!id ? \"groups:groupsDescription\" : \"\"}\n                    helpUrl={!id ? helpUrls.groupsUrl : \"\"}\n                    divider={!id}\n                    dropdownItems={\n                      id && canManageGroup\n                        ? [\n                            <DropdownItem\n                              data-testid=\"renameGroupAction\"\n                              key=\"renameGroup\"\n                              onClick={() => setRename(currentGroup()?.name)}\n                            >\n                              {t(\"renameGroup\")}\n                            </DropdownItem>,\n                            <DropdownItem\n                              data-testid=\"deleteGroup\"\n                              key=\"deleteGroup\"\n                              onClick={toggleDeleteOpen}\n                            >\n                              {t(\"deleteGroup\")}\n                            </DropdownItem>,\n                          ]\n                        : undefined\n                    }\n                  />\n                  {subGroups.length > 0 && (\n                    <Tabs\n                      inset={{\n                        default: \"insetNone\",\n                        md: \"insetSm\",\n                        xl: \"insetLg\",\n                        \"2xl\": \"inset2xl\",\n                      }}\n                      activeKey={activeTab}\n                      onSelect={(_, key) => setActiveTab(key as number)}\n                      isBox\n                      mountOnEnter\n                      unmountOnExit\n                    >\n                      <Tab\n                        data-testid=\"groups\"\n                        eventKey={0}\n                        title={<TabTitleText>{t(\"childGroups\")}</TabTitleText>}\n                      >\n                        <GroupTable\n                          refresh={refresh}\n                          canViewDetails={canViewDetails}\n                        />\n                      </Tab>\n                      {canViewMembers && (\n                        <Tab\n                          data-testid=\"members\"\n                          eventKey={1}\n                          title={<TabTitleText>{t(\"members\")}</TabTitleText>}\n                        >\n                          <Members />\n                        </Tab>\n                      )}\n                      <Tab\n                        data-testid=\"attributes\"\n                        eventKey={2}\n                        title={\n                          <TabTitleText>{t(\"common:attributes\")}</TabTitleText>\n                        }\n                      >\n                        <GroupAttributes />\n                      </Tab>\n                      {canManageRoles && (\n                        <Tab\n                          eventKey={3}\n                          data-testid=\"role-mapping-tab\"\n                          title={\n                            <TabTitleText>{t(\"roleMapping\")}</TabTitleText>\n                          }\n                        >\n                          <GroupRoleMapping\n                            id={id!}\n                            name={currentGroup()?.name!}\n                          />\n                        </Tab>\n                      )}\n                      {canViewPermissions && (\n                        <Tab\n                          eventKey={4}\n                          data-testid=\"permissionsTab\"\n                          title={\n                            <TabTitleText>\n                              {t(\"common:permissions\")}\n                            </TabTitleText>\n                          }\n                        >\n                          <PermissionsTab id={id} type=\"groups\" />\n                        </Tab>\n                      )}\n                    </Tabs>\n                  )}\n                  {subGroups.length === 0 && (\n                    <GroupTable\n                      refresh={refresh}\n                      canViewDetails={canViewDetails}\n                    />\n                  )}\n                </DrawerHead>\n              </DrawerPanelContent>\n            }\n          >\n            <DrawerContentBody>\n              <GroupTree refresh={refresh} canViewDetails={canViewDetails} />\n            </DrawerContentBody>\n          </DrawerContent>\n        </Drawer>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["DrawerPanelBody","_a","className","children","hasNoPadding","props","__rest","React.createElement","css","styles","DrawerHead","TreeViewList","isNested","toolbar","React.Fragment","Divider","TreeViewListItemBase","name","title","id","isExpanded","defaultExpanded","onSelect","onCheck","hasCheck","checkProps","hasBadge","customBadgeContent","badgeProps","isSelectable","isCompact","activeItems","itemData","parentItem","icon","expandedIcon","action","compareItems","useMemo","internalIsExpanded","setIsExpanded","useState","useEffect","Component","ToggleComponent","renderToggle","randomId","React","evt","AngleRightIcon","renderCheck","elem","iconRendered","renderNodeContent","content","badgeRendered","Badge","GenerateId","item","TreeViewListItem","prevProps","nextProps","prevIncludes","nextIncludes","TreeViewRoot","React.Component","React.createRef","event","_b","_c","_d","_e","_f","_g","activeElement","key","treeItems","el","KeyTypes","handleArrows","element","isExpandable","parentList","parentButton","childElement","treeNodes","canUseDOM","firstToggle","firstInput","firstTextButton","hasChecks","hasGuides","variant","hasSelectableNodes","TreeView","data","hasBadges","defaultAllExpanded","allExpanded","itemToCheck","treeViewList","GroupsModal","rename","handleModalToggle","refresh","t","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","register","handleSubmit","errors","useForm","submitForm","group","AlertVariant","error","jsx","Modal","ModalVariant","Button","ButtonVariant","Form","FormGroup","ValidatedOptions","KeycloakTextInput","getId","pathname","pathParts","getLastId","DeleteGroup","selectedRows","show","toggleDialog","multiDelete","ConfirmDialogModal","GroupToolbar","toggleCreate","toggleDelete","kebabDisabled","currentGroup","useSubGroups","hasAccess","useAccess","isManager","openKebab","toggleKebab","useToggle","jsxs","Fragment","ToolbarItem","Dropdown","KebabToggle","DropdownItem","moveToRoot","source","s","moveToGroup","dest","MoveDialog","onClose","moveGroup","GroupPickerDialog","GroupTable","viewRefresh","canViewDetails","realm","useRealm","setSelectedRows","setRename","isCreateModalOpen","toggleCreateOpen","showDelete","toggleShowDelete","move","setMove","setKey","search","setSearch","navigate","useNavigate","location","useLocation","loader","first","max","params","groupsData","g","fetchAdminUI","toGroups","KeycloakDataTable","rows","SearchInput","_","value","Link","ListEmptyState","MemberModal","groupId","members","users","differenceBy","user","emptyFormatter","MemberOfRenderer","member","index","GroupPath","UserDetailLink","toUser","Members","includeSubGroup","setIncludeSubGroup","addMembers","setAddMembers","isKebabOpen","setIsKebabOpen","getMembership","getSubGroups","groups","subGroups","subs","uniqBy","memberOfPromises","i","Checkbox","GroupAttributes","form","setSubGroups","convertAttributes","attr","arrayToKeyValue","save","attributeForm","attributes","keyValueToArray","PageSection","PageSectionVariants","AttributesForm","GroupRoleMapping","assignRoles","realmRoles","row","RoleMapping","GroupTreeContextMenu","isOpen","toggleOpen","renameOpen","toggleRenameOpen","createOpen","moveOpen","toggleMoveOpen","deleteOpen","toggleDeleteOpen","DropdownPosition","DropdownSeparator","GroupTree","setData","setGroups","setMax","setFirst","exact","setExact","activeItem","setActiveItem","mapGroup","parents","joinPath","Tooltip","useFetch","findGroup","path","found","PaginatingTableToolbar","InputGroup","KeycloakSpinner","GroupBreadCrumbs","clear","remove","Breadcrumb","BreadcrumbItem","isLastGroup","GroupsSection","activeTab","setActiveTab","profileInfo","useServerInfo","canViewPermissions","canManageGroup","canManageRoles","canViewMembers","ids","Drawer","DrawerContent","DrawerPanelContent","ViewHeader","helpUrls","Tabs","Tab","TabTitleText","PermissionsTab","DrawerContentBody"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}