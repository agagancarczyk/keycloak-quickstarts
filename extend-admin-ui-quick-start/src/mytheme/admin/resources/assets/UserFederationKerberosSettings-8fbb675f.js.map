{"version":3,"file":"UserFederationKerberosSettings-8fbb675f.js","sources":["../../src/user-federation/kerberos/KerberosSettingsRequired.tsx","../../src/user-federation/UserFederationKerberosSettings.tsx"],"sourcesContent":["// @ts-nocheck\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport type KerberosSettingsRequiredProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const KerberosSettingsRequired = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: KerberosSettingsRequiredProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const [isEditModeDropdownOpen, setIsEditModeDropdownOpen] = useState(false);\n\n  const allowPassAuth = useWatch({\n    control: form.control,\n    name: \"config.allowPasswordAuthentication\",\n  });\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm }),\n    (result) => form.setValue(\"parentId\", result!.id),\n    []\n  );\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"requiredSettings\")}\n          description={helpText(\"kerberosRequiredSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      {/* Required settings */}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"uiDisplayName\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:uiDisplayNameHelp\")}\n              fieldLabelId=\"user-federation:uiDisplayName\"\n            />\n          }\n          fieldId=\"kc-ui-display-name\"\n          isRequired\n          validated={form.formState.errors.name ? \"error\" : \"default\"}\n          helperTextInvalid={form.formState.errors.name?.message}\n        >\n          {/* These hidden fields are required so data object written back matches data retrieved */}\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-providerId\"\n            defaultValue=\"kerberos\"\n            {...form.register(\"providerId\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-providerType\"\n            defaultValue=\"org.keycloak.storage.UserStorageProvider\"\n            {...form.register(\"providerType\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-parentId\"\n            defaultValue={realm}\n            {...form.register(\"parentId\")}\n          />\n\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-ui-name\"\n            data-testid=\"kerberos-name\"\n            validated={form.formState.errors.name ? \"error\" : \"default\"}\n            aria-label={t(\"uiDisplayName\")}\n            {...form.register(\"name\", {\n              required: {\n                value: true,\n                message: t(\"validateName\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"kerberosRealm\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:kerberosRealmHelp\")}\n              fieldLabelId=\"user-federation:kc-kerberos-realm\"\n            />\n          }\n          fieldId=\"kc-kerberos-realm\"\n          isRequired\n          validated={\n            form.formState.errors.config?.kerberosRealm?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.kerberosRealm?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-kerberos-realm\"\n            data-testid=\"kerberos-realm\"\n            validated={\n              form.formState.errors.config?.kerberosRealm?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.kerberosRealm.0\", {\n              required: {\n                value: true,\n                message: t(\"validateRealm\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"serverPrincipal\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:serverPrincipalHelp\")}\n              fieldLabelId=\"user-federation:serverPrincipal\"\n            />\n          }\n          fieldId=\"kc-server-principal\"\n          isRequired\n          validated={\n            form.formState.errors.config?.serverPrincipal?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.serverPrincipal?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-server-principal\"\n            data-testid=\"kerberos-principal\"\n            validated={\n              form.formState.errors.config?.serverPrincipal?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.serverPrincipal.0\", {\n              required: {\n                value: true,\n                message: t(\"validateServerPrincipal\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"keyTab\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:keyTabHelp\")}\n              fieldLabelId=\"user-federation:keyTab\"\n            />\n          }\n          fieldId=\"kc-key-tab\"\n          isRequired\n          validated={\n            form.formState.errors.config?.keyTab?.[0] ? \"error\" : \"default\"\n          }\n          helperTextInvalid={form.formState.errors.config?.keyTab?.[0].message}\n        >\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-key-tab\"\n            data-testid=\"kerberos-keytab\"\n            validated={\n              form.formState.errors.config?.keyTab?.[0] ? \"error\" : \"default\"\n            }\n            {...form.register(\"config.keyTab.0\", {\n              required: {\n                value: true,\n                message: t(\"validateKeyTab\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"debug\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:debugHelp\")}\n              fieldLabelId=\"user-federation:debug\"\n            />\n          }\n          fieldId=\"kc-debug\"\n          hasNoPaddingTop\n        >\n          {\" \"}\n          <Controller\n            name=\"config.debug\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-debug\"}\n                data-testid=\"debug\"\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value?.[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"debug\")}\n              />\n            )}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"allowPasswordAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\n                \"user-federation-help:allowPasswordAuthenticationHelp\"\n              )}\n              fieldLabelId=\"user-federation:allowPasswordAuthentication\"\n            />\n          }\n          fieldId=\"kc-allow-password-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.allowPasswordAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-allow-password-authentication\"}\n                data-testid=\"allow-password-authentication\"\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value?.[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"allowPasswordAuthentication\")}\n              />\n            )}\n          />\n        </FormGroup>\n\n        {isEqual(allowPassAuth, [\"true\"]) ? (\n          <FormGroup\n            label={t(\"editMode\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"user-federation-help:editModeKerberosHelp\")}\n                fieldLabelId=\"user-federation:editMode\"\n              />\n            }\n            isRequired\n            fieldId=\"kc-edit-mode\"\n          >\n            {\" \"}\n            <Controller\n              name=\"config.editMode[0]\"\n              defaultValue=\"READ_ONLY\"\n              control={form.control}\n              rules={{ required: true }}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-edit-mode\"\n                  required\n                  onToggle={() =>\n                    setIsEditModeDropdownOpen(!isEditModeDropdownOpen)\n                  }\n                  isOpen={isEditModeDropdownOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value as string);\n                    setIsEditModeDropdownOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                >\n                  <SelectOption key={0} value=\"READ_ONLY\" isPlaceholder />\n                  <SelectOption key={1} value=\"UNSYNCED\" />\n                </Select>\n              )}\n            ></Controller>\n          </FormGroup>\n        ) : null}\n\n        <FormGroup\n          label={t(\"updateFirstLogin\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:updateFirstLoginHelp\")}\n              fieldLabelId=\"user-federation:updateFirstLogin\"\n            />\n          }\n          fieldId=\"kc-update-first-login\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.updateProfileFirstLogin\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-update-first-login\"}\n                data-testid=\"update-first-login\"\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value?.[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"updateFirstLogin\")}\n              />\n            )}\n          />\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Form,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useParams } from \"../utils/useParams\";\nimport { KerberosSettingsRequired } from \"./kerberos/KerberosSettingsRequired\";\nimport { toUserFederation } from \"./routes/UserFederation\";\nimport { Header } from \"./shared/Header\";\nimport { SettingsCache } from \"./shared/SettingsCache\";\n\nexport default function UserFederationKerberosSettings() {\n  const { t } = useTranslation(\"user-federation\");\n  const form = useForm<ComponentRepresentation>({ mode: \"onChange\" });\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const { id } = useParams<{ id?: string }>();\n\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    async () => {\n      if (id) {\n        return adminClient.components.findOne({ id });\n      }\n    },\n    (fetchedComponent) => {\n      if (fetchedComponent) {\n        setupForm(fetchedComponent);\n      } else if (id) {\n        throw new Error(t(\"common:notFound\"));\n      }\n    },\n    []\n  );\n\n  const setupForm = (component: ComponentRepresentation) => {\n    form.reset({ ...component });\n  };\n\n  const save = async (component: ComponentRepresentation) => {\n    try {\n      if (!id) {\n        await adminClient.components.create(component);\n        navigate(`/${realm}/user-federation`);\n      } else {\n        await adminClient.components.update({ id }, component);\n      }\n      setupForm(component as ComponentRepresentation);\n      addAlert(t(!id ? \"createSuccess\" : \"saveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(`user-federation:${!id ? \"createError\" : \"saveError\"}`, error);\n    }\n  };\n\n  return (\n    <>\n      <FormProvider {...form}>\n        <Header provider=\"Kerberos\" save={() => form.handleSubmit(save)()} />\n      </FormProvider>\n      <PageSection variant=\"light\">\n        <KerberosSettingsRequired form={form} showSectionHeading />\n      </PageSection>\n      <PageSection variant=\"light\" isFilled>\n        <SettingsCache form={form} showSectionHeading />\n        <Form onSubmit={form.handleSubmit(save)}>\n          <ActionGroup>\n            <Button\n              isDisabled={!form.formState.isDirty}\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"kerberos-save\"\n            >\n              {t(\"common:save\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              onClick={() => navigate(toUserFederation({ realm }))}\n              data-testid=\"kerberos-cancel\"\n            >\n              {t(\"common:cancel\")}\n            </Button>\n          </ActionGroup>\n        </Form>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["KerberosSettingsRequired","form","showSectionHeading","showSectionDescription","t","useTranslation","helpText","adminClient","useAdminClient","realm","useRealm","isEditModeDropdownOpen","setIsEditModeDropdownOpen","useState","allowPassAuth","useWatch","useFetch","result","jsxs","Fragment","jsx","WizardSectionHeader","FormAccess","FormGroup","HelpItem","KeycloakTextInput","Controller","field","Switch","value","isEqual","Select","_","SelectVariant","SelectOption","UserFederationKerberosSettings","useForm","navigate","useNavigate","id","useParams","addAlert","addError","useAlerts","fetchedComponent","setupForm","component","save","AlertVariant","error","FormProvider","Header","PageSection","SettingsCache","Form","ActionGroup","Button","toUserFederation"],"mappings":"g6BA0BO,MAAMA,EAA2B,CAAC,CACvC,KAAAC,EACA,mBAAAC,EAAqB,GACrB,uBAAAC,EAAyB,EAC3B,IAAqC,CACnC,KAAM,CAAE,EAAAC,CAAA,EAAMC,EAAe,iBAAiB,EACxC,CAAE,EAAGC,CAAS,EAAID,EAAe,sBAAsB,EAEvD,CAAE,YAAAE,GAAgBC,IAClB,CAAE,MAAAC,GAAUC,IAEZ,CAACC,EAAwBC,CAAyB,EAAIC,WAAS,EAAK,EAEpEC,EAAgBC,EAAS,CAC7B,QAASd,EAAK,QACd,KAAM,oCAAA,CACP,EAED,OAAAe,EACE,IAAMT,EAAY,OAAO,QAAQ,CAAE,MAAAE,EAAO,EACzCQ,GAAWhB,EAAK,SAAS,WAAYgB,EAAQ,EAAE,EAChD,CAAC,CAAA,EAKEC,EAAA,KAAAC,WAAA,CAAA,SAAA,CACCjB,GAAAkB,EAAA,IAACC,EAAA,CACC,MAAOjB,EAAE,kBAAkB,EAC3B,YAAaE,EAAS,qCAAqC,EAC3D,gBAAiBH,CAAA,CACnB,EAIDe,EAAA,KAAAI,EAAA,CAAW,KAAK,eAAe,aAAY,GAC1C,SAAA,CAAAJ,EAAA,KAACK,EAAA,CACC,MAAOnB,EAAE,eAAe,EACxB,UACEgB,EAAA,IAACI,EAAA,CACC,SAAUpB,EAAE,wCAAwC,EACpD,aAAa,+BAAA,CACf,EAEF,QAAQ,qBACR,WAAU,GACV,UAAWH,EAAK,UAAU,OAAO,KAAO,QAAU,UAClD,kBAAmBA,EAAK,UAAU,OAAO,MAAM,QAG/C,SAAA,CAAAmB,EAAA,IAACK,EAAA,CACC,OAAM,GACN,GAAG,mBACH,aAAa,WACZ,GAAGxB,EAAK,SAAS,YAAY,CAAA,CAChC,EACAmB,EAAA,IAACK,EAAA,CACC,OAAM,GACN,GAAG,qBACH,aAAa,2CACZ,GAAGxB,EAAK,SAAS,cAAc,CAAA,CAClC,EACAmB,EAAA,IAACK,EAAA,CACC,OAAM,GACN,GAAG,iBACH,aAAchB,EACb,GAAGR,EAAK,SAAS,UAAU,CAAA,CAC9B,EAEAmB,EAAA,IAACK,EAAA,CACC,WAAU,GACV,GAAG,aACH,cAAY,gBACZ,UAAWxB,EAAK,UAAU,OAAO,KAAO,QAAU,UAClD,aAAYG,EAAE,eAAe,EAC5B,GAAGH,EAAK,SAAS,OAAQ,CACxB,SAAU,CACR,MAAO,GACP,QAASG,EAAE,cAAc,CAC3B,CAAA,CACD,CAAA,CACH,CAAA,CAAA,CACF,EAEAgB,EAAA,IAACG,EAAA,CACC,MAAOnB,EAAE,eAAe,EACxB,UACEgB,EAAA,IAACI,EAAA,CACC,SAAUpB,EAAE,wCAAwC,EACpD,aAAa,mCAAA,CACf,EAEF,QAAQ,oBACR,WAAU,GACV,UACEH,EAAK,UAAU,OAAO,QAAQ,gBAAgB,CAAC,EAC3C,QACA,UAEN,kBACEA,EAAK,UAAU,OAAO,QAAQ,gBAAgB,CAAC,EAAE,QAGnD,SAAAmB,EAAA,IAACK,EAAA,CACC,WAAU,GACV,GAAG,oBACH,cAAY,iBACZ,UACExB,EAAK,UAAU,OAAO,QAAQ,gBAAgB,CAAC,EAC3C,QACA,UAEL,GAAGA,EAAK,SAAS,yBAA0B,CAC1C,SAAU,CACR,MAAO,GACP,QAASG,EAAE,eAAe,CAC5B,CAAA,CACD,CAAA,CACH,CAAA,CACF,EAEAgB,EAAA,IAACG,EAAA,CACC,MAAOnB,EAAE,iBAAiB,EAC1B,UACEgB,EAAA,IAACI,EAAA,CACC,SAAUpB,EAAE,0CAA0C,EACtD,aAAa,iCAAA,CACf,EAEF,QAAQ,sBACR,WAAU,GACV,UACEH,EAAK,UAAU,OAAO,QAAQ,kBAAkB,CAAC,EAC7C,QACA,UAEN,kBACEA,EAAK,UAAU,OAAO,QAAQ,kBAAkB,CAAC,EAAE,QAGrD,SAAAmB,EAAA,IAACK,EAAA,CACC,WAAU,GACV,GAAG,sBACH,cAAY,qBACZ,UACExB,EAAK,UAAU,OAAO,QAAQ,kBAAkB,CAAC,EAC7C,QACA,UAEL,GAAGA,EAAK,SAAS,2BAA4B,CAC5C,SAAU,CACR,MAAO,GACP,QAASG,EAAE,yBAAyB,CACtC,CAAA,CACD,CAAA,CACH,CAAA,CACF,EAEAgB,EAAA,IAACG,EAAA,CACC,MAAOnB,EAAE,QAAQ,EACjB,UACEgB,EAAA,IAACI,EAAA,CACC,SAAUpB,EAAE,iCAAiC,EAC7C,aAAa,wBAAA,CACf,EAEF,QAAQ,aACR,WAAU,GACV,UACEH,EAAK,UAAU,OAAO,QAAQ,SAAS,CAAC,EAAI,QAAU,UAExD,kBAAmBA,EAAK,UAAU,OAAO,QAAQ,SAAS,CAAC,EAAE,QAE7D,SAAAmB,EAAA,IAACK,EAAA,CACC,WAAU,GACV,GAAG,aACH,cAAY,kBACZ,UACExB,EAAK,UAAU,OAAO,QAAQ,SAAS,CAAC,EAAI,QAAU,UAEvD,GAAGA,EAAK,SAAS,kBAAmB,CACnC,SAAU,CACR,MAAO,GACP,QAASG,EAAE,gBAAgB,CAC7B,CAAA,CACD,CAAA,CACH,CAAA,CACF,EAEAc,EAAA,KAACK,EAAA,CACC,MAAOnB,EAAE,OAAO,EAChB,UACEgB,EAAA,IAACI,EAAA,CACC,SAAUpB,EAAE,gCAAgC,EAC5C,aAAa,uBAAA,CACf,EAEF,QAAQ,WACR,gBAAe,GAEd,SAAA,CAAA,IACDgB,EAAA,IAACM,EAAA,CACC,KAAK,eACL,aAAc,CAAC,OAAO,EACtB,QAASzB,EAAK,QACd,OAAQ,CAAC,CAAE,MAAA0B,CAAA,IACTP,EAAA,IAACQ,EAAA,CACC,GAAI,WACJ,cAAY,QACZ,SAAWC,GAAUF,EAAM,SAAS,CAAC,GAAGE,GAAO,CAAC,EAChD,UAAWF,EAAM,QAAQ,CAAC,IAAM,OAChC,MAAOvB,EAAE,WAAW,EACpB,SAAUA,EAAE,YAAY,EACxB,aAAYA,EAAE,OAAO,CAAA,CACvB,CAAA,CAEJ,CAAA,CAAA,CACF,EAEAgB,EAAA,IAACG,EAAA,CACC,MAAOnB,EAAE,6BAA6B,EACtC,UACEgB,EAAA,IAACI,EAAA,CACC,SAAUpB,EACR,sDACF,EACA,aAAa,6CAAA,CACf,EAEF,QAAQ,mCACR,gBAAe,GAEf,SAAAgB,EAAA,IAACM,EAAA,CACC,KAAK,qCACL,aAAc,CAAC,OAAO,EACtB,QAASzB,EAAK,QACd,OAAQ,CAAC,CAAE,MAAA0B,CAAA,IACTP,EAAA,IAACQ,EAAA,CACC,GAAI,mCACJ,cAAY,gCACZ,SAAWC,GAAUF,EAAM,SAAS,CAAC,GAAGE,GAAO,CAAC,EAChD,UAAWF,EAAM,QAAQ,CAAC,IAAM,OAChC,MAAOvB,EAAE,WAAW,EACpB,SAAUA,EAAE,YAAY,EACxB,aAAYA,EAAE,6BAA6B,CAAA,CAC7C,CAAA,CAEJ,CAAA,CACF,EAEC0B,EAAQhB,EAAe,CAAC,MAAM,CAAC,EAC9BI,EAAA,KAACK,EAAA,CACC,MAAOnB,EAAE,UAAU,EACnB,UACEgB,EAAA,IAACI,EAAA,CACC,SAAUpB,EAAE,2CAA2C,EACvD,aAAa,0BAAA,CACf,EAEF,WAAU,GACV,QAAQ,eAEP,SAAA,CAAA,IACDgB,EAAA,IAACM,EAAA,CACC,KAAK,qBACL,aAAa,YACb,QAASzB,EAAK,QACd,MAAO,CAAE,SAAU,EAAK,EACxB,OAAQ,CAAC,CAAE,MAAA0B,CAAA,IACTT,EAAA,KAACa,EAAA,CACC,SAAS,eACT,SAAQ,GACR,SAAU,IACRnB,EAA0B,CAACD,CAAsB,EAEnD,OAAQA,EACR,SAAU,CAACqB,EAAGH,IAAU,CACtBF,EAAM,SAASE,CAAe,EAC9BjB,EAA0B,EAAK,CACjC,EACA,WAAYe,EAAM,MAClB,QAASM,EAAc,OAEvB,SAAA,CAAAb,EAAA,IAACc,EAAqB,CAAA,MAAM,YAAY,cAAa,IAAlC,CAAmC,EACrDd,EAAAA,IAAAc,EAAA,CAAqB,MAAM,UAAA,EAAT,CAAoB,CAAA,CAAA,CACzC,CAAA,CAEH,CAAA,CAAA,CAAA,EAED,KAEJd,EAAA,IAACG,EAAA,CACC,MAAOnB,EAAE,kBAAkB,EAC3B,UACEgB,EAAA,IAACI,EAAA,CACC,SAAUpB,EAAE,2CAA2C,EACvD,aAAa,kCAAA,CACf,EAEF,QAAQ,wBACR,gBAAe,GAEf,SAAAgB,EAAA,IAACM,EAAA,CACC,KAAK,iCACL,aAAc,CAAC,OAAO,EACtB,QAASzB,EAAK,QACd,OAAQ,CAAC,CAAE,MAAA0B,CAAA,IACTP,EAAA,IAACQ,EAAA,CACC,GAAI,wBACJ,cAAY,qBACZ,SAAWC,GAAUF,EAAM,SAAS,CAAC,GAAGE,GAAO,CAAC,EAChD,UAAWF,EAAM,QAAQ,CAAC,IAAM,OAChC,MAAOvB,EAAE,WAAW,EACpB,SAAUA,EAAE,YAAY,EACxB,aAAYA,EAAE,kBAAkB,CAAA,CAClC,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,ECvUA,SAAwB+B,IAAiC,CACvD,KAAM,CAAE,EAAA/B,CAAA,EAAMC,EAAe,iBAAiB,EACxCJ,EAAOmC,EAAiC,CAAE,KAAM,UAAY,CAAA,EAC5DC,EAAWC,IACX,CAAE,YAAA/B,GAAgBC,IAClB,CAAE,MAAAC,GAAUC,IAEZ,CAAE,GAAA6B,GAAOC,IAET,CAAE,SAAAC,EAAU,SAAAC,CAAS,EAAIC,EAAU,EAEzC3B,EACE,SAAY,CACV,GAAIuB,EACF,OAAOhC,EAAY,WAAW,QAAQ,CAAE,GAAAgC,CAAI,CAAA,CAEhD,EACCK,GAAqB,CACpB,GAAIA,EACFC,EAAUD,CAAgB,UACjBL,EACT,MAAM,IAAI,MAAMnC,EAAE,iBAAiB,CAAC,CAExC,EACA,CAAC,CAAA,EAGG,MAAAyC,EAAaC,GAAuC,CACxD7C,EAAK,MAAM,CAAE,GAAG6C,CAAW,CAAA,CAAA,EAGvBC,EAAO,MAAOD,GAAuC,CACrD,GAAA,CACGP,EAIH,MAAMhC,EAAY,WAAW,OAAO,CAAE,GAAAgC,CAAA,EAAMO,CAAS,GAH/C,MAAAvC,EAAY,WAAW,OAAOuC,CAAS,EAC7CT,EAAS,IAAI5B,mBAAuB,GAItCoC,EAAUC,CAAoC,EAC9CL,EAASrC,EAAGmC,EAAuB,cAAlB,eAA+B,EAAGS,EAAa,OAAO,QAChEC,GACPP,EAAS,mBAAoBH,EAAqB,YAAhB,gBAA+BU,CAAK,CACxE,CAAA,EAGF,OAEI/B,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAA,IAAC8B,EAAc,CAAA,GAAGjD,EAChB,SAAAmB,EAAAA,IAAC+B,GAAO,SAAS,WAAW,KAAM,IAAMlD,EAAK,aAAa8C,CAAI,EAAA,CAAK,CAAA,EACrE,EACA3B,EAAAA,IAACgC,GAAY,QAAQ,QACnB,eAACpD,EAAyB,CAAA,KAAAC,EAAY,mBAAkB,EAAA,CAAC,CAC3D,CAAA,EACCiB,EAAA,KAAAkC,EAAA,CAAY,QAAQ,QAAQ,SAAQ,GACnC,SAAA,CAAChC,EAAAA,IAAAiC,EAAA,CAAc,KAAApD,EAAY,mBAAkB,EAAC,CAAA,EAC9CmB,EAAAA,IAACkC,GAAK,SAAUrD,EAAK,aAAa8C,CAAI,EACpC,gBAACQ,EACC,CAAA,SAAA,CAAAnC,EAAA,IAACoC,EAAA,CACC,WAAY,CAACvD,EAAK,UAAU,QAC5B,QAAQ,UACR,KAAK,SACL,cAAY,gBAEX,WAAE,aAAa,CAAA,CAClB,EACAmB,EAAA,IAACoC,EAAA,CACC,QAAQ,OACR,QAAS,IAAMnB,EAASoB,EAAiB,CAAE,MAAAhD,CAAO,CAAA,CAAC,EACnD,cAAY,kBAEX,WAAE,eAAe,CAAA,CACpB,CAAA,CAAA,CACF,CACF,CAAA,CAAA,EACF,CACF,CAAA,CAAA,CAEJ"}