{"version":3,"file":"SearchFilter-bebed391.js","sources":["../../src/client-scopes/ChangeTypeDropdown.tsx","../../src/client-scopes/details/SearchFilter.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AlertVariant, Select } from \"@patternfly/react-core\";\n\nimport {\n  allClientScopeTypes,\n  changeClientScope,\n  changeScope,\n  ClientScope,\n  clientScopeTypesSelectOptions,\n} from \"../components/client-scope/ClientScopeTypes\";\nimport type { Row } from \"../clients/scopes/ClientScopes\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\n\ntype ChangeTypeDropdownProps = {\n  clientId?: string;\n  selectedRows: Row[];\n  refresh: () => void;\n};\n\nexport const ChangeTypeDropdown = ({\n  clientId,\n  selectedRows,\n  refresh,\n}: ChangeTypeDropdownProps) => {\n  const { t } = useTranslation(\"client-scopes\");\n  const [open, setOpen] = useState(false);\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  return (\n    <Select\n      toggleId=\"change-type-dropdown\"\n      aria-label=\"change-type-to\"\n      isOpen={open}\n      selections={[]}\n      isDisabled={selectedRows.length === 0}\n      placeholderText={t(\"changeTypeTo\")}\n      onToggle={setOpen}\n      onSelect={async (_, value) => {\n        try {\n          await Promise.all(\n            selectedRows.map((row) => {\n              return clientId\n                ? changeClientScope(\n                    adminClient,\n                    clientId,\n                    row,\n                    row.type,\n                    value as ClientScope\n                  )\n                : changeScope(adminClient, row, value as ClientScope);\n            })\n          );\n          setOpen(false);\n          refresh();\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n        } catch (error) {\n          addError(\"clients:clientScopeError\", error);\n        }\n      }}\n    >\n      {clientScopeTypesSelectOptions(\n        t,\n        !clientId ? allClientScopeTypes : undefined\n      )}\n    </Select>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  Select,\n  SelectOption,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\n\nimport {\n  AllClientScopes,\n  AllClientScopeType,\n  clientScopeTypesSelectOptions,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport type { Row } from \"../../clients/scopes/ClientScopes\";\n\nexport type SearchType = \"name\" | \"type\" | \"protocol\";\nexport const PROTOCOLS = [\"all\", \"saml\", \"openid-connect\"] as const;\nexport type ProtocolType = (typeof PROTOCOLS)[number];\n\nexport const nameFilter =\n  (search = \"\") =>\n  (scope: Row) =>\n    scope.name?.includes(search);\nexport const typeFilter = (type: AllClientScopeType) => (scope: Row) =>\n  type === AllClientScopes.none || scope.type === type;\n\nexport const protocolFilter = (protocol: ProtocolType) => (scope: Row) =>\n  protocol === \"all\" || scope.protocol === protocol;\n\ntype SearchToolbarProps = Omit<SearchDropdownProps, \"withProtocol\"> & {\n  type: AllClientScopeType;\n  onType: (value: AllClientScopes) => void;\n  protocol?: ProtocolType;\n  onProtocol?: (value: ProtocolType) => void;\n};\n\ntype SearchDropdownProps = {\n  searchType: SearchType;\n  onSelect: (value: SearchType) => void;\n  withProtocol?: boolean;\n};\n\nexport const SearchDropdown = ({\n  searchType,\n  withProtocol = false,\n  onSelect,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [searchToggle, setSearchToggle] = useState(false);\n\n  const createDropdown = (searchType: SearchType) => (\n    <DropdownItem\n      key={searchType}\n      onClick={() => {\n        onSelect(searchType);\n        setSearchToggle(false);\n      }}\n    >\n      {t(`clientScopeSearch.${searchType}`)}\n    </DropdownItem>\n  );\n  const options = [createDropdown(\"name\"), createDropdown(\"type\")];\n  if (withProtocol) {\n    options.push(createDropdown(\"protocol\"));\n  }\n\n  return (\n    <Dropdown\n      className=\"keycloak__client-scopes__searchtype\"\n      toggle={\n        <DropdownToggle id=\"toggle-id\" onToggle={setSearchToggle}>\n          <FilterIcon /> {t(`clientScopeSearch.${searchType}`)}\n        </DropdownToggle>\n      }\n      isOpen={searchToggle}\n      dropdownItems={options}\n    />\n  );\n};\n\nexport const SearchToolbar = ({\n  searchType,\n  onSelect,\n  type,\n  onType,\n  protocol,\n  onProtocol,\n}: SearchToolbarProps) => {\n  const { t } = useTranslation(\"client-scopes\");\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      {searchType === \"type\" && (\n        <>\n          <ToolbarItem>\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={onSelect}\n              withProtocol={!!protocol}\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              className=\"keycloak__client-scopes__searchtype\"\n              onToggle={setOpen}\n              isOpen={open}\n              selections={[\n                type === AllClientScopes.none\n                  ? t(\"common:allTypes\")\n                  : t(`common:clientScope.${type}`),\n              ]}\n              onSelect={(_, value) => {\n                onType(value as AllClientScopes);\n                setOpen(false);\n              }}\n            >\n              <SelectOption value={AllClientScopes.none}>\n                {t(\"common:allTypes\")}\n              </SelectOption>\n              <>{clientScopeTypesSelectOptions(t)}</>\n            </Select>\n          </ToolbarItem>\n        </>\n      )}\n      {searchType === \"protocol\" && !!protocol && (\n        <>\n          <ToolbarItem>\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={onSelect}\n              withProtocol\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              className=\"keycloak__client-scopes__searchtype\"\n              onToggle={setOpen}\n              isOpen={open}\n              selections={[t(`protocolTypes.${protocol}`)]}\n              onSelect={(_, value) => {\n                onProtocol?.(value as ProtocolType);\n                setOpen(false);\n              }}\n            >\n              {PROTOCOLS.map((type) => (\n                <SelectOption key={type} value={type}>\n                  {t(`protocolTypes.${type}`)}\n                </SelectOption>\n              ))}\n            </Select>\n          </ToolbarItem>\n        </>\n      )}\n    </>\n  );\n};\n"],"names":["ChangeTypeDropdown","clientId","selectedRows","refresh","t","useTranslation","open","setOpen","useState","adminClient","useAdminClient","addAlert","addError","useAlerts","jsx","Select","_","value","row","changeClientScope","changeScope","AlertVariant","error","clientScopeTypesSelectOptions","allClientScopeTypes","PROTOCOLS","nameFilter","search","scope","typeFilter","type","AllClientScopes","protocolFilter","protocol","SearchDropdown","searchType","withProtocol","onSelect","searchToggle","setSearchToggle","createDropdown","DropdownItem","options","Dropdown","jsxs","DropdownToggle","FilterIcon","SearchToolbar","onType","onProtocol","Fragment","ToolbarItem","SelectOption"],"mappings":"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"}