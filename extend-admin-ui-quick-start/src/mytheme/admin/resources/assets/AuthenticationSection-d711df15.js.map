{"version":3,"file":"AuthenticationSection-d711df15.js","sources":["../../../../node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupText.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStatePrimary.js","../../src/authentication/BindFlowDialog.tsx","../../src/authentication/components/UsedBy.tsx","../../src/authentication/DuplicateFlowModal.tsx","../../src/authentication/policies/CibaPolicy.tsx","../../src/authentication/policies/OtpPolicy.tsx","../../src/authentication/policies/PolicyRow.tsx","../../src/authentication/policies/util.ts","../../src/authentication/policies/PasswordPolicy.tsx","../../src/authentication/policies/WebauthnPolicy.tsx","../../src/authentication/policies/Policies.tsx","../../src/authentication/RequiredActions.tsx","../../src/authentication/AuthenticationSection.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/InputGroup/input-group';\nimport { css } from '@patternfly/react-styles';\nexport var InputGroupTextVariant;\n(function (InputGroupTextVariant) {\n    InputGroupTextVariant[\"default\"] = \"default\";\n    InputGroupTextVariant[\"plain\"] = \"plain\";\n})(InputGroupTextVariant || (InputGroupTextVariant = {}));\nexport const InputGroupText = (_a) => {\n    var { className = '', component = 'span', children, variant = InputGroupTextVariant.default } = _a, props = __rest(_a, [\"className\", \"component\", \"children\", \"variant\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.inputGroupText, variant === InputGroupTextVariant.plain && styles.modifiers.plain, className) }, props), children));\n};\nInputGroupText.displayName = 'InputGroupText';\n//# sourceMappingURL=InputGroupText.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport const EmptyStatePrimary = (_a) => {\n    var { children, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.emptyStatePrimary, className) }, props), children));\n};\nEmptyStatePrimary.displayName = 'EmptyStatePrimary';\n//# sourceMappingURL=EmptyStatePrimary.js.map","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport useToggle from \"../utils/useToggle\";\nimport { REALM_FLOWS } from \"./AuthenticationSection\";\n\ntype BindingForm = {\n  bindingType: keyof RealmRepresentation;\n};\n\ntype BindFlowDialogProps = {\n  flowAlias: string;\n  onClose: () => void;\n};\n\nexport const BindFlowDialog = ({ flowAlias, onClose }: BindFlowDialogProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { control, handleSubmit } = useForm<BindingForm>();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const [open, toggleOpen] = useToggle();\n\n  const onSubmit = async ({ bindingType }: BindingForm) => {\n    const realmRep = await adminClient.realms.findOne({ realm });\n\n    try {\n      await adminClient.realms.update(\n        { realm },\n        { ...realmRep, [bindingType]: flowAlias }\n      );\n      addAlert(t(\"updateFlowSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:updateFlowError\", error);\n    }\n\n    onClose();\n  };\n\n  return (\n    <Modal\n      title={t(\"bindFlow\")}\n      variant=\"small\"\n      onClose={onClose}\n      actions={[\n        <Button key=\"confirm\" data-testid=\"save\" type=\"submit\" form=\"bind-form\">\n          {t(\"common:save\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <Form id=\"bind-form\" isHorizontal onSubmit={handleSubmit(onSubmit)}>\n        <FormGroup label={t(\"chooseBindingType\")} fieldId=\"chooseBindingType\">\n          <Controller\n            name=\"bindingType\"\n            defaultValue=\"browserFlow\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"chooseBindingType\"\n                onToggle={toggleOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  toggleOpen();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={open}\n                menuAppendTo=\"parent\"\n              >\n                {[...REALM_FLOWS.keys()]\n                  .filter((f) => f !== \"dockerAuthenticationFlow\")\n                  .map((key) => {\n                    const value = REALM_FLOWS.get(key);\n                    return (\n                      <SelectOption\n                        selected={key === REALM_FLOWS.get(key)}\n                        key={key}\n                        value={key}\n                      >\n                        {t(`flow.${value}`)}\n                      </SelectOption>\n                    );\n                  })}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Popover,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { fetchUsedBy } from \"../../components/role-mapping/resource\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport useToggle from \"../../utils/useToggle\";\nimport { AuthenticationType, REALM_FLOWS } from \"../AuthenticationSection\";\n\nimport \"./used-by.css\";\n\ntype UsedByProps = {\n  authType: AuthenticationType;\n  realm: RealmRepresentation;\n};\n\nconst Label = ({ label }: { label: string }) => (\n  <>\n    <CheckCircleIcon className=\"keycloak_authentication-section__usedby\" />{\" \"}\n    {label}\n  </>\n);\n\ntype UsedByModalProps = {\n  id: string;\n  onClose: () => void;\n  isSpecificClient: boolean;\n};\n\nconst UsedByModal = ({ id, isSpecificClient, onClose }: UsedByModalProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { adminClient } = useAdminClient();\n\n  const loader = async (\n    first?: number,\n    max?: number,\n    search?: string\n  ): Promise<{ name: string }[]> => {\n    const result = await fetchUsedBy({\n      adminClient,\n      id,\n      type: isSpecificClient ? \"clients\" : \"idp\",\n      first: first || 0,\n      max: max || 10,\n      search,\n    });\n    return result.map((p) => ({ name: p }));\n  };\n\n  return (\n    <Modal\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"flowUsedBy\")}</Text>\n          <Text>\n            {t(\"flowUsedByDescription\", {\n              value: isSpecificClient ? t(\"clients\") : t(\"identiyProviders\"),\n            })}\n          </Text>\n        </TextContent>\n      }\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          onClick={onClose}\n        >\n          {t(\"common:close\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"authentication:usedBy\"\n        searchPlaceholderKey=\"common:search\"\n        columns={[\n          {\n            name: \"name\",\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n\nexport const UsedBy = ({ authType: { id, usedBy }, realm }: UsedByProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const [open, toggle] = useToggle();\n\n  const key = Object.entries(realm).find(\n    (e) => e[1] === usedBy?.values[0]\n  )?.[0];\n\n  return (\n    <>\n      {open && (\n        <UsedByModal\n          id={id!}\n          onClose={toggle}\n          isSpecificClient={usedBy?.type === \"SPECIFIC_CLIENTS\"}\n        />\n      )}\n      {(usedBy?.type === \"SPECIFIC_PROVIDERS\" ||\n        usedBy?.type === \"SPECIFIC_CLIENTS\") &&\n        (usedBy.values.length <= 8 ? (\n          <Popover\n            key={id}\n            aria-label={t(\"usedBy\")}\n            bodyContent={\n              <div key={`usedBy-${id}-${usedBy.values}`}>\n                {t(\n                  \"appliedBy\" +\n                    (usedBy.type === \"SPECIFIC_CLIENTS\"\n                      ? \"Clients\"\n                      : \"Providers\")\n                )}{\" \"}\n                {usedBy.values.map((used, index) => (\n                  <>\n                    <strong>{used}</strong>\n                    {index < usedBy.values.length - 1 ? \", \" : \"\"}\n                  </>\n                ))}\n              </div>\n            }\n          >\n            <Button\n              variant=\"link\"\n              className=\"keycloak__used-by__popover-button\"\n            >\n              <Label label={t(`used.${usedBy.type}`)} />\n            </Button>\n          </Popover>\n        ) : (\n          <Button\n            variant=\"link\"\n            className=\"keycloak__used-by__popover-button\"\n            onClick={toggle}\n          >\n            <Label label={t(`used.${usedBy.type}`)} />\n          </Button>\n        ))}\n      {usedBy?.type === \"DEFAULT\" && (\n        <Label label={t(`flow.${REALM_FLOWS.get(key!)}`)} />\n      )}\n      {!usedBy?.type && t(\"used.notInUse\")}\n    </>\n  );\n};\n","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { NameDescription } from \"./form/NameDescription\";\nimport { toFlow } from \"./routes/Flow\";\n\ntype DuplicateFlowModalProps = {\n  name: string;\n  description: string;\n  toggleDialog: () => void;\n  onComplete: () => void;\n};\n\nexport const DuplicateFlowModal = ({\n  name,\n  description,\n  toggleDialog,\n  onComplete,\n}: DuplicateFlowModalProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const form = useForm<AuthenticationFlowRepresentation>({ mode: \"onChange\" });\n  const { setValue, getValues, handleSubmit } = form;\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  useEffect(() => {\n    setValue(\"alias\", t(\"copyOf\", { name }));\n    setValue(\"description\", description);\n  }, [name, description]);\n\n  const onSubmit = async () => {\n    const form = getValues();\n    try {\n      await adminClient.authenticationManagement.copyFlow({\n        flow: name,\n        newName: form.alias!,\n      });\n      const newFlow = (\n        await adminClient.authenticationManagement.getFlows()\n      ).find((flow) => flow.alias === form.alias)!;\n\n      if (form.description !== description) {\n        newFlow.description = form.description;\n        await adminClient.authenticationManagement.updateFlow(\n          { flowId: newFlow.id! },\n          newFlow\n        );\n      }\n      addAlert(t(\"copyFlowSuccess\"), AlertVariant.success);\n      navigate(\n        toFlow({\n          realm,\n          id: newFlow.id!,\n          usedBy: \"notInUse\",\n          builtIn: newFlow.builtIn ? \"builtIn\" : undefined,\n        })\n      );\n    } catch (error) {\n      addError(\"authentication:copyFlowError\", error);\n    }\n    onComplete();\n  };\n\n  return (\n    <Modal\n      title={t(\"duplicateFlow\")}\n      onClose={toggleDialog}\n      variant={ModalVariant.small}\n      actions={[\n        <Button\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          type=\"submit\"\n          form=\"duplicate-flow-form\"\n        >\n          {t(\"duplicate\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={toggleDialog}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <FormProvider {...form}>\n        <Form\n          id=\"duplicate-flow-form\"\n          onSubmit={handleSubmit(onSubmit)}\n          isHorizontal\n        >\n          <NameDescription />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  FormGroup,\n  InputGroup,\n  InputGroupText,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\n\nconst CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES = [\"poll\", \"ping\"] as const;\nconst CIBA_EXPIRES_IN_MIN = 10;\nconst CIBA_EXPIRES_IN_MAX = 600;\nconst CIBA_INTERVAL_MIN = 0;\nconst CIBA_INTERVAL_MAX = 600;\n\ntype CibaPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<\n  RealmRepresentation,\n  \"clients\" | \"components\" | \"groups\"\n>;\n\nexport const CibaPolicy = ({ realm, realmUpdated }: CibaPolicyProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const {\n    control,\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors, isValid, isDirty },\n  } = useForm<FormFields>({ mode: \"onChange\" });\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const [\n    backchannelTokenDeliveryModeOpen,\n    setBackchannelTokenDeliveryModeOpen,\n  ] = useState(false);\n  const [authRequestedUserHintOpen, setAuthRequestedUserHintOpen] =\n    useState(false);\n\n  const setupForm = (realm: RealmRepresentation) =>\n    convertToFormValues(realm, setValue);\n\n  useEffect(() => setupForm(realm), []);\n\n  const onSubmit = async (formValues: FormFields) => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        convertFormValuesToObject(formValues)\n      );\n\n      const updatedRealm = await adminClient.realms.findOne({\n        realm: realmName,\n      });\n\n      realmUpdated(updatedRealm!);\n      setupForm(updatedRealm!);\n      addAlert(t(\"updateCibaSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:updateCibaError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <FormGroup\n          fieldId=\"cibaBackchannelTokenDeliveryMode\"\n          label={t(\"cibaBackchannelTokenDeliveryMode\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\n                \"authentication-help:cibaBackchannelTokenDeliveryMode\"\n              )}\n              fieldLabelId=\"authentication:cibaBackchannelTokenDeliveryMode\"\n            />\n          }\n        >\n          <Controller\n            name=\"attributes.cibaBackchannelTokenDeliveryMode\"\n            defaultValue={CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES[0]}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"cibaBackchannelTokenDeliveryMode\"\n                onSelect={(_, value) => {\n                  setBackchannelTokenDeliveryModeOpen(false);\n                  field.onChange(value.toString());\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={backchannelTokenDeliveryModeOpen}\n                onToggle={(isExpanded) =>\n                  setBackchannelTokenDeliveryModeOpen(isExpanded)\n                }\n              >\n                {CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES.map((value) => (\n                  <SelectOption\n                    key={value}\n                    value={value}\n                    selected={value === field.value}\n                  >\n                    {t(`cibaBackhannelTokenDeliveryModes.${value}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          fieldId=\"cibaExpiresIn\"\n          label={t(\"cibaExpiresIn\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authentication-help:cibaExpiresIn\")}\n              fieldLabelId=\"authentication:cibaExpiresIn\"\n            />\n          }\n          validated={errors.attributes?.cibaExpiresIn ? \"error\" : \"default\"}\n          helperTextInvalid={\n            errors.attributes?.cibaExpiresIn?.message as string\n          }\n          isRequired\n        >\n          <InputGroup>\n            <KeycloakTextInput\n              id=\"cibaExpiresIn\"\n              type=\"number\"\n              min={CIBA_EXPIRES_IN_MIN}\n              max={CIBA_EXPIRES_IN_MAX}\n              {...register(\"attributes.cibaExpiresIn\", {\n                min: {\n                  value: CIBA_EXPIRES_IN_MIN,\n                  message: t(\"common:greaterThan\", {\n                    value: CIBA_EXPIRES_IN_MIN,\n                  }),\n                },\n                max: {\n                  value: CIBA_EXPIRES_IN_MAX,\n                  message: t(\"common:lessThan\", { value: CIBA_EXPIRES_IN_MAX }),\n                },\n                required: {\n                  value: true,\n                  message: t(\"common:required\"),\n                },\n              })}\n              validated={errors.attributes?.cibaExpiresIn ? \"error\" : \"default\"}\n            />\n            <InputGroupText variant=\"plain\">\n              {t(\"common:times:seconds\")}\n            </InputGroupText>\n          </InputGroup>\n        </FormGroup>\n        <FormGroup\n          fieldId=\"cibaInterval\"\n          label={t(\"cibaInterval\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authentication-help:cibaInterval\")}\n              fieldLabelId=\"authentication:cibaInterval\"\n            />\n          }\n          validated={errors.attributes?.cibaInterval ? \"error\" : \"default\"}\n          helperTextInvalid={errors.attributes?.cibaInterval?.message as string}\n          isRequired\n        >\n          <InputGroup>\n            <KeycloakTextInput\n              id=\"cibaInterval\"\n              type=\"number\"\n              min={CIBA_INTERVAL_MIN}\n              max={CIBA_INTERVAL_MAX}\n              {...register(\"attributes.cibaInterval\", {\n                min: {\n                  value: CIBA_INTERVAL_MIN,\n                  message: t(\"common:greaterThan\", {\n                    value: CIBA_INTERVAL_MIN,\n                  }),\n                },\n                max: {\n                  value: CIBA_INTERVAL_MAX,\n                  message: t(\"common:lessThan\", { value: CIBA_INTERVAL_MAX }),\n                },\n                required: {\n                  value: true,\n                  message: t(\"common:required\"),\n                },\n              })}\n              validated={errors.attributes?.cibaInterval ? \"error\" : \"default\"}\n            />\n            <InputGroupText variant=\"plain\">\n              {t(\"common:times:seconds\")}\n            </InputGroupText>\n          </InputGroup>\n        </FormGroup>\n        <FormGroup\n          fieldId=\"cibaAuthRequestedUserHint\"\n          label={t(\"cibaAuthRequestedUserHint\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authentication-help:cibaAuthRequestedUserHint\")}\n              fieldLabelId=\"authentication:cibaAuthRequestedUserHint\"\n            />\n          }\n        >\n          <Select\n            toggleId=\"cibaAuthRequestedUserHint\"\n            selections=\"login_hint\"\n            isOpen={authRequestedUserHintOpen}\n            onToggle={(isExpanded) => setAuthRequestedUserHintOpen(isExpanded)}\n            isDisabled\n          >\n            <SelectOption value=\"login_hint\">login_hint</SelectOption>\n            <SelectOption value=\"id_token_hint\">id_token_hint</SelectOption>\n            <SelectOption value=\"login_hint_token\">\n              login_hint_token\n            </SelectOption>\n          </Select>\n        </FormGroup>\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isValid || !isDirty}\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => setupForm({ ...realm })}\n          >\n            {t(\"common:reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  NumberInput,\n  PageSection,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useEffect, useMemo } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./otp-policy.css\";\n\nconst POLICY_TYPES = [\"totp\", \"hotp\"] as const;\nconst OTP_HASH_ALGORITHMS = [\"SHA1\", \"SHA256\", \"SHA512\"] as const;\nconst NUMBER_OF_DIGITS = [6, 8] as const;\n\ntype OtpPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<\n  RealmRepresentation,\n  \"clients\" | \"components\" | \"groups\"\n>;\n\nexport const OtpPolicy = ({ realm, realmUpdated }: OtpPolicyProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const {\n    control,\n    reset,\n    handleSubmit,\n    formState: { isValid, isDirty, errors },\n  } = useForm<FormFields>({ mode: \"onChange\", defaultValues: realm });\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n  const [open, toggle] = useToggle();\n\n  const otpType = useWatch({\n    name: \"otpPolicyType\",\n    control,\n    defaultValue: POLICY_TYPES[0],\n  });\n\n  const setupForm = (formValues: FormFields) => reset(formValues);\n\n  useEffect(() => setupForm(realm), []);\n\n  const supportedApplications = useMemo(() => {\n    const labels = (realm.otpSupportedApplications ?? []).map((key) =>\n      t(`otpSupportedApplications.${key}`)\n    );\n\n    return localeSort(labels, (label) => label);\n  }, [realm.otpSupportedApplications]);\n\n  const onSubmit = async (formValues: FormFields) => {\n    try {\n      await adminClient.realms.update({ realm: realmName }, formValues);\n      const updatedRealm = await adminClient.realms.findOne({\n        realm: realmName,\n      });\n      realmUpdated(updatedRealm!);\n      setupForm(updatedRealm!);\n      addAlert(t(\"updateOtpSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:updateOtpError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__otp_policies_authentication__form\"\n      >\n        <FormGroup\n          label={t(\"otpType\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authentication-help:otpType\")}\n              fieldLabelId=\"authentication:otpType\"\n            />\n          }\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"otpPolicyType\"\n            data-testid=\"otpPolicyType\"\n            defaultValue={POLICY_TYPES[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {POLICY_TYPES.map((type) => (\n                  <Radio\n                    key={type}\n                    id={type}\n                    data-testid={type}\n                    isChecked={field.value === type}\n                    name=\"otpPolicyType\"\n                    onChange={() => field.onChange(type)}\n                    label={t(`policyType.${type}`)}\n                    className=\"keycloak__otp_policies_authentication__policy-type\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"otpHashAlgorithm\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authentication-help:otpHashAlgorithm\")}\n              fieldLabelId=\"authentication:otpHashAlgorithm\"\n            />\n          }\n          fieldId=\"otpHashAlgorithm\"\n        >\n          <Controller\n            name=\"otpPolicyAlgorithm\"\n            defaultValue={`Hmac${OTP_HASH_ALGORITHMS[0]}`}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"otpHashAlgorithm\"\n                onToggle={toggle}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  toggle();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={open}\n              >\n                {OTP_HASH_ALGORITHMS.map((type) => (\n                  <SelectOption\n                    key={type}\n                    selected={`Hmac${type}` === field.value}\n                    value={`Hmac${type}`}\n                  >\n                    {type}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"otpPolicyDigits\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authentication-help:otpPolicyDigits\")}\n              fieldLabelId=\"authentication:otpPolicyDigits\"\n            />\n          }\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"otpPolicyDigits\"\n            data-testid=\"otpPolicyDigits\"\n            defaultValue={NUMBER_OF_DIGITS[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {NUMBER_OF_DIGITS.map((type) => (\n                  <Radio\n                    key={type}\n                    id={`digit-${type}`}\n                    data-testid={`digit-${type}`}\n                    isChecked={field.value === type}\n                    name=\"otpPolicyDigits\"\n                    onChange={() => field.onChange(type)}\n                    label={type}\n                    className=\"keycloak__otp_policies_authentication__number-of-digits\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"lookAhead\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authentication-help:lookAhead\")}\n              fieldLabelId=\"authentication:lookAhead\"\n            />\n          }\n          fieldId=\"lookAhead\"\n        >\n          <Controller\n            name=\"otpPolicyLookAheadWindow\"\n            defaultValue={1}\n            control={control}\n            render={({ field }) => {\n              const MIN_VALUE = 0;\n              const value = field.value ?? 1;\n              const setValue = (newValue: number) =>\n                field.onChange(Math.max(newValue, MIN_VALUE));\n\n              return (\n                <NumberInput\n                  id=\"lookAhead\"\n                  value={value}\n                  min={MIN_VALUE}\n                  onPlus={() => setValue(value + 1)}\n                  onMinus={() => setValue(value - 1)}\n                  onChange={(event) => {\n                    const newValue = Number(event.currentTarget.value);\n                    setValue(!isNaN(newValue) ? newValue : 0);\n                  }}\n                />\n              );\n            }}\n          />\n        </FormGroup>\n        {otpType === POLICY_TYPES[0] && (\n          <FormGroup\n            label={t(\"otpPolicyPeriod\")}\n            fieldId=\"otpPolicyPeriod\"\n            helperTextInvalid={t(\"otpPolicyPeriodErrorHint\")}\n            validated={\n              errors.otpPolicyPeriod\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            labelIcon={\n              <HelpItem\n                helpText={t(\"authentication-help:otpPolicyPeriod\")}\n                fieldLabelId=\"authentication:otpPolicyPeriod\"\n              />\n            }\n          >\n            <Controller\n              name=\"otpPolicyPeriod\"\n              defaultValue={30}\n              control={control}\n              rules={{ min: 1, max: 120 }}\n              render={({ field }) => {\n                const value = field.value ?? 30;\n\n                return (\n                  <TimeSelector\n                    id=\"otpPolicyPeriod\"\n                    data-testid=\"otpPolicyPeriod\"\n                    value={value}\n                    onChange={field.onChange}\n                    units={[\"second\", \"minute\"]}\n                    validated={\n                      errors.otpPolicyPeriod\n                        ? ValidatedOptions.error\n                        : ValidatedOptions.default\n                    }\n                  />\n                );\n              }}\n            />\n          </FormGroup>\n        )}\n        {otpType === POLICY_TYPES[1] && (\n          <FormGroup\n            label={t(\"initialCounter\")}\n            fieldId=\"initialCounter\"\n            helperTextInvalid={t(\"initialCounterErrorHint\")}\n            validated={\n              errors.otpPolicyInitialCounter\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            labelIcon={\n              <HelpItem\n                helpText={t(\"authentication-help:initialCounter\")}\n                fieldLabelId=\"authentication:initialCounter\"\n              />\n            }\n          >\n            <Controller\n              name=\"otpPolicyInitialCounter\"\n              defaultValue={30}\n              control={control}\n              rules={{ min: 1, max: 120 }}\n              render={({ field }) => {\n                const MIN_VALUE = 1;\n                const value = field.value ?? 30;\n                const setValue = (newValue: number) =>\n                  field.onChange(Math.max(newValue, MIN_VALUE));\n\n                return (\n                  <NumberInput\n                    id=\"initialCounter\"\n                    value={value}\n                    min={MIN_VALUE}\n                    onPlus={() => setValue(value + 1)}\n                    onMinus={() => setValue(value - 1)}\n                    onChange={(event) => {\n                      const newValue = Number(event.currentTarget.value);\n                      setValue(!isNaN(newValue) ? newValue : 30);\n                    }}\n                  />\n                );\n              }}\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={t(\"supportedApplications\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authentication-help:supportedApplications\")}\n              fieldLabelId=\"authentication:supportedApplications\"\n            />\n          }\n        >\n          <ChipGroup data-testid=\"supportedApplications\">\n            {supportedApplications.map((label) => (\n              <Chip key={label} isReadOnly>\n                {label}\n              </Chip>\n            ))}\n          </ChipGroup>\n        </FormGroup>\n\n        {otpType === POLICY_TYPES[0] && (\n          <FormGroup\n            label={t(\"otpPolicyCodeReusable\")}\n            fieldId=\"otpPolicyCodeReusable\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"authentication-help:otpPolicyCodeReusable\")}\n                fieldLabelId=\"authentication:otpPolicyCodeReusable\"\n              />\n            }\n          >\n            <Controller\n              name=\"otpPolicyCodeReusable\"\n              defaultValue={true}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"otpPolicyCodeReusable\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n        )}\n\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isValid || !isDirty}\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => reset({ ...realm })}\n          >\n            {t(\"common:reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport {\n  Button,\n  FormGroup,\n  NumberInput,\n  Split,\n  SplitItem,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nimport \"./policy-row.css\";\n\ntype PolicyRowProps = {\n  policy: PasswordPolicyTypeRepresentation;\n  onRemove: (id?: string) => void;\n};\n\nexport const PolicyRow = ({\n  policy: { id, configType, defaultValue, displayName },\n  onRemove,\n}: PolicyRowProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <FormGroup\n      label={displayName}\n      fieldId={id!}\n      isRequired\n      helperTextInvalid={t(\"common:required\")}\n      validated={\n        errors[id!] ? ValidatedOptions.error : ValidatedOptions.default\n      }\n      labelIcon={\n        <HelpItem\n          helpText={t(`authentication-help:passwordPolicies.${id}`)}\n          fieldLabelId={`authentication:${id}`}\n        />\n      }\n    >\n      <Split>\n        <SplitItem isFilled>\n          {configType && configType !== \"int\" && (\n            <KeycloakTextInput\n              id={id}\n              data-testid={id}\n              {...register(id!, { required: true })}\n              defaultValue={defaultValue}\n              validated={\n                errors[id!] ? ValidatedOptions.error : ValidatedOptions.default\n              }\n            />\n          )}\n          {configType === \"int\" && (\n            <Controller\n              name={id!}\n              defaultValue={Number.parseInt(defaultValue || \"0\")}\n              control={control}\n              render={({ field }) => {\n                const MIN_VALUE = 0;\n                const setValue = (newValue: number) =>\n                  field.onChange(Math.max(newValue, MIN_VALUE));\n                const value = Number(field.value);\n\n                return (\n                  <NumberInput\n                    id={id}\n                    value={value}\n                    min={MIN_VALUE}\n                    onPlus={() => setValue(value + 1)}\n                    onMinus={() => setValue(value - 1)}\n                    onChange={(event) => {\n                      const newValue = Number(event.currentTarget.value);\n                      setValue(!isNaN(newValue) ? newValue : 0);\n                    }}\n                    className=\"keycloak__policies_authentication__number-field\"\n                  />\n                );\n              }}\n            />\n          )}\n          {!configType && (\n            <Switch\n              id={id!}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked\n              isDisabled\n              aria-label={displayName}\n            />\n          )}\n        </SplitItem>\n        <SplitItem>\n          <Button\n            data-testid={`remove-${id}`}\n            variant=\"link\"\n            className=\"keycloak__policies_authentication__minus-icon\"\n            onClick={() => onRemove(id)}\n            aria-label={t(\"common:remove\")}\n          >\n            <MinusCircleIcon />\n          </Button>\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\n\nexport type SubmittedValues = {\n  [index: string]: string;\n};\n\nconst POLICY_SEPARATOR = \" and \";\n\nexport const serializePolicy = (\n  policies: PasswordPolicyTypeRepresentation[],\n  submitted: SubmittedValues\n) =>\n  policies\n    .map((policy) => `${policy.id}(${submitted[policy.id!]})`)\n    .join(POLICY_SEPARATOR);\n\ntype PolicyValue = PasswordPolicyTypeRepresentation & {\n  value?: string;\n};\n\nexport const parsePolicy = (\n  value: string,\n  policies: PasswordPolicyTypeRepresentation[]\n) =>\n  value\n    .split(POLICY_SEPARATOR)\n    .map(parsePolicyToken)\n    .reduce<PolicyValue[]>((result, { id, value }) => {\n      const matchingPolicy = policies.find((policy) => policy.id === id);\n\n      if (!matchingPolicy) {\n        return result;\n      }\n\n      return result.concat({ ...matchingPolicy, value });\n    }, []);\n\ntype PolicyTokenParsed = {\n  id: string;\n  value?: string;\n};\n\nfunction parsePolicyToken(token: string): PolicyTokenParsed {\n  const valueStart = token.indexOf(\"(\");\n\n  if (valueStart === -1) {\n    return { id: token.trim() };\n  }\n\n  const id = token.substring(0, valueStart).trim();\n  const valueEnd = token.lastIndexOf(\")\");\n\n  if (valueEnd === -1) {\n    return { id };\n  }\n\n  const value = token.substring(valueStart + 1, valueEnd).trim();\n\n  return { id, value };\n}\n","import {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStatePrimary,\n  PageSection,\n  Select,\n  SelectOption,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { PolicyRow } from \"./PolicyRow\";\nimport { parsePolicy, serializePolicy, SubmittedValues } from \"./util\";\n\ntype PolicySelectProps = {\n  onSelect: (row: PasswordPolicyTypeRepresentation) => void;\n  selectedPolicies: PasswordPolicyTypeRepresentation[];\n};\n\nconst PolicySelect = ({ onSelect, selectedPolicies }: PolicySelectProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { passwordPolicies } = useServerInfo();\n  const [open, setOpen] = useState(false);\n\n  const policies = useMemo(\n    () =>\n      passwordPolicies?.filter(\n        (p) => selectedPolicies.find((o) => o.id === p.id) === undefined\n      ),\n    [selectedPolicies]\n  );\n\n  return (\n    <Select\n      width={300}\n      onSelect={(_, selection) => {\n        onSelect(selection as PasswordPolicyTypeRepresentation);\n        setOpen(false);\n      }}\n      onToggle={(value) => setOpen(value)}\n      isOpen={open}\n      selections={t(\"addPolicy\")}\n      isDisabled={policies?.length === 0}\n    >\n      {policies?.map((policy) => (\n        <SelectOption key={policy.id} value={policy}>\n          {policy.displayName}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n\ntype PasswordPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\nexport const PasswordPolicy = ({\n  realm,\n  realmUpdated,\n}: PasswordPolicyProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { passwordPolicies } = useServerInfo();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const [rows, setRows] = useState<PasswordPolicyTypeRepresentation[]>([]);\n  const onSelect = (row: PasswordPolicyTypeRepresentation) => {\n    setRows([...rows, row]);\n    setValue(row.id!, row.defaultValue!, { shouldDirty: true });\n  };\n\n  const form = useForm<SubmittedValues>({\n    defaultValues: {},\n  });\n  const {\n    handleSubmit,\n    setValue,\n    reset,\n    formState: { isDirty },\n  } = form;\n\n  const setupForm = (realm: RealmRepresentation) => {\n    reset();\n    const values = parsePolicy(realm.passwordPolicy || \"\", passwordPolicies!);\n    values.forEach((v) => {\n      setValue(v.id!, v.value!);\n    });\n    setRows(values);\n  };\n\n  useEffect(() => setupForm(realm), []);\n\n  const save = async (values: SubmittedValues) => {\n    const updatedRealm = {\n      ...realm,\n      passwordPolicy: serializePolicy(rows, values),\n    };\n    try {\n      await adminClient.realms.update({ realm: realmName }, updatedRealm);\n      realmUpdated(updatedRealm);\n      setupForm(updatedRealm);\n      addAlert(t(\"updatePasswordPolicySuccess\"), AlertVariant.success);\n    } catch (error: any) {\n      addError(\"authentication:updatePasswordPolicyError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      {(rows.length !== 0 || realm.passwordPolicy) && (\n        <>\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem>\n                <PolicySelect onSelect={onSelect} selectedPolicies={rows} />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n          <Divider />\n          <PageSection variant=\"light\">\n            <FormProvider {...form}>\n              <FormAccess\n                className=\"keycloak__policies_authentication__form\"\n                role=\"manage-realm\"\n                isHorizontal\n                onSubmit={handleSubmit(save)}\n              >\n                {rows.map((r, index) => (\n                  <PolicyRow\n                    key={`${r.id}-${index}`}\n                    policy={r}\n                    onRemove={(id) => {\n                      setRows(rows.filter((r) => r.id !== id));\n                      setValue(r.id!, \"\", { shouldDirty: true });\n                    }}\n                  />\n                ))}\n                <ActionGroup>\n                  <Button\n                    data-testid=\"save\"\n                    variant=\"primary\"\n                    type=\"submit\"\n                    isDisabled={!isDirty}\n                  >\n                    {t(\"common:save\")}\n                  </Button>\n                  <Button\n                    data-testid=\"reload\"\n                    variant={ButtonVariant.link}\n                    onClick={() => setupForm(realm)}\n                  >\n                    {t(\"common:reload\")}\n                  </Button>\n                </ActionGroup>\n              </FormAccess>\n            </FormProvider>\n          </PageSection>\n        </>\n      )}\n      {!rows.length && !realm.passwordPolicy && (\n        <EmptyState data-testid=\"empty-state\" variant=\"large\">\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel=\"h1\" size=\"lg\">\n            {t(\"noPasswordPolicies\")}\n          </Title>\n          <EmptyStateBody>{t(\"noPasswordPoliciesInstructions\")}</EmptyStateBody>\n          <EmptyStatePrimary>\n            <PolicySelect onSelect={onSelect} selectedPolicies={[]} />\n          </EmptyStatePrimary>\n        </EmptyState>\n      )}\n    </PageSection>\n  );\n};\n","import {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  FormGroup,\n  PageSection,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { useHelp, HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\n\nimport \"./webauthn-policy.css\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"ES256\",\n  \"ES384\",\n  \"ES512\",\n  \"RS256\",\n  \"RS384\",\n  \"RS512\",\n  \"RS1\",\n] as const;\nconst ATTESTATION_PREFERENCE = [\n  \"not specified\",\n  \"none\",\n  \"indirect\",\n  \"direct\",\n] as const;\n\nconst AUTHENTICATOR_ATTACHMENT = [\n  \"not specified\",\n  \"platform\",\n  \"cross-platform\",\n] as const;\n\nconst RESIDENT_KEY_OPTIONS = [\"not specified\", \"Yes\", \"No\"] as const;\n\nconst USER_VERIFY = [\n  \"not specified\",\n  \"required\",\n  \"preferred\",\n  \"discouraged\",\n] as const;\n\ntype WeauthnSelectProps = {\n  name: string;\n  label: string;\n  options: readonly string[];\n  labelPrefix?: string;\n  isMultiSelect?: boolean;\n};\n\nconst WebauthnSelect = ({\n  name,\n  label,\n  options,\n  labelPrefix,\n  isMultiSelect = false,\n}: WeauthnSelectProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { control } = useFormContext();\n\n  const [open, toggle] = useState(false);\n  return (\n    <FormGroup\n      label={t(label)}\n      labelIcon={\n        <HelpItem\n          helpText={t(`authentication-help:${label}`)}\n          fieldLabelId={`authentication:${label}`}\n        />\n      }\n      fieldId={name}\n    >\n      <Controller\n        name={name}\n        defaultValue={options[0]}\n        control={control}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            onToggle={toggle}\n            onSelect={(_, selectedValue) => {\n              if (isMultiSelect) {\n                const changedValue = field.value.find(\n                  (item: string) => item === selectedValue\n                )\n                  ? field.value.filter((item: string) => item !== selectedValue)\n                  : [...field.value, selectedValue];\n                field.onChange(changedValue);\n              } else {\n                field.onChange(selectedValue.toString());\n                toggle(false);\n              }\n            }}\n            selections={\n              labelPrefix ? t(`${labelPrefix}.${field.value}`) : field.value\n            }\n            variant={\n              isMultiSelect\n                ? SelectVariant.typeaheadMulti\n                : SelectVariant.single\n            }\n            aria-label={t(name)}\n            typeAheadAriaLabel={t(name)}\n            isOpen={open}\n          >\n            {options.map((option) => (\n              <SelectOption\n                selected={option === field.value}\n                key={option}\n                value={option}\n              >\n                {labelPrefix ? t(`${labelPrefix}.${option}`) : option}\n              </SelectOption>\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n\ntype WebauthnPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n  isPasswordLess?: boolean;\n};\n\nexport const WebauthnPolicy = ({\n  realm,\n  realmUpdated,\n  isPasswordLess = false,\n}: WebauthnPolicyProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const { enabled } = useHelp();\n  const form = useForm({ mode: \"onChange\" });\n  const {\n    control,\n    register,\n    setValue,\n    handleSubmit,\n    formState: { isDirty, errors },\n  } = form;\n\n  const namePrefix = isPasswordLess\n    ? \"webAuthnPolicyPasswordless\"\n    : \"webAuthnPolicy\";\n\n  const setupForm = (realm: RealmRepresentation) =>\n    convertToFormValues(realm, setValue);\n\n  useEffect(() => setupForm(realm), []);\n\n  const onSubmit = async (realm: RealmRepresentation) => {\n    const submittedRealm = convertFormValuesToObject(realm);\n    try {\n      await adminClient.realms.update({ realm: realmName }, submittedRealm);\n      realmUpdated(submittedRealm);\n      setupForm(submittedRealm);\n      addAlert(t(\"webAuthnUpdateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:webAuthnUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      {enabled && (\n        <Popover bodyContent={t(`authentication-help:${namePrefix}FormHelp`)}>\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"authentication-help:webauthnIntro\")}\n            </Text>\n          </TextContent>\n        </Popover>\n      )}\n\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__webauthn_policies_authentication__form\"\n      >\n        <FormGroup\n          label={t(\"webAuthnPolicyRpEntityName\")}\n          fieldId=\"webAuthnPolicyRpEntityName\"\n          helperTextInvalid={t(\"common:required\")}\n          validated={errors.webAuthnPolicyRpEntityName ? \"error\" : \"default\"}\n          isRequired\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authentication-help:webAuthnPolicyRpEntityName\")}\n              fieldLabelId=\"authentication:webAuthnPolicyRpEntityName\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            id=\"webAuthnPolicyRpEntityName\"\n            data-testid=\"webAuthnPolicyRpEntityName\"\n            validated={errors.webAuthnPolicyRpEntityName ? \"error\" : \"default\"}\n            {...register(`${namePrefix}RpEntityName`, { required: true })}\n          />\n        </FormGroup>\n        <FormProvider {...form}>\n          <WebauthnSelect\n            name={`${namePrefix}SignatureAlgorithms`}\n            label=\"webAuthnPolicySignatureAlgorithms\"\n            options={SIGNATURE_ALGORITHMS}\n            isMultiSelect\n          />\n          <FormGroup\n            label={t(\"webAuthnPolicyRpId\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"authentication-help:webAuthnPolicyRpId\")}\n                fieldLabelId=\"authentication:webAuthnPolicyRpId\"\n              />\n            }\n            fieldId=\"webAuthnPolicyRpId\"\n          >\n            <KeycloakTextInput\n              id=\"webAuthnPolicyRpId\"\n              data-testid=\"webAuthnPolicyRpId\"\n              {...register(`${namePrefix}RpId`)}\n            />\n          </FormGroup>\n          <WebauthnSelect\n            name={`${namePrefix}AttestationConveyancePreference`}\n            label=\"webAuthnPolicyAttestationConveyancePreference\"\n            options={ATTESTATION_PREFERENCE}\n            labelPrefix=\"attestationPreference\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}AuthenticatorAttachment`}\n            label=\"webAuthnPolicyAuthenticatorAttachment\"\n            options={AUTHENTICATOR_ATTACHMENT}\n            labelPrefix=\"authenticatorAttachment\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}RequireResidentKey`}\n            label=\"webAuthnPolicyRequireResidentKey\"\n            options={RESIDENT_KEY_OPTIONS}\n            labelPrefix=\"residentKey\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}UserVerificationRequirement`}\n            label=\"webAuthnPolicyUserVerificationRequirement\"\n            options={USER_VERIFY}\n            labelPrefix=\"userVerify\"\n          />\n          <FormGroup\n            label={t(\"webAuthnPolicyCreateTimeout\")}\n            fieldId=\"webAuthnPolicyCreateTimeout\"\n            helperTextInvalid={t(\"webAuthnPolicyCreateTimeoutHint\")}\n            validated={errors.webAuthnPolicyCreateTimeout ? \"error\" : \"default\"}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"authentication-help:webAuthnPolicyCreateTimeout\")}\n                fieldLabelId=\"authentication:webAuthnPolicyCreateTimeout\"\n              />\n            }\n          >\n            <Controller\n              name={`${namePrefix}CreateTimeout`}\n              defaultValue={0}\n              control={control}\n              rules={{ min: 0, max: 31536 }}\n              render={({ field }) => (\n                <TimeSelector\n                  data-testid=\"webAuthnPolicyCreateTimeout\"\n                  aria-label={t(\"webAuthnPolicyCreateTimeout\")}\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"second\", \"minute\", \"hour\"]}\n                  validated={\n                    errors.webAuthnPolicyCreateTimeout ? \"error\" : \"default\"\n                  }\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"webAuthnPolicyAvoidSameAuthenticatorRegister\")}\n            fieldId=\"webAuthnPolicyAvoidSameAuthenticatorRegister\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\n                  \"authentication-help:webAuthnPolicyAvoidSameAuthenticatorRegister\"\n                )}\n                fieldLabelId=\"authentication:webAuthnPolicyAvoidSameAuthenticatorRegister\"\n              />\n            }\n          >\n            <Controller\n              name={`${namePrefix}AvoidSameAuthenticatorRegister`}\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"webAuthnPolicyAvoidSameAuthenticatorRegister\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                  aria-label={t(\"webAuthnPolicyAvoidSameAuthenticatorRegister\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"webAuthnPolicyAcceptableAaguids\")}\n            fieldId=\"webAuthnPolicyAcceptableAaguids\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\n                  \"authentication-help:webAuthnPolicyAcceptableAaguids\"\n                )}\n                fieldLabelId=\"authentication:webAuthnPolicyAcceptableAaguids\"\n              />\n            }\n          >\n            <MultiLineInput\n              name={`${namePrefix}AcceptableAaguids`}\n              aria-label={t(\"webAuthnPolicyAcceptableAaguids\")}\n              addButtonLabel=\"authentication:addAaguids\"\n            />\n          </FormGroup>\n        </FormProvider>\n\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isDirty}\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => setupForm(realm)}\n          >\n            {t(\"common:reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { CibaPolicy } from \"./CibaPolicy\";\nimport { OtpPolicy } from \"./OtpPolicy\";\nimport { PasswordPolicy } from \"./PasswordPolicy\";\nimport { WebauthnPolicy } from \"./WebauthnPolicy\";\n\nexport const Policies = () => {\n  const { t } = useTranslation(\"authentication\");\n  const [subTab, setSubTab] = useState(1);\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(\n    async () => {\n      const realm = await adminClient.realms.findOne({ realm: realmName });\n      if (!realm) {\n        throw new Error(t(\"common:notFound\"));\n      }\n      return realm;\n    },\n    (realm) => {\n      setRealm(realm);\n    },\n    []\n  );\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <Tabs\n      activeKey={subTab}\n      onSelect={(_, key) => setSubTab(key as number)}\n      mountOnEnter\n      unmountOnExit\n    >\n      <Tab\n        id=\"passwordPolicy\"\n        eventKey={1}\n        title={<TabTitleText>{t(\"passwordPolicy\")}</TabTitleText>}\n      >\n        <PasswordPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"otpPolicy\"\n        eventKey={2}\n        title={<TabTitleText>{t(\"otpPolicy\")}</TabTitleText>}\n      >\n        <OtpPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPolicy\"\n        eventKey={3}\n        title={<TabTitleText>{t(\"webauthnPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPasswordlessPolicy\"\n        eventKey={4}\n        title={<TabTitleText>{t(\"webauthnPasswordlessPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} isPasswordLess />\n      </Tab>\n      <Tab\n        data-testid=\"tab-ciba-policy\"\n        eventKey={5}\n        title={<TabTitleText>{t(\"cibaPolicy\")}</TabTitleText>}\n      >\n        <CibaPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n    </Tabs>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AlertVariant, Switch } from \"@patternfly/react-core\";\n\nimport type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport type RequiredActionProviderSimpleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderSimpleRepresentation\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { DraggableTable } from \"./components/DraggableTable\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { toKey } from \"../util\";\n\ntype DataType = RequiredActionProviderRepresentation &\n  RequiredActionProviderSimpleRepresentation;\n\ntype Row = {\n  name: string;\n  enabled: boolean;\n  defaultAction: boolean;\n  data: DataType;\n};\n\nexport const RequiredActions = () => {\n  const { t } = useTranslation(\"authentication\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [actions, setActions] = useState<Row[]>();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  useFetch(\n    async () => {\n      const [requiredActions, unregisteredRequiredActions] = await Promise.all([\n        adminClient.authenticationManagement.getRequiredActions(),\n        adminClient.authenticationManagement.getUnregisteredRequiredActions(),\n      ]);\n      return [\n        ...requiredActions.map((a) => ({\n          name: a.name!,\n          enabled: a.enabled!,\n          defaultAction: a.defaultAction!,\n          data: a,\n        })),\n        ...unregisteredRequiredActions.map((a) => ({\n          name: a.name!,\n          enabled: false,\n          defaultAction: false,\n          data: a,\n        })),\n      ];\n    },\n    (actions) => setActions(actions),\n    [key]\n  );\n\n  const isUnregisteredAction = (data: DataType): boolean => {\n    return !(\"alias\" in data);\n  };\n\n  const updateAction = async (\n    action: DataType,\n    field: \"enabled\" | \"defaultAction\"\n  ) => {\n    try {\n      if (field in action) {\n        action[field] = !action[field];\n        await adminClient.authenticationManagement.updateRequiredAction(\n          { alias: action.alias! },\n          action\n        );\n      } else if (isUnregisteredAction(action)) {\n        await adminClient.authenticationManagement.registerRequiredAction({\n          name: action.name,\n          providerId: action.providerId,\n        });\n      }\n      refresh();\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:updatedRequiredActionError\", error);\n    }\n  };\n\n  const executeMove = async (\n    action: RequiredActionProviderRepresentation,\n    times: number\n  ) => {\n    try {\n      const alias = action.alias!;\n      for (let index = 0; index < Math.abs(times); index++) {\n        if (times > 0) {\n          await adminClient.authenticationManagement.lowerRequiredActionPriority(\n            {\n              alias,\n            }\n          );\n        } else {\n          await adminClient.authenticationManagement.raiseRequiredActionPriority(\n            {\n              alias,\n            }\n          );\n        }\n      }\n      refresh();\n\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:updatedRequiredActionError\", error);\n    }\n  };\n\n  if (!actions) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DraggableTable\n      keyField=\"name\"\n      onDragFinish={async (nameDragged, items) => {\n        const keys = actions.map((e) => e.name);\n        const newIndex = items.indexOf(nameDragged);\n        const oldIndex = keys.indexOf(nameDragged);\n        const dragged = actions[oldIndex].data;\n        if (!dragged.alias) return;\n\n        const times = newIndex - oldIndex;\n        executeMove(dragged, times);\n      }}\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"authentication:requiredActions\",\n        },\n        {\n          name: \"enabled\",\n          displayKey: \"common:enabled\",\n          cellRenderer: (row) => (\n            <Switch\n              id={`enable-${toKey(row.name)}`}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={row.enabled}\n              onChange={() => {\n                updateAction(row.data, \"enabled\");\n              }}\n              aria-label={toKey(row.name)}\n            />\n          ),\n        },\n        {\n          name: \"default\",\n          displayKey: \"authentication:setAsDefaultAction\",\n          thTooltipText: \"authentication-help:authDefaultActionTooltip\",\n          cellRenderer: (row) => (\n            <Switch\n              id={`default-${toKey(row.name)}`}\n              label={t(\"common:on\")}\n              isDisabled={!row.enabled}\n              labelOff={!row.enabled ? t(\"disabledOff\") : t(\"common:off\")}\n              isChecked={row.defaultAction}\n              onChange={() => {\n                updateAction(row.data, \"defaultAction\");\n              }}\n              aria-label={toKey(row.name)}\n            />\n          ),\n        },\n      ]}\n      data={actions}\n    />\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport type AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { addTrailingSlash } from \"../util\";\nimport { getAuthorizationHeaders } from \"../utils/getAuthorizationHeaders\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\nimport useToggle from \"../utils/useToggle\";\nimport { BindFlowDialog } from \"./BindFlowDialog\";\nimport { UsedBy } from \"./components/UsedBy\";\nimport { DuplicateFlowModal } from \"./DuplicateFlowModal\";\nimport { Policies } from \"./policies/Policies\";\nimport { RequiredActions } from \"./RequiredActions\";\nimport { AuthenticationTab, toAuthentication } from \"./routes/Authentication\";\nimport { toCreateFlow } from \"./routes/CreateFlow\";\nimport { toFlow } from \"./routes/Flow\";\n\nimport \"./authentication-section.css\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\n\ntype UsedBy = \"SPECIFIC_CLIENTS\" | \"SPECIFIC_PROVIDERS\" | \"DEFAULT\";\n\nexport type AuthenticationType = AuthenticationFlowRepresentation & {\n  usedBy?: { type?: UsedBy; values: string[] };\n  realm: RealmRepresentation;\n};\n\nexport const REALM_FLOWS = new Map<string, string>([\n  [\"browserFlow\", \"browser\"],\n  [\"registrationFlow\", \"registration\"],\n  [\"directGrantFlow\", \"direct grant\"],\n  [\"resetCredentialsFlow\", \"reset credentials\"],\n  [\"clientAuthenticationFlow\", \"clients\"],\n  [\"dockerAuthenticationFlow\", \"docker auth\"],\n]);\n\nconst AliasRenderer = ({ id, alias, usedBy, builtIn }: AuthenticationType) => {\n  const { t } = useTranslation(\"authentication\");\n  const { realm } = useRealm();\n\n  return (\n    <>\n      <Link\n        to={toFlow({\n          realm,\n          id: id!,\n          usedBy: usedBy?.type || \"notInUse\",\n          builtIn: builtIn ? \"builtIn\" : undefined,\n        })}\n        key={`link-${id}`}\n      >\n        {alias}\n      </Link>{\" \"}\n      {builtIn && <Label key={`label-${id}`}>{t(\"buildIn\")}</Label>}\n    </>\n  );\n};\n\nexport default function AuthenticationSection() {\n  const { t } = useTranslation(\"authentication\");\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setRealm(undefined);\n    setKey(key + 1);\n  };\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n  const [selectedFlow, setSelectedFlow] = useState<AuthenticationType>();\n  const [open, toggleOpen] = useToggle();\n  const [bindFlowOpen, toggleBindFlow] = useToggle();\n\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(() => adminClient.realms.findOne({ realm: realmName }), setRealm, [\n    key,\n  ]);\n\n  const loader = async () => {\n    const flowsRequest = await fetch(\n      `${addTrailingSlash(\n        adminClient.baseUrl\n      )}admin/realms/${realmName}/ui-ext/authentication-management/flows`,\n      {\n        method: \"GET\",\n        headers: getAuthorizationHeaders(await adminClient.getAccessToken()),\n      }\n    );\n    const flows = await flowsRequest.json();\n\n    if (!flows) {\n      return [];\n    }\n\n    return sortBy(\n      localeSort<AuthenticationType>(flows, mapByKey(\"alias\")),\n      (flow) => flow.usedBy?.type\n    );\n  };\n\n  const useTab = (tab: AuthenticationTab) =>\n    useRoutableTab(toAuthentication({ realm: realmName, tab }));\n\n  const flowsTab = useTab(\"flows\");\n  const requiredActionsTab = useTab(\"required-actions\");\n  const policiesTab = useTab(\"policies\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"authentication:deleteConfirmFlow\",\n    children: (\n      <Trans i18nKey=\"authentication:deleteConfirmFlowMessage\">\n        {\" \"}\n        <strong>{{ flow: selectedFlow ? selectedFlow.alias : \"\" }}</strong>.\n      </Trans>\n    ),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.authenticationManagement.deleteFlow({\n          flowId: selectedFlow!.id!,\n        });\n        refresh();\n        addAlert(t(\"deleteFlowSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"authentication:deleteFlowError\", error);\n      }\n    },\n  });\n\n  if (!realm) return <KeycloakSpinner />;\n\n  return (\n    <>\n      <DeleteConfirm />\n      {open && (\n        <DuplicateFlowModal\n          name={selectedFlow ? selectedFlow.alias! : \"\"}\n          description={selectedFlow?.description!}\n          toggleDialog={toggleOpen}\n          onComplete={() => {\n            refresh();\n            toggleOpen();\n          }}\n        />\n      )}\n      {bindFlowOpen && (\n        <BindFlowDialog\n          onClose={() => {\n            toggleBindFlow();\n            refresh();\n          }}\n          flowAlias={selectedFlow?.alias!}\n        />\n      )}\n      <ViewHeader\n        titleKey=\"authentication:title\"\n        subKey=\"authentication:authenticationExplain\"\n        helpUrl={helpUrls.authenticationUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          defaultLocation={toAuthentication({ realm: realmName, tab: \"flows\" })}\n        >\n          <Tab\n            data-testid=\"flows\"\n            title={<TabTitleText>{t(\"flows\")}</TabTitleText>}\n            {...flowsTab}\n          >\n            <KeycloakDataTable\n              key={key}\n              loader={loader}\n              ariaLabelKey=\"authentication:title\"\n              searchPlaceholderKey=\"authentication:searchForFlow\"\n              toolbarItem={\n                <ToolbarItem>\n                  <Button\n                    component={(props) => (\n                      <Link\n                        {...props}\n                        to={toCreateFlow({ realm: realmName })}\n                      />\n                    )}\n                  >\n                    {t(\"createFlow\")}\n                  </Button>\n                </ToolbarItem>\n              }\n              actionResolver={({ data }) => [\n                {\n                  title: t(\"duplicate\"),\n                  onClick: () => {\n                    toggleOpen();\n                    setSelectedFlow(data);\n                  },\n                },\n                ...(data.usedBy?.type !== \"DEFAULT\"\n                  ? [\n                      {\n                        title: t(\"bindFlow\"),\n                        onClick: () => {\n                          toggleBindFlow();\n                          setSelectedFlow(data);\n                        },\n                      },\n                    ]\n                  : []),\n                ...(!data.builtIn && !data.usedBy\n                  ? [\n                      {\n                        title: t(\"common:delete\"),\n                        onClick: () => {\n                          setSelectedFlow(data);\n                          toggleDeleteDialog();\n                        },\n                      },\n                    ]\n                  : []),\n              ]}\n              columns={[\n                {\n                  name: \"alias\",\n                  displayKey: \"authentication:flowName\",\n                  cellRenderer: (row) => <AliasRenderer {...row} />,\n                },\n                {\n                  name: \"usedBy\",\n                  displayKey: \"authentication:usedBy\",\n                  cellRenderer: (row) => (\n                    <UsedBy authType={row} realm={realm} />\n                  ),\n                },\n                {\n                  name: \"description\",\n                  displayKey: \"common:description\",\n                },\n              ]}\n              emptyState={\n                <ListEmptyState\n                  message={t(\"emptyEvents\")}\n                  instructions={t(\"emptyEventsInstructions\")}\n                />\n              }\n            />\n          </Tab>\n          <Tab\n            data-testid=\"requiredActions\"\n            title={<TabTitleText>{t(\"requiredActions\")}</TabTitleText>}\n            {...requiredActionsTab}\n          >\n            <RequiredActions />\n          </Tab>\n          <Tab\n            data-testid=\"policies\"\n            title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n            {...policiesTab}\n          >\n            <Policies />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["InputGroupTextVariant","InputGroupText","_a","className","component","children","variant","props","__rest","Component","React.createElement","css","styles","EmptyStatePrimary","BindFlowDialog","flowAlias","onClose","useTranslation","control","handleSubmit","useForm","adminClient","useAdminClient","addAlert","addError","useAlerts","realm","useRealm","open","toggleOpen","useToggle","onSubmit","bindingType","realmRep","AlertVariant","error","jsx","Modal","Button","ButtonVariant","Form","FormGroup","Controller","field","Select","_","value","SelectVariant","REALM_FLOWS","f","key","SelectOption","Label","label","jsxs","Fragment","CheckCircleIcon","UsedByModal","id","isSpecificClient","t","loader","first","max","search","fetchUsedBy","p","TextContent","Text","TextVariants","ModalVariant","KeycloakDataTable","UsedBy","usedBy","toggle","e","Popover","used","index","DuplicateFlowModal","name","description","toggleDialog","onComplete","form","setValue","getValues","navigate","useNavigate","useEffect","newFlow","flow","toFlow","FormProvider","NameDescription","CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES","CIBA_EXPIRES_IN_MIN","CIBA_EXPIRES_IN_MAX","CIBA_INTERVAL_MIN","CIBA_INTERVAL_MAX","CibaPolicy","realmUpdated","register","errors","isValid","isDirty","realmName","backchannelTokenDeliveryModeOpen","setBackchannelTokenDeliveryModeOpen","useState","authRequestedUserHintOpen","setAuthRequestedUserHintOpen","setupForm","convertToFormValues","formValues","convertFormValuesToObject","updatedRealm","PageSection","FormAccess","HelpItem","isExpanded","InputGroup","KeycloakTextInput","ActionGroup","POLICY_TYPES","OTP_HASH_ALGORITHMS","NUMBER_OF_DIGITS","OtpPolicy","reset","localeSort","useLocaleSort","otpType","useWatch","supportedApplications","useMemo","labels","type","Radio","newValue","NumberInput","event","ValidatedOptions","TimeSelector","ChipGroup","Chip","Switch","PolicyRow","configType","defaultValue","displayName","onRemove","useFormContext","Split","SplitItem","MinusCircleIcon","POLICY_SEPARATOR","serializePolicy","policies","submitted","policy","parsePolicy","parsePolicyToken","result","matchingPolicy","token","valueStart","valueEnd","PolicySelect","onSelect","selectedPolicies","passwordPolicies","useServerInfo","setOpen","o","selection","PasswordPolicy","rows","setRows","row","values","v","save","Toolbar","ToolbarContent","ToolbarItem","Divider","r","EmptyState","EmptyStateIcon","PlusCircleIcon","Title","EmptyStateBody","SIGNATURE_ALGORITHMS","ATTESTATION_PREFERENCE","AUTHENTICATOR_ATTACHMENT","RESIDENT_KEY_OPTIONS","USER_VERIFY","WebauthnSelect","options","labelPrefix","isMultiSelect","selectedValue","changedValue","item","option","WebauthnPolicy","isPasswordLess","enabled","useHelp","namePrefix","submittedRealm","QuestionCircleIcon","MultiLineInput","Policies","subTab","setSubTab","setRealm","useFetch","Tabs","Tab","TabTitleText","KeycloakSpinner","RequiredActions","actions","setActions","setKey","refresh","requiredActions","unregisteredRequiredActions","a","isUnregisteredAction","data","updateAction","action","executeMove","times","alias","DraggableTable","nameDragged","items","keys","newIndex","oldIndex","dragged","toKey","AliasRenderer","builtIn","Link","AuthenticationSection","selectedFlow","setSelectedFlow","bindFlowOpen","toggleBindFlow","flows","addTrailingSlash","getAuthorizationHeaders","sortBy","mapByKey","useTab","tab","useRoutableTab","toAuthentication","flowsTab","requiredActionsTab","policiesTab","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","Trans","ViewHeader","helpUrls","RoutableTabs","toCreateFlow","ListEmptyState"],"mappings":"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","x_google_ignoreList":[0,1]}