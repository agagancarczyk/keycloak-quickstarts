{"version":3,"file":"UserFederationLdapForm-17767f2d.js","sources":["../../src/user-federation/ldap/LdapSettingsConnection.tsx","../../src/user-federation/ldap/LdapSettingsAdvanced.tsx","../../src/user-federation/ldap/LdapSettingsGeneral.tsx","../../src/user-federation/ldap/LdapSettingsKerberosIntegration.tsx","../../src/user-federation/ldap/LdapSettingsSearching.tsx","../../src/user-federation/ldap/LdapSettingsSynchronization.tsx","../../src/user-federation/UserFederationLdapForm.tsx"],"sourcesContent":["// @ts-nocheck\nimport type TestLdapConnectionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/testLdapConnection\";\nimport {\n  AlertVariant,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { get, isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport type LdapSettingsConnectionProps = {\n  form: UseFormReturn;\n  id?: string;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nconst testLdapProperties: Array<keyof TestLdapConnectionRepresentation> = [\n  \"connectionUrl\",\n  \"bindDn\",\n  \"bindCredential\",\n  \"useTruststoreSpi\",\n  \"connectionTimeout\",\n  \"startTls\",\n  \"authType\",\n];\n\ntype TestTypes = \"testConnection\" | \"testAuthentication\";\n\nexport const convertFormToSettings = (form: UseFormReturn) => {\n  const settings: TestLdapConnectionRepresentation = {};\n\n  testLdapProperties.forEach((key) => {\n    const value = get(form.getValues(), `config.${key}`);\n    settings[key] = Array.isArray(value) ? value[0] : \"\";\n  });\n\n  return settings;\n};\n\nexport const LdapSettingsConnection = ({\n  form,\n  id,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsConnectionProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const edit = !!id;\n\n  const testLdap = async (testType: TestTypes) => {\n    try {\n      const settings = convertFormToSettings(form);\n      await adminClient.realms.testLDAPConnection(\n        { realm },\n        { ...settings, action: testType, componentId: id }\n      );\n      addAlert(t(\"testSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"user-federation:testError\", error);\n    }\n  };\n\n  const [isTruststoreSpiDropdownOpen, setIsTruststoreSpiDropdownOpen] =\n    useState(false);\n\n  const [isBindTypeDropdownOpen, setIsBindTypeDropdownOpen] = useState(false);\n\n  const ldapBindType = useWatch({\n    control: form.control,\n    name: \"config.authType\",\n    defaultValue: [\"simple\"],\n  });\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"connectionAndAuthenticationSettings\")}\n          description={helpText(\n            \"ldapConnectionAndAuthorizationSettingsDescription\"\n          )}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"connectionURL\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\n                \"user-federation-help:consoleDisplayConnectionUrlHelp\"\n              )}\n              fieldLabelId=\"user-federation:connectionURL\"\n            />\n          }\n          fieldId=\"kc-ui-connection-url\"\n          isRequired\n          validated={\n            form.formState.errors.config?.connectionUrl?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.connectionUrl?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            type=\"url\"\n            id=\"kc-ui-connection-url\"\n            data-testid=\"ldap-connection-url\"\n            validated={\n              form.formState.errors.config?.connectionUrl?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.connectionUrl.0\", {\n              required: {\n                value: true,\n                message: t(\"validateConnectionUrl\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"enableStartTls\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:enableStartTlsHelp\")}\n              fieldLabelId=\"user-federation:enableStartTls\"\n            />\n          }\n          fieldId=\"kc-enable-start-tls\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.startTls\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-enable-start-tls\"}\n                data-testid=\"enable-start-tls\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"enableStartTls\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"useTruststoreSpi\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:useTruststoreSpiHelp\")}\n              fieldLabelId=\"user-federation:useTruststoreSpi\"\n            />\n          }\n          fieldId=\"kc-use-truststore-spi\"\n        >\n          <Controller\n            name=\"config.useTruststoreSpi[0]\"\n            control={form.control}\n            defaultValue=\"ldapsOnly\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-use-truststore-spi\"\n                onToggle={() =>\n                  setIsTruststoreSpiDropdownOpen(!isTruststoreSpiDropdownOpen)\n                }\n                isOpen={isTruststoreSpiDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  setIsTruststoreSpiDropdownOpen(false);\n                }}\n                selections={field.value}\n              >\n                <SelectOption value=\"always\">{t(\"always\")}</SelectOption>\n                <SelectOption value=\"ldapsOnly\">{t(\"onlyLdaps\")}</SelectOption>\n                <SelectOption value=\"never\">{t(\"never\")}</SelectOption>\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"connectionPooling\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:connectionPoolingHelp\")}\n              fieldLabelId=\"user-federation:connectionPooling\"\n            />\n          }\n          fieldId=\"kc-connection-pooling\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.connectionPooling\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-connection-pooling\"}\n                data-testid=\"connection-pooling\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"connectionPooling\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"connectionTimeout\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:connectionTimeoutHelp\")}\n              fieldLabelId=\"user-federation:consoleTimeout\"\n            />\n          }\n          fieldId=\"kc-ui-connection-timeout\"\n        >\n          <KeycloakTextInput\n            type=\"number\"\n            min={0}\n            id=\"kc-ui-connection-timeout\"\n            data-testid=\"connection-timeout\"\n            {...form.register(\"config.connectionTimeout.0\")}\n          />\n        </FormGroup>\n        <FormGroup fieldId=\"kc-test-connection-button\">\n          <Button\n            variant=\"secondary\"\n            id=\"kc-test-connection-button\"\n            data-testid=\"test-connection-button\"\n            onClick={() => testLdap(\"testConnection\")}\n          >\n            {t(\"common:testConnection\")}\n          </Button>\n        </FormGroup>\n        <FormGroup\n          label={t(\"bindType\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:bindTypeHelp\")}\n              fieldLabelId=\"user-federation:bindType\"\n            />\n          }\n          fieldId=\"kc-bind-type\"\n          isRequired\n        >\n          <Controller\n            name=\"config.authType[0]\"\n            defaultValue=\"simple\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-bind-type\"\n                required\n                onToggle={() =>\n                  setIsBindTypeDropdownOpen(!isBindTypeDropdownOpen)\n                }\n                isOpen={isBindTypeDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsBindTypeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                data-testid=\"ldap-bind-type\"\n              >\n                <SelectOption value=\"simple\" />\n                <SelectOption value=\"none\" />\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n\n        {isEqual(ldapBindType, [\"simple\"]) && (\n          <>\n            <FormGroup\n              label={t(\"bindDn\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"user-federation-help:bindDnHelp\")}\n                  fieldLabelId=\"user-federation:bindDn\"\n                />\n              }\n              fieldId=\"kc-ui-bind-dn\"\n              helperTextInvalid={t(\"validateBindDn\")}\n              validated={\n                form.formState.errors.config?.bindDn\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              isRequired\n            >\n              <KeycloakTextInput\n                type=\"text\"\n                id=\"kc-ui-bind-dn\"\n                data-testid=\"ldap-bind-dn\"\n                validated={\n                  form.formState.errors.config?.bindDn\n                    ? ValidatedOptions.error\n                    : ValidatedOptions.default\n                }\n                {...form.register(\"config.bindDn.0\", { required: true })}\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"bindCredentials\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"user-federation-help:bindCredentialsHelp\")}\n                  fieldLabelId=\"user-federation:bindCredentials\"\n                />\n              }\n              fieldId=\"kc-ui-bind-credentials\"\n              helperTextInvalid={t(\"validateBindCredentials\")}\n              validated={\n                form.formState.errors.config?.bindCredential\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              isRequired\n            >\n              <PasswordInput\n                hasReveal={!edit}\n                isRequired\n                id=\"kc-ui-bind-credentials\"\n                data-testid=\"ldap-bind-credentials\"\n                validated={\n                  form.formState.errors.config?.bindCredential\n                    ? ValidatedOptions.error\n                    : ValidatedOptions.default\n                }\n                {...form.register(\"config.bindCredential.0\", {\n                  required: true,\n                })}\n              />\n            </FormGroup>\n          </>\n        )}\n        <FormGroup fieldId=\"kc-test-auth-button\">\n          <Button\n            variant=\"secondary\"\n            id=\"kc-test-auth-button\"\n            data-testid=\"test-auth-button\"\n            onClick={() => testLdap(\"testAuthentication\")}\n          >\n            {t(\"testAuthentication\")}\n          </Button>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import { Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormToSettings } from \"./LdapSettingsConnection\";\n\nexport type LdapSettingsAdvancedProps = {\n  id?: string;\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nconst PASSWORD_MODIFY_OID = \"1.3.6.1.4.1.4203.1.11.1\";\n\nexport const LdapSettingsAdvanced = ({\n  id,\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsAdvancedProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n\n  const testLdap = async () => {\n    if (!(await form.trigger())) return;\n    try {\n      const settings = convertFormToSettings(form);\n      const ldapOids = await adminClient.realms.ldapServerCapabilities(\n        { realm },\n        { ...settings, componentId: id }\n      );\n      addAlert(t(\"testSuccess\"));\n      const passwordModifyOid = ldapOids.filter(\n        (id: { oid: string }) => id.oid === PASSWORD_MODIFY_OID\n      );\n      form.setValue(\"config.usePasswordModifyExtendedOp\", [\n        (passwordModifyOid.length > 0).toString(),\n      ]);\n    } catch (error) {\n      addError(\"user-federation:testError\", error);\n    }\n  };\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"advancedSettings\")}\n          description={helpText(\"ldapAdvancedSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"enableLdapv3Password\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:enableLdapv3PasswordHelp\")}\n              fieldLabelId=\"user-federation:enableLdapv3Password\"\n            />\n          }\n          fieldId=\"kc-enable-ldapv3-password\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.usePasswordModifyExtendedOp\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-enable-ldapv3-password\"}\n                data-testid=\"ldapv3-password\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"enableLdapv3Password\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"validatePasswordPolicy\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:validatePasswordPolicyHelp\")}\n              fieldLabelId=\"user-federation:validatePasswordPolicy\"\n            />\n          }\n          fieldId=\"kc-validate-password-policy\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.validatePasswordPolicy\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-validate-password-policy\"}\n                data-testid=\"password-policy\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"validatePasswordPolicy\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"trustEmail\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:trustEmailHelp\")}\n              fieldLabelId=\"user-federation:trustEmail\"\n            />\n          }\n          fieldId=\"kc-trust-email\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.trustEmail\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-trust-email\"}\n                data-testid=\"trust-email\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"trustEmail\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup fieldId=\"query-extensions\">\n          <Button\n            variant=\"secondary\"\n            id=\"query-extensions\"\n            data-testid=\"query-extensions\"\n            onClick={testLdap}\n          >\n            {t(\"queryExtensions\")}\n          </Button>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport type LdapSettingsGeneralProps = {\n  form: UseFormReturn<ComponentRepresentation>;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n  vendorEdit?: boolean;\n};\n\nexport const LdapSettingsGeneral = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n  vendorEdit = false,\n}: LdapSettingsGeneralProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm }),\n    (result) => form.setValue(\"parentId\", result!.id),\n    []\n  );\n  const [isVendorDropdownOpen, setIsVendorDropdownOpen] = useState(false);\n\n  const setVendorDefaultValues = () => {\n    switch (form.getValues(\"config.vendor[0]\")) {\n      case \"ad\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"cn\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"cn\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"objectGUID\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"person, organizationalPerson, user\"\n        );\n        break;\n      case \"rhds\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"nsuniqueid\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\"\n        );\n        break;\n      case \"tivoli\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"uniqueidentifier\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\"\n        );\n        break;\n      case \"edirectory\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"guid\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\"\n        );\n        break;\n      case \"other\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"entryUUID\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\"\n        );\n        break;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"generalOptions\")}\n          description={helpText(\"ldapGeneralOptionsSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"uiDisplayName\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:uiDisplayNameHelp\")}\n              fieldLabelId=\"user-federation:uiDisplayName\"\n            />\n          }\n          fieldId=\"kc-ui-display-name\"\n          isRequired\n          validated={form.formState.errors.name ? \"error\" : \"default\"}\n          helperTextInvalid={form.formState.errors.name?.message}\n        >\n          {/* These hidden fields are required so data object written back matches data retrieved */}\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-provider-id\"\n            defaultValue=\"ldap\"\n            {...form.register(\"providerId\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-provider-type\"\n            defaultValue=\"org.keycloak.storage.UserStorageProvider\"\n            {...form.register(\"providerType\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-parentId\"\n            defaultValue={realm}\n            {...form.register(\"parentId\")}\n          />\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-ui-display-name\"\n            defaultValue=\"ldap\"\n            data-testid=\"ldap-name\"\n            validated={form.formState.errors.name ? \"error\" : \"default\"}\n            {...form.register(\"name\", {\n              required: {\n                value: true,\n                message: `${t(\"validateName\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"vendor\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:vendorHelp\")}\n              fieldLabelId=\"user-federation:vendor\"\n            />\n          }\n          fieldId=\"kc-vendor\"\n          isRequired\n        >\n          <Controller\n            name=\"config.vendor[0]\"\n            defaultValue=\"ad\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                isDisabled={!!vendorEdit}\n                toggleId=\"kc-vendor\"\n                required\n                onToggle={() => setIsVendorDropdownOpen(!isVendorDropdownOpen)}\n                isOpen={isVendorDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsVendorDropdownOpen(false);\n                  setVendorDefaultValues();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n              >\n                <SelectOption key={0} value=\"ad\" isPlaceholder>\n                  Active Directory\n                </SelectOption>\n                <SelectOption key={1} value=\"rhds\">\n                  Red Hat Directory Server\n                </SelectOption>\n                <SelectOption key={2} value=\"tivoli\">\n                  Tivoli\n                </SelectOption>\n                <SelectOption key={3} value=\"edirectory\">\n                  Novell eDirectory\n                </SelectOption>\n                <SelectOption key={4} value=\"other\">\n                  Other\n                </SelectOption>\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","// @ts-nocheck\nimport { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsKerberosIntegrationProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsKerberosIntegration = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsKerberosIntegrationProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const allowKerberosAuth: [string] = useWatch({\n    control: form.control,\n    name: \"config.allowKerberosAuthentication\",\n    defaultValue: [\"false\"],\n  });\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"kerberosIntegration\")}\n          description={helpText(\"ldapKerberosSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"allowKerberosAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\n                \"user-federation-help:allowKerberosAuthenticationHelp\"\n              )}\n              fieldLabelId=\"user-federation:allowKerberosAuthentication\"\n            />\n          }\n          fieldId=\"kc-allow-kerberos-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.allowKerberosAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-allow-kerberos-authentication\"\n                data-testid=\"allow-kerberos-auth\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"allowKerberosAuthentication\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        {allowKerberosAuth[0] === \"true\" && (\n          <>\n            <FormGroup\n              label={t(\"kerberosRealm\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"user-federation-help:kerberosRealmHelp\")}\n                  fieldLabelId=\"user-federation:kerberosRealm\"\n                />\n              }\n              fieldId=\"kc-kerberos-realm\"\n              isRequired\n              validated={\n                form.formState.errors.config?.kerberosRealm?.[0]\n                  ? \"error\"\n                  : \"default\"\n              }\n              helperTextInvalid={\n                form.formState.errors.config?.kerberosRealm?.[0].message\n              }\n            >\n              <KeycloakTextInput\n                isRequired\n                id=\"kc-kerberos-realm\"\n                data-testid=\"kerberos-realm\"\n                validated={\n                  form.formState.errors.config?.kerberosRealm?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.kerberosRealm.0\", {\n                  required: {\n                    value: true,\n                    message: t(\"validateRealm\").toString(),\n                  },\n                })}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"serverPrincipal\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"user-federation-help:serverPrincipalHelp\")}\n                  fieldLabelId=\"user-federation:serverPrincipal\"\n                />\n              }\n              fieldId=\"kc-server-principal\"\n              isRequired\n              validated={\n                form.formState.errors.config?.serverPrincipal?.[0]\n                  ? \"error\"\n                  : \"default\"\n              }\n              helperTextInvalid={\n                form.formState.errors.config?.serverPrincipal?.[0].message\n              }\n            >\n              <KeycloakTextInput\n                isRequired\n                id=\"kc-server-principal\"\n                data-testid=\"kerberos-principal\"\n                validated={\n                  form.formState.errors.config?.serverPrincipal?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.serverPrincipal.0\", {\n                  required: {\n                    value: true,\n                    message: `${t(\"validateServerPrincipal\")}`,\n                  },\n                })}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"keyTab\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"user-federation-help:keyTabHelp\")}\n                  fieldLabelId=\"user-federation:keyTab\"\n                />\n              }\n              fieldId=\"kc-key-tab\"\n              isRequired\n              validated={\n                form.formState.errors.config?.keyTab?.[0] ? \"error\" : \"default\"\n              }\n              helperTextInvalid={\n                form.formState.errors.config?.keyTab?.[0].message\n              }\n            >\n              <KeycloakTextInput\n                isRequired\n                id=\"kc-key-tab\"\n                data-testid=\"kerberos-keytab\"\n                validated={\n                  form.formState.errors.config?.keyTab?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.keyTab.0\", {\n                  required: {\n                    value: true,\n                    message: `${t(\"validateKeyTab\")}`,\n                  },\n                })}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"debug\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"user-federation-help:debugHelp\")}\n                  fieldLabelId=\"user-federation:debug\"\n                />\n              }\n              fieldId=\"kc-debug\"\n              hasNoPaddingTop\n            >\n              {\" \"}\n              <Controller\n                name=\"config.debug\"\n                defaultValue={[\"false\"]}\n                control={form.control}\n                render={({ field }) => (\n                  <Switch\n                    id=\"kc-debug\"\n                    data-testid=\"debug\"\n                    isDisabled={false}\n                    onChange={(value) => field.onChange([`${value}`])}\n                    isChecked={field.value[0] === \"true\"}\n                    label={t(\"common:on\")}\n                    labelOff={t(\"common:off\")}\n                    aria-label={t(\"debug\")}\n                  />\n                )}\n              ></Controller>\n            </FormGroup>\n          </>\n        )}\n        <FormGroup\n          label={t(\"useKerberosForPasswordAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\n                \"user-federation-help:useKerberosForPasswordAuthenticationHelp\"\n              )}\n              fieldLabelId=\"user-federation:useKerberosForPasswordAuthentication\"\n            />\n          }\n          fieldId=\"kc-use-kerberos-password-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.useKerberosForPasswordAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-use-kerberos-password-authentication\"\n                data-testid=\"use-kerberos-pw-auth\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"useKerberosForPasswordAuthentication\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","// @ts-nocheck\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsSearchingProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsSearching = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsSearchingProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const [isSearchScopeDropdownOpen, setIsSearchScopeDropdownOpen] =\n    useState(false);\n  const [isEditModeDropdownOpen, setIsEditModeDropdownOpen] = useState(false);\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"ldapSearchingAndUpdatingSettings\")}\n          description={helpText(\"ldapSearchingAndUpdatingSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"editMode\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:editModeLdapHelp\")}\n              fieldLabelId=\"user-federation:editMode\"\n            />\n          }\n          fieldId=\"kc-edit-mode\"\n          isRequired\n          validated={\n            form.formState.errors.config?.editMode?.[0] ? \"error\" : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.editMode?.[0].message\n          }\n        >\n          <Controller\n            name=\"config.editMode[0]\"\n            defaultValue=\"\"\n            control={form.control}\n            rules={{\n              required: { value: true, message: t(\"validateEditMode\") },\n            }}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-edit-mode\"\n                required\n                onToggle={() =>\n                  setIsEditModeDropdownOpen(!isEditModeDropdownOpen)\n                }\n                isOpen={isEditModeDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  setIsEditModeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                validated={\n                  form.formState.errors.config?.editMode?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n              >\n                <SelectOption value=\"\" isPlaceholder />\n                <SelectOption value=\"READ_ONLY\" />\n                <SelectOption value=\"WRITABLE\" />\n                <SelectOption value=\"UNSYNCED\" />\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"usersDN\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:usersDNHelp\")}\n              fieldLabelId=\"user-federation:usersDn\"\n            />\n          }\n          fieldId=\"kc-ui-users-dn\"\n          isRequired\n          validated={\n            form.formState.errors.config?.usersDn?.[0] ? \"error\" : \"default\"\n          }\n          helperTextInvalid={form.formState.errors.config?.usersDn?.[0].message}\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"\"\n            id=\"kc-ui-users-dn\"\n            data-testid=\"ldap-users-dn\"\n            validated={\n              form.formState.errors.config?.usersDn?.[0] ? \"error\" : \"default\"\n            }\n            {...form.register(\"config.usersDn.0\", {\n              required: {\n                value: true,\n                message: t(\"validateUsersDn\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"usernameLdapAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:usernameLdapAttributeHelp\")}\n              fieldLabelId=\"user-federation:usernameLdapAttribute\"\n            />\n          }\n          fieldId=\"kc-username-ldap-attribute\"\n          isRequired\n          validated={\n            form.formState.errors.config?.usernameLDAPAttribute?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.usernameLDAPAttribute?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"cn\"\n            id=\"kc-username-ldap-attribute\"\n            data-testid=\"ldap-username-attribute\"\n            validated={\n              form.formState.errors.config?.usernameLDAPAttribute?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.usernameLDAPAttribute.0\", {\n              required: {\n                value: true,\n                message: `${t(\"validateUsernameLDAPAttribute\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"rdnLdapAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:rdnLdapAttributeHelp\")}\n              fieldLabelId=\"user-federation:rdnLdapAttribute\"\n            />\n          }\n          fieldId=\"kc-rdn-ldap-attribute\"\n          isRequired\n          validated={\n            form.formState.errors.config?.rdnLDAPAttribute?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.rdnLDAPAttribute?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"cn\"\n            id=\"kc-rdn-ldap-attribute\"\n            data-testid=\"ldap-rdn-attribute\"\n            validated={\n              form.formState.errors.config?.rdnLDAPAttribute?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.rdnLDAPAttribute.0\", {\n              required: {\n                value: true,\n                message: `${t(\"validateRdnLdapAttribute\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"uuidLdapAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:uuidLdapAttributeHelp\")}\n              fieldLabelId=\"user-federation:uuidLdapAttribute\"\n            />\n          }\n          fieldId=\"kc-uuid-ldap-attribute\"\n          isRequired\n          validated={\n            form.formState.errors.config?.uuidLDAPAttribute?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.uuidLDAPAttribute?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"objectGUID\"\n            id=\"kc-uuid-ldap-attribute\"\n            data-testid=\"ldap-uuid-attribute\"\n            validated={\n              form.formState.errors.config?.uuidLDAPAttribute?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.uuidLDAPAttribute.0\", {\n              required: {\n                value: true,\n                message: `${t(\"validateUuidLDAPAttribute\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"userObjectClasses\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:userObjectClassesHelp\")}\n              fieldLabelId=\"user-federation:userObjectClasses\"\n            />\n          }\n          fieldId=\"kc-user-object-classes\"\n          isRequired\n          validated={\n            form.formState.errors.config?.userObjectClasses?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.userObjectClasses?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"person, organizationalPerson, user\"\n            id=\"kc-user-object-classes\"\n            data-testid=\"ldap-user-object-classes\"\n            validated={\n              form.formState.errors.config?.userObjectClasses?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.userObjectClasses.0\", {\n              required: {\n                value: true,\n                message: t(\"validateUserObjectClasses\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"userLdapFilter\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:userLdapFilterHelp\")}\n              fieldLabelId=\"user-federation:userLdapFilter\"\n            />\n          }\n          fieldId=\"kc-user-ldap-filter\"\n          validated={\n            form.formState.errors.config?.customUserSearchFilter?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.customUserSearchFilter?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            id=\"kc-user-ldap-filter\"\n            data-testid=\"user-ldap-filter\"\n            validated={\n              form.formState.errors.config?.customUserSearchFilter?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.customUserSearchFilter.0\", {\n              pattern: {\n                value: /(\\(.*\\))$/,\n                message: t(\"validateCustomUserSearchFilter\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"searchScope\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:searchScopeHelp\")}\n              fieldLabelId=\"user-federation:searchScope\"\n            />\n          }\n          fieldId=\"kc-search-scope\"\n        >\n          <Controller\n            name=\"config.searchScope[0]\"\n            defaultValue=\"\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-search-scope\"\n                required\n                onToggle={() =>\n                  setIsSearchScopeDropdownOpen(!isSearchScopeDropdownOpen)\n                }\n                isOpen={isSearchScopeDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsSearchScopeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n              >\n                <SelectOption key={0} value=\"1\" isPlaceholder>\n                  {t(\"oneLevel\")}\n                </SelectOption>\n                <SelectOption key={1} value=\"2\">\n                  {t(\"subtree\")}\n                </SelectOption>\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"readTimeout\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:readTimeoutHelp\")}\n              fieldLabelId=\"user-federation:readTimeout\"\n            />\n          }\n          fieldId=\"kc-read-timeout\"\n        >\n          <KeycloakTextInput\n            type=\"number\"\n            min={0}\n            id=\"kc-read-timeout\"\n            data-testid=\"ldap-read-timeout\"\n            {...form.register(\"config.readTimeout.0\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"pagination\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:paginationHelp\")}\n              fieldLabelId=\"user-federation:pagination\"\n            />\n          }\n          fieldId=\"kc-ui-pagination\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.pagination\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-ui-pagination\"\n                data-testid=\"ui-pagination\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"pagination\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsSynchronizationProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsSynchronization = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsSynchronizationProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const watchPeriodicSync = form.watch(\"config.periodicFullSync\", false);\n  const watchChangedSync = form.watch(\"config.periodicChangedUsersSync\", false);\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"synchronizationSettings\")}\n          description={helpText(\"ldapSynchronizationSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"importUsers\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:importUsersHelp\")}\n              fieldLabelId=\"user-federation:importUsers\"\n            />\n          }\n          fieldId=\"kc-import-users\"\n        >\n          <Controller\n            name=\"config.importEnabled\"\n            defaultValue={[\"true\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-import-users\"\n                data-testid=\"import-users\"\n                name=\"importEnabled\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                isDisabled={false}\n                aria-label={t(\"importUsers\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"syncRegistrations\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:syncRegistrations\")}\n              fieldLabelId=\"user-federation:syncRegistrations\"\n            />\n          }\n          fieldId=\"syncRegistrations\"\n        >\n          <Controller\n            name=\"config.syncRegistrations\"\n            defaultValue={[\"true\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"syncRegistrations\"\n                data-testid=\"syncRegistrations\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                aria-label={t(\"syncRegistrations\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"batchSize\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:batchSizeHelp\")}\n              fieldLabelId=\"user-federation:batchSize\"\n            />\n          }\n          fieldId=\"kc-batch-size\"\n        >\n          <KeycloakTextInput\n            type=\"number\"\n            min={0}\n            id=\"kc-batch-size\"\n            data-testid=\"batch-size\"\n            {...form.register(\"config.batchSizeForSync.0\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"periodicFullSync\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:periodicFullSyncHelp\")}\n              fieldLabelId=\"user-federation:periodicFullSync\"\n            />\n          }\n          fieldId=\"kc-periodic-full-sync\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.periodicFullSync\"\n            defaultValue={false}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-periodic-full-sync\"\n                data-testid=\"periodic-full-sync\"\n                isDisabled={false}\n                onChange={(value) => field.onChange(value)}\n                isChecked={field.value === true}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"periodicFullSync\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        {watchPeriodicSync && (\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"fullSyncPeriod\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"user-federation-help:fullSyncPeriodHelp\")}\n                fieldLabelId=\"user-federation:fullSyncPeriod\"\n              />\n            }\n            fieldId=\"kc-full-sync-period\"\n          >\n            <KeycloakTextInput\n              type=\"number\"\n              min={-1}\n              defaultValue={604800}\n              id=\"kc-full-sync-period\"\n              data-testid=\"full-sync-period\"\n              {...form.register(\"config.fullSyncPeriod.0\")}\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={t(\"periodicChangedUsersSync\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"user-federation-help:periodicChangedUsersSyncHelp\")}\n              fieldLabelId=\"user-federation:periodicChangedUsersSync\"\n            />\n          }\n          fieldId=\"kc-periodic-changed-users-sync\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.periodicChangedUsersSync\"\n            defaultValue={false}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-periodic-changed-users-sync\"\n                data-testid=\"periodic-changed-users-sync\"\n                isDisabled={false}\n                onChange={(value) => field.onChange(value)}\n                isChecked={field.value === true}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"periodicChangedUsersSync\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        {watchChangedSync && (\n          <FormGroup\n            label={t(\"changedUsersSyncPeriod\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"user-federation-help:changedUsersSyncHelp\")}\n                fieldLabelId=\"user-federation:changedUsersSyncPeriod\"\n              />\n            }\n            fieldId=\"kc-changed-users-sync-period\"\n            hasNoPaddingTop\n          >\n            <KeycloakTextInput\n              type=\"number\"\n              min={-1}\n              defaultValue={86400}\n              id=\"kc-changed-users-sync-period\"\n              data-testid=\"changed-users-sync-period\"\n              {...form.register(\"config.changedSyncPeriod.0\")}\n            />\n          </FormGroup>\n        )}\n      </FormAccess>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { ActionGroup, Button, Form } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { LdapSettingsAdvanced } from \"./ldap/LdapSettingsAdvanced\";\nimport { LdapSettingsConnection } from \"./ldap/LdapSettingsConnection\";\nimport { LdapSettingsGeneral } from \"./ldap/LdapSettingsGeneral\";\nimport { LdapSettingsKerberosIntegration } from \"./ldap/LdapSettingsKerberosIntegration\";\nimport { LdapSettingsSearching } from \"./ldap/LdapSettingsSearching\";\nimport { LdapSettingsSynchronization } from \"./ldap/LdapSettingsSynchronization\";\nimport { toUserFederation } from \"./routes/UserFederation\";\nimport { SettingsCache } from \"./shared/SettingsCache\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\n\nexport type LdapComponentRepresentation = ComponentRepresentation & {\n  config?: {\n    periodicChangedUsersSync?: boolean;\n    periodicFullSync?: boolean;\n  };\n};\n\nexport type UserFederationLdapFormProps = {\n  id?: string;\n  onSubmit: (formData: LdapComponentRepresentation) => void;\n};\n\nexport const UserFederationLdapForm = ({\n  id,\n  onSubmit,\n}: UserFederationLdapFormProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const form = useFormContext<LdapComponentRepresentation>();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const kerberosDisabled =\n    useServerInfo().profileInfo?.disabledFeatures?.includes(\"KERBEROS\");\n\n  return (\n    <>\n      <ScrollForm\n        sections={[\n          {\n            title: t(\"generalOptions\"),\n            panel: <LdapSettingsGeneral form={form} vendorEdit={!!id} />,\n          },\n          {\n            title: t(\"connectionAndAuthenticationSettings\"),\n            panel: <LdapSettingsConnection form={form} id={id} />,\n          },\n          {\n            title: t(\"ldapSearchingAndUpdatingSettings\"),\n            panel: <LdapSettingsSearching form={form} />,\n          },\n          {\n            title: t(\"synchronizationSettings\"),\n            panel: <LdapSettingsSynchronization form={form} />,\n          },\n          {\n            title: t(\"kerberosIntegration\"),\n            panel: <LdapSettingsKerberosIntegration form={form} />,\n            isHidden: kerberosDisabled,\n          },\n          { title: t(\"cacheSettings\"), panel: <SettingsCache form={form} /> },\n          {\n            title: t(\"advancedSettings\"),\n            panel: <LdapSettingsAdvanced form={form} id={id} />,\n          },\n        ]}\n      />\n      <Form onSubmit={form.handleSubmit(onSubmit)}>\n        <ActionGroup className=\"keycloak__form_actions\">\n          <Button\n            isDisabled={!form.formState.isDirty}\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"ldap-save\"\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            variant=\"link\"\n            onClick={() => navigate(toUserFederation({ realm }))}\n            data-testid=\"ldap-cancel\"\n          >\n            {t(\"common:cancel\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </>\n  );\n};\n\nexport function serializeFormData(\n  formData: LdapComponentRepresentation\n): LdapComponentRepresentation {\n  const { config } = formData;\n\n  if (config?.periodicChangedUsersSync !== undefined) {\n    if (config.periodicChangedUsersSync === false) {\n      config.changedSyncPeriod = [\"-1\"];\n    }\n    delete config.periodicChangedUsersSync;\n  }\n\n  if (config?.periodicFullSync !== undefined) {\n    if (config.periodicFullSync === false) {\n      config.fullSyncPeriod = [\"-1\"];\n    }\n    delete config.periodicFullSync;\n  }\n\n  return formData;\n}\n"],"names":["testLdapProperties","convertFormToSettings","form","settings","key","value","get","LdapSettingsConnection","id","showSectionHeading","showSectionDescription","t","useTranslation","helpText","adminClient","useAdminClient","realm","useRealm","addAlert","addError","useAlerts","edit","testLdap","testType","AlertVariant","error","isTruststoreSpiDropdownOpen","setIsTruststoreSpiDropdownOpen","useState","isBindTypeDropdownOpen","setIsBindTypeDropdownOpen","ldapBindType","useWatch","jsxs","Fragment","jsx","WizardSectionHeader","FormAccess","FormGroup","HelpItem","KeycloakTextInput","Controller","field","Switch","Select","_","SelectOption","Button","SelectVariant","isEqual","ValidatedOptions","PasswordInput","PASSWORD_MODIFY_OID","LdapSettingsAdvanced","ldapOids","passwordModifyOid","LdapSettingsGeneral","vendorEdit","useFetch","result","isVendorDropdownOpen","setIsVendorDropdownOpen","setVendorDefaultValues","LdapSettingsKerberosIntegration","allowKerberosAuth","LdapSettingsSearching","isSearchScopeDropdownOpen","setIsSearchScopeDropdownOpen","isEditModeDropdownOpen","setIsEditModeDropdownOpen","LdapSettingsSynchronization","watchPeriodicSync","watchChangedSync","UserFederationLdapForm","onSubmit","useFormContext","navigate","useNavigate","kerberosDisabled","useServerInfo","ScrollForm","SettingsCache","Form","ActionGroup","toUserFederation","serializeFormData","formData","config"],"mappings":"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"}