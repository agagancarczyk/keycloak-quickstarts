{"version":3,"file":"DynamicComponents-72877b30.js","sources":["../../src/components/dynamic/BooleanComponent.tsx","../../src/components/dynamic/ClientSelectComponent.tsx","../../src/components/dynamic/FileComponent.tsx","../../src/components/dynamic/GroupComponent.tsx","../../src/components/dynamic/ListComponent.tsx","../../src/components/dynamic/MapComponent.tsx","../../src/components/dynamic/MultivaluedListComponent.tsx","../../src/components/dynamic/MultivaluedStringComponent.tsx","../../src/components/dynamic/PasswordComponent.tsx","../../src/components/dynamic/RoleComponent.tsx","../../src/components/dynamic/ScriptComponent.tsx","../../src/components/dynamic/StringComponent.tsx","../../src/components/dynamic/TextComponent.tsx","../../src/components/dynamic/components.ts","../../src/components/dynamic/DynamicComponents.tsx"],"sourcesContent":["import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const BooleanComponent = ({\n  name,\n  label,\n  helpText,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      hasNoPaddingTop\n      label={t(label!)}\n      fieldId={name!}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n    >\n      <Controller\n        name={convertToName(name!)}\n        data-testid={name}\n        defaultValue={false}\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id={name!}\n            isDisabled={isDisabled}\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n            isChecked={\n              field.value === \"true\" ||\n              field.value === true ||\n              field.value[0] === \"true\"\n            }\n            onChange={(value) => field.onChange(\"\" + value)}\n            data-testid={name}\n            aria-label={t(label!)}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type { ComponentProps } from \"./components\";\nimport { ClientSelect } from \"../client/ClientSelect\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ClientSelectComponent = (props: ComponentProps) => {\n  return (\n    <ClientSelect\n      {...props}\n      name={convertToName(props.name!)}\n      namespace=\"dynamic\"\n    />\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { FileUpload } from \"../json-file-upload/patternfly/FileUpload\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const FileComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n  const [filename, setFilename] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={convertToName(name!)}\n        control={control}\n        defaultValue={defaultValue || \"\"}\n        render={({ field }) => (\n          <FileUpload\n            id={name!}\n            value={field.value}\n            type=\"text\"\n            filename={filename}\n            isDisabled={isDisabled}\n            onFileInputChange={(_, file) => setFilename(file.name)}\n            onReadStarted={() => setIsLoading(true)}\n            onReadFinished={() => setIsLoading(false)}\n            onClearClick={() => {\n              field.onChange(\"\");\n              setFilename(\"\");\n            }}\n            isLoading={isLoading}\n            allowEditingUploadedText={false}\n            onChange={(value, filename) => {\n              field.onChange(value);\n              setFilename(filename);\n            }}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  InputGroup,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { GroupPickerDialog } from \"../group/GroupPickerDialog\";\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const GroupComponent = ({ name, label, helpText }: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const [open, setOpen] = useState(false);\n  const [groups, setGroups] = useState<GroupRepresentation[]>();\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={convertToName(name!)}\n      defaultValue=\"\"\n      control={control}\n      render={({ field }) => (\n        <>\n          {open && (\n            <GroupPickerDialog\n              type=\"selectOne\"\n              text={{\n                title: \"dynamic:selectGroup\",\n                ok: \"common:select\",\n              }}\n              onConfirm={(groups) => {\n                field.onChange(groups?.[0].path);\n                setGroups(groups);\n                setOpen(false);\n              }}\n              onClose={() => setOpen(false)}\n              filterGroups={groups}\n            />\n          )}\n\n          <FormGroup\n            label={t(label!)}\n            labelIcon={\n              <HelpItem\n                helpText={t(helpText!)}\n                fieldLabelId={`dynamic:${label}`}\n              />\n            }\n            fieldId={name!}\n          >\n            <InputGroup>\n              <ChipGroup>\n                {field.value && (\n                  <Chip onClick={() => field.onChange(undefined)}>\n                    {field.value}\n                  </Chip>\n                )}\n              </ChipGroup>\n              <Button\n                id=\"kc-join-groups-button\"\n                onClick={() => setOpen(!open)}\n                variant=\"secondary\"\n                data-testid=\"join-groups-button\"\n              >\n                {t(\"selectGroup\")}\n              </Button>\n            </InputGroup>\n          </FormGroup>\n        </>\n      )}\n    />\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ListComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  options,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={convertToName(name!)}\n        data-testid={name}\n        defaultValue={defaultValue || \"\"}\n        control={control}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            isDisabled={isDisabled}\n            onToggle={(toggle) => setOpen(toggle)}\n            onSelect={(_, value) => {\n              field.onChange(value as string);\n              setOpen(false);\n            }}\n            selections={field.value}\n            variant={SelectVariant.single}\n            aria-label={t(label!)}\n            isOpen={open}\n          >\n            {options?.map((option) => (\n              <SelectOption\n                selected={option === field.value}\n                key={option}\n                value={option}\n              />\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  ActionList,\n  ActionListItem,\n  Button,\n  Flex,\n  FlexItem,\n  FormGroup,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { generateId } from \"../../util\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeyValueType } from \"../key-value-form/key-value-convert\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\ntype IdKeyValueType = KeyValueType & {\n  id: number;\n};\n\nexport const MapComponent = ({ name, label, helpText }: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n\n  const { getValues, setValue, register } = useFormContext();\n  const [map, setMap] = useState<IdKeyValueType[]>([]);\n  const fieldName = convertToName(name!);\n\n  useEffect(() => {\n    register(fieldName);\n    const values: KeyValueType[] = JSON.parse(getValues(fieldName) || \"[]\");\n    if (!values.length) {\n      values.push({ key: \"\", value: \"\" });\n    }\n    setMap(values.map((value) => ({ ...value, id: generateId() })));\n  }, [register, getValues]);\n\n  const update = (val = map) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setValue(fieldName, JSON.stringify(val.map(({ id, ...entry }) => entry)));\n  };\n\n  const updateKey = (index: number, key: string) => {\n    updateEntry(index, { ...map[index], key });\n  };\n\n  const updateValue = (index: number, value: string) => {\n    updateEntry(index, { ...map[index], value });\n  };\n\n  const updateEntry = (index: number, entry: IdKeyValueType) =>\n    setMap([...map.slice(0, index), entry, ...map.slice(index + 1)]);\n\n  const remove = (index: number) => {\n    const value = [...map.slice(0, index), ...map.slice(index + 1)];\n    setMap(value);\n    update(value);\n  };\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <Flex direction={{ default: \"column\" }}>\n        <Flex>\n          <FlexItem\n            grow={{ default: \"grow\" }}\n            spacer={{ default: \"spacerNone\" }}\n          >\n            <strong>{t(\"common:key\")}</strong>\n          </FlexItem>\n          <FlexItem grow={{ default: \"grow\" }}>\n            <strong>{t(\"common:value\")}</strong>\n          </FlexItem>\n        </Flex>\n        {map.map((attribute, index) => (\n          <Flex key={attribute.id} data-testid=\"row\">\n            <FlexItem grow={{ default: \"grow\" }}>\n              <TextInput\n                name={`${fieldName}.${index}.key`}\n                placeholder={t(\"common:keyPlaceholder\")}\n                aria-label={t(\"key\")}\n                defaultValue={attribute.key}\n                data-testid={`${fieldName}.${index}.key`}\n                onChange={(value) => updateKey(index, value)}\n                onBlur={() => update()}\n              />\n            </FlexItem>\n            <FlexItem\n              grow={{ default: \"grow\" }}\n              spacer={{ default: \"spacerNone\" }}\n            >\n              <TextInput\n                name={`${fieldName}.${index}.value`}\n                placeholder={t(\"common:valuePlaceholder\")}\n                aria-label={t(\"common:value\")}\n                defaultValue={attribute.value}\n                data-testid={`${fieldName}.${index}.value`}\n                onChange={(value) => updateValue(index, value)}\n                onBlur={() => update()}\n              />\n            </FlexItem>\n            <FlexItem>\n              <Button\n                variant=\"link\"\n                title={t(\"common:removeAttribute\")}\n                isDisabled={map.length === 1}\n                onClick={() => remove(index)}\n                data-testid={`${fieldName}.${index}.remove`}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </FlexItem>\n          </Flex>\n        ))}\n      </Flex>\n      <ActionList>\n        <ActionListItem>\n          <Button\n            data-testid={`${fieldName}-add-row`}\n            className=\"pf-u-px-0 pf-u-mt-sm\"\n            variant=\"link\"\n            icon={<PlusCircleIcon />}\n            onClick={() =>\n              setMap([...map, { key: \"\", value: \"\", id: generateId() }])\n            }\n          >\n            {t(\"common:addAttribute\")}\n          </Button>\n        </ActionListItem>\n      </ActionList>\n    </FormGroup>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const MultiValuedListComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  options,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={convertToName(name!)}\n        control={control}\n        defaultValue={defaultValue ? [defaultValue] : []}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            data-testid={name}\n            isDisabled={isDisabled}\n            chipGroupProps={{\n              numChips: 3,\n              expandedText: t(\"common:hide\"),\n              collapsedText: t(\"common:showRemaining\"),\n            }}\n            variant={SelectVariant.typeaheadMulti}\n            typeAheadAriaLabel=\"Select\"\n            onToggle={(isOpen) => setOpen(isOpen)}\n            selections={field.value}\n            onSelect={(_, v) => {\n              const option = v.toString();\n              if (field.value.includes(option)) {\n                field.onChange(\n                  field.value.filter((item: string) => item !== option)\n                );\n              } else {\n                field.onChange([...field.value, option]);\n              }\n            }}\n            onClear={(event) => {\n              event.stopPropagation();\n              field.onChange([]);\n            }}\n            isOpen={open}\n            aria-label={t(label!)}\n          >\n            {options?.map((option) => (\n              <SelectOption key={option} value={option} />\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormGroup } from \"@patternfly/react-core\";\n\nimport type { ComponentProps } from \"./components\";\nimport { HelpItem } from \"ui-shared\";\nimport { MultiLineInput } from \"../multi-line-input/MultiLineInput\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const MultiValuedStringComponent = ({\n  name,\n  label,\n  defaultValue,\n  helpText,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const fieldName = convertToName(name!);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <MultiLineInput\n        aria-label={t(label!)}\n        name={fieldName}\n        isDisabled={isDisabled}\n        defaultValue={[defaultValue]}\n        addButtonLabel={t(\"addMultivaluedLabel\", {\n          fieldLabel: t(label!).toLowerCase(),\n        })}\n        stringify\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { PasswordInput } from \"../password-input/PasswordInput\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const PasswordComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <PasswordInput\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  Button,\n  Chip,\n  FormGroup,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport useToggle from \"../../utils/useToggle\";\nimport { HelpItem } from \"ui-shared\";\nimport { AddRoleMappingModal } from \"../role-mapping/AddRoleMappingModal\";\nimport { Row, ServiceRole } from \"../role-mapping/RoleMapping\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nconst parseValue = (value: any) =>\n  value?.includes(\".\") ? value.split(\".\") : [\"\", value || \"\"];\n\nconst parseRow = (value: Row) =>\n  value.client?.clientId\n    ? `${value.client.clientId}.${value.role.name}`\n    : value.role.name;\n\nexport const RoleComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n\n  const [openModal, toggleModal] = useToggle();\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n\n  const fieldName = convertToName(name!);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      validated={errors[fieldName] ? \"error\" : \"default\"}\n      helperTextInvalid={t(\"common:required\")}\n      fieldId={name!}\n    >\n      <Controller\n        name={fieldName}\n        defaultValue={defaultValue || \"\"}\n        control={control}\n        render={({ field }) => (\n          <Split>\n            {openModal && (\n              <AddRoleMappingModal\n                id=\"id\"\n                type=\"roles\"\n                name={name}\n                onAssign={(rows) => field.onChange(parseRow(rows[0]))}\n                onClose={toggleModal}\n                isRadio\n              />\n            )}\n\n            {field.value !== \"\" && (\n              <SplitItem>\n                <Chip textMaxWidth=\"500px\" onClick={() => field.onChange(\"\")}>\n                  <ServiceRole\n                    role={{ name: parseValue(field.value)[1] }}\n                    client={{ clientId: parseValue(field.value)[0] }}\n                  />\n                </Chip>\n              </SplitItem>\n            )}\n            <SplitItem>\n              <Button\n                onClick={toggleModal}\n                variant=\"secondary\"\n                data-testid=\"add-roles\"\n                disabled={isDisabled}\n              >\n                {t(\"selectRole.label\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ScriptComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem\n          helpText={<span style={{ whiteSpace: \"pre-wrap\" }}>{helpText}</span>}\n          fieldLabelId={`dynamic:${label}`}\n        />\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={convertToName(name!)}\n        defaultValue={defaultValue}\n        control={control}\n        render={({ field }) => (\n          <CodeEditor\n            id={name!}\n            data-testid={name}\n            isReadOnly={isDisabled}\n            type=\"text\"\n            onChange={field.onChange}\n            code={field.value}\n            height=\"600px\"\n            language={Language.javascript}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../keycloak-text-input/KeycloakTextInput\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const StringComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <KeycloakTextInput\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../keycloak-text-area/KeycloakTextArea\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const TextComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <KeycloakTextArea\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\n\nimport { BooleanComponent } from \"./BooleanComponent\";\nimport { ClientSelectComponent } from \"./ClientSelectComponent\";\nimport { FileComponent } from \"./FileComponent\";\nimport { GroupComponent } from \"./GroupComponent\";\nimport { ListComponent } from \"./ListComponent\";\nimport { MapComponent } from \"./MapComponent\";\nimport { MultiValuedListComponent } from \"./MultivaluedListComponent\";\nimport { MultiValuedStringComponent } from \"./MultivaluedStringComponent\";\nimport { PasswordComponent } from \"./PasswordComponent\";\nimport { RoleComponent } from \"./RoleComponent\";\nimport { ScriptComponent } from \"./ScriptComponent\";\nimport { StringComponent } from \"./StringComponent\";\nimport { TextComponent } from \"./TextComponent\";\n\nexport type ComponentProps = Omit<ConfigPropertyRepresentation, \"type\"> & {\n  isDisabled?: boolean;\n};\n\nconst ComponentTypes = [\n  \"String\",\n  \"Text\",\n  \"boolean\",\n  \"List\",\n  \"Role\",\n  \"Script\",\n  \"Map\",\n  \"Group\",\n  \"MultivaluedList\",\n  \"ClientList\",\n  \"MultivaluedString\",\n  \"File\",\n  \"Password\",\n] as const;\n\nexport type Components = (typeof ComponentTypes)[number];\n\nexport const COMPONENTS: {\n  [index in Components]: (props: ComponentProps) => JSX.Element;\n} = {\n  String: StringComponent,\n  Text: TextComponent,\n  boolean: BooleanComponent,\n  List: ListComponent,\n  Role: RoleComponent,\n  Script: ScriptComponent,\n  Map: MapComponent,\n  Group: GroupComponent,\n  ClientList: ClientSelectComponent,\n  MultivaluedList: MultiValuedListComponent,\n  MultivaluedString: MultiValuedStringComponent,\n  File: FileComponent,\n  Password: PasswordComponent,\n} as const;\n\nexport const isValidComponentType = (value: string): value is Components =>\n  value in COMPONENTS;\n","import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\n\nimport { COMPONENTS, isValidComponentType } from \"./components\";\nimport { convertAttributeNameToForm } from \"../../util\";\n\ntype DynamicComponentProps = {\n  properties: ConfigPropertyRepresentation[];\n  selectedValues?: string[];\n  parentCallback?: (data: string[]) => void;\n};\n\nexport const DynamicComponents = ({\n  properties,\n  ...rest\n}: DynamicComponentProps) => (\n  <>\n    {properties.map((property) => {\n      const componentType = property.type!;\n      if (isValidComponentType(componentType)) {\n        const Component = COMPONENTS[componentType];\n        return <Component key={property.name} {...property} {...rest} />;\n      } else {\n        console.warn(`There is no editor registered for ${componentType}`);\n      }\n    })}\n  </>\n);\n\nexport const convertToName = (name: string): string =>\n  convertAttributeNameToForm(`config.${name}`);\n"],"names":["BooleanComponent","name","label","helpText","isDisabled","t","useTranslation","control","useFormContext","jsx","FormGroup","HelpItem","Controller","convertToName","field","Switch","value","ClientSelectComponent","props","ClientSelect","FileComponent","defaultValue","filename","setFilename","useState","isLoading","setIsLoading","FileUpload","_","file","GroupComponent","open","setOpen","groups","setGroups","jsxs","Fragment","GroupPickerDialog","InputGroup","ChipGroup","Chip","Button","ListComponent","options","Select","toggle","SelectVariant","option","SelectOption","MapComponent","getValues","setValue","register","map","setMap","fieldName","useEffect","values","generateId","update","val","id","entry","updateKey","index","key","updateEntry","updateValue","remove","Flex","FlexItem","attribute","TextInput","MinusCircleIcon","ActionList","ActionListItem","PlusCircleIcon","MultiValuedListComponent","isOpen","v","item","event","MultiValuedStringComponent","MultiLineInput","PasswordComponent","PasswordInput","parseValue","parseRow","RoleComponent","openModal","toggleModal","useToggle","errors","Split","AddRoleMappingModal","rows","SplitItem","ServiceRole","ScriptComponent","CodeEditor","Language","StringComponent","KeycloakTextInput","TextComponent","KeycloakTextArea","COMPONENTS","isValidComponentType","DynamicComponents","properties","rest","property","componentType","Component","convertAttributeNameToForm"],"mappings":"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"}