{"version":3,"file":"ScopeForm-a772d0f4.js","sources":["../../src/client-scopes/details/ScopeForm.tsx"],"sourcesContent":["import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { getProtocolName } from \"../../clients/utils\";\nimport {\n  allClientScopeTypes,\n  ClientScopeDefaultOptionalType,\n  clientScopeTypesSelectOptions,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useLoginProviders } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, convertToFormValues } from \"../../util\";\nimport { toClientScopes } from \"../routes/ClientScopes\";\n\ntype ScopeFormProps = {\n  clientScope?: ClientScopeRepresentation;\n  save: (clientScope: ClientScopeDefaultOptionalType) => void;\n};\n\nexport const ScopeForm = ({ clientScope, save }: ScopeFormProps) => {\n  const { t } = useTranslation(\"client-scopes\");\n  const { t: tc } = useTranslation(\"clients\");\n  const {\n    register,\n    control,\n    handleSubmit,\n    setValue,\n    formState: { errors, isDirty, isValid },\n  } = useForm<ClientScopeDefaultOptionalType>({ mode: \"onChange\" });\n  const { realm } = useRealm();\n\n  const providers = useLoginProviders();\n  const [open, isOpen] = useState(false);\n  const [openType, setOpenType] = useState(false);\n\n  const displayOnConsentScreen: string = useWatch({\n    control,\n    name: convertAttributeNameToForm(\"attributes.display.on.consent.screen\"),\n    defaultValue:\n      clientScope?.attributes?.[\"display.on.consent.screen\"] ?? \"true\",\n  });\n\n  useEffect(() => {\n    convertToFormValues(clientScope ?? {}, setValue);\n  }, [clientScope]);\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      onSubmit={handleSubmit(save)}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"common:name\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"client-scopes-help:name\")}\n            fieldLabelId=\"name\"\n          />\n        }\n        fieldId=\"kc-name\"\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n        isRequired\n      >\n        <KeycloakTextInput\n          id=\"kc-name\"\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n          {...register(\"name\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"common:description\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"client-scopes-help:description\")}\n            fieldLabelId=\"description\"\n          />\n        }\n        fieldId=\"kc-description\"\n        validated={\n          errors.description ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:maxLength\", { length: 255 })}\n      >\n        <KeycloakTextInput\n          id=\"kc-description\"\n          validated={\n            errors.description\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          {...register(\"description\", {\n            maxLength: 255,\n          })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"type\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"client-scopes-help:type\")}\n            fieldLabelId=\"client-scopes:type\"\n          />\n        }\n        fieldId=\"kc-type\"\n      >\n        <Controller\n          name=\"type\"\n          defaultValue={allClientScopeTypes[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-type\"\n              variant={SelectVariant.single}\n              isOpen={openType}\n              selections={field.value}\n              onToggle={setOpenType}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setOpenType(false);\n              }}\n            >\n              {clientScopeTypesSelectOptions(t, allClientScopeTypes)}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {!clientScope && (\n        <FormGroup\n          label={t(\"protocol\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"client-scopes-help:protocol\")}\n              fieldLabelId=\"client-scopes:protocol\"\n            />\n          }\n          fieldId=\"kc-protocol\"\n        >\n          <Controller\n            name=\"protocol\"\n            defaultValue={providers[0]}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-protocol\"\n                onToggle={isOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  isOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={open}\n              >\n                {providers.map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                    data-testid={`option-${option}`}\n                  >\n                    {getProtocolName(tc, option)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"displayOnConsentScreen\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"client-scopes-help:displayOnConsentScreen\")}\n            fieldLabelId=\"client-scopes:displayOnConsentScreen\"\n          />\n        }\n        fieldId=\"kc-display-on-consent-screen\"\n      >\n        <Controller\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.display.on.consent.screen\"\n          )}\n          control={control}\n          defaultValue={displayOnConsentScreen}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-display-on-consent-screen\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n            />\n          )}\n        />\n      </FormGroup>\n      {displayOnConsentScreen === \"true\" && (\n        <FormGroup\n          label={t(\"consentScreenText\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"client-scopes-help:consentScreenText\")}\n              fieldLabelId=\"client-scopes:consentScreenText\"\n            />\n          }\n          fieldId=\"kc-consent-screen-text\"\n        >\n          <KeycloakTextArea\n            id=\"kc-consent-screen-text\"\n            {...register(\n              convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n                \"attributes.consent.screen.text\"\n              )\n            )}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"includeInTokenScope\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"client-scopes-help:includeInTokenScope\")}\n            fieldLabelId=\"client-scopes:includeInTokenScope\"\n          />\n        }\n        fieldId=\"kc-include-in-token-scope\"\n      >\n        <Controller\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.include.in.token.scope\"\n          )}\n          control={control}\n          defaultValue=\"true\"\n          render={({ field }) => (\n            <Switch\n              id=\"kc-include-in-token-scope\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"guiOrder\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"client-scopes-help:guiOrder\")}\n            fieldLabelId=\"client-scopes:guiOrder\"\n          />\n        }\n        fieldId=\"kc-gui-order\"\n      >\n        <Controller\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.gui.order\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <KeycloakTextInput\n              id=\"kc-gui-order\"\n              type=\"number\"\n              value={field.value}\n              min={0}\n              onChange={field.onChange}\n            />\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={!isDirty || !isValid}\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          component={(props) => (\n            <Link {...props} to={toClientScopes({ realm })}></Link>\n          )}\n        >\n          {t(\"common:cancel\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n"],"names":["ScopeForm","clientScope","save","t","useTranslation","tc","register","control","handleSubmit","setValue","errors","isDirty","isValid","useForm","realm","useRealm","providers","useLoginProviders","open","isOpen","useState","openType","setOpenType","displayOnConsentScreen","useWatch","convertAttributeNameToForm","useEffect","convertToFormValues","jsxs","FormAccess","jsx","FormGroup","HelpItem","ValidatedOptions","KeycloakTextInput","Controller","allClientScopeTypes","field","Select","SelectVariant","_","value","clientScopeTypesSelectOptions","option","SelectOption","getProtocolName","Switch","KeycloakTextArea","ActionGroup","Button","props","Link","toClientScopes"],"mappings":"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"}