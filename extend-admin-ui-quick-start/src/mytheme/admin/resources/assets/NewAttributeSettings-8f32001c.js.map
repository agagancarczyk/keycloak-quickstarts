{"version":3,"file":"NewAttributeSettings-8f32001c.js","sources":["../../src/realm-settings/user-profile/attribute/AttributeAnnotations.tsx","../../src/realm-settings/user-profile/attribute/AttributeGeneralSettings.tsx","../../src/realm-settings/user-profile/attribute/AttributePermission.tsx","../../src/realm-settings/user-profile/attribute/ValidatorSelect.tsx","../../src/realm-settings/user-profile/attribute/AddValidatorDialog.tsx","../../src/realm-settings/user-profile/attribute/AttributeValidations.tsx","../../src/realm-settings/NewAttributeSettings.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\";\nimport { FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\n\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { KeyValueInput } from \"../../../components/key-value-form/KeyValueInput\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeAnnotations = () => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"annotations\")}\n        fieldId=\"kc-annotations\"\n        className=\"kc-annotations-label\"\n      >\n        <Grid className=\"kc-annotations\">\n          <GridItem>\n            <KeyValueInput name=\"annotations\" />\n          </GridItem>\n        </Grid>\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport {\n  Divider,\n  FormGroup,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakSpinner } from \"../../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { USERNAME_EMAIL } from \"../../NewAttributeSettings\";\nimport type { AttributeParams } from \"../../routes/Attribute\";\n\nimport \"../../realm-settings-section.css\";\n\nconst REQUIRED_FOR = [\n  { label: \"requiredForLabel.both\", value: [\"admin\", \"user\"] },\n  { label: \"requiredForLabel.users\", value: [\"user\"] },\n  { label: \"requiredForLabel.admins\", value: [\"admin\"] },\n] as const;\n\nexport const AttributeGeneralSettings = () => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const form = useFormContext();\n  const [clientScopes, setClientScopes] =\n    useState<ClientScopeRepresentation[]>();\n  const [config, setConfig] = useState<UserProfileConfig>();\n  const [selectEnabledWhenOpen, setSelectEnabledWhenOpen] = useState(false);\n  const [selectRequiredForOpen, setSelectRequiredForOpen] = useState(false);\n  const [isAttributeGroupDropdownOpen, setIsAttributeGroupDropdownOpen] =\n    useState(false);\n  const { attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n\n  const selectedScopes = useWatch({\n    control: form.control,\n    name: \"selector.scopes\",\n    defaultValue: [],\n  });\n\n  const requiredScopes = useWatch({\n    control: form.control,\n    name: \"required.scopes\",\n    defaultValue: [],\n  });\n\n  const required = useWatch({\n    control: form.control,\n    name: \"isRequired\",\n    defaultValue: false,\n  });\n\n  useFetch(() => adminClient.clientScopes.find(), setClientScopes, []);\n  useFetch(() => adminClient.users.getProfile(), setConfig, []);\n\n  if (!clientScopes) {\n    return <KeycloakSpinner />;\n  }\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        label={t(\"attributeName\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"realm-settings-help:attributeNameHelp\")}\n            fieldLabelId=\"realm-settings:attributeName\"\n          />\n        }\n        fieldId=\"kc-attribute-name\"\n        isRequired\n        validated={form.formState.errors.name ? \"error\" : \"default\"}\n        helperTextInvalid={t(\"validateName\")}\n      >\n        <KeycloakTextInput\n          isRequired\n          id=\"kc-attribute-name\"\n          defaultValue=\"\"\n          data-testid=\"attribute-name\"\n          isDisabled={editMode}\n          validated={form.formState.errors.name ? \"error\" : \"default\"}\n          {...form.register(\"name\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"attributeDisplayName\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"realm-settings-help:attributeDisplayNameHelp\")}\n            fieldLabelId=\"realm-settings:attributeDisplayName\"\n          />\n        }\n        fieldId=\"kc-attribute-display-name\"\n      >\n        <KeycloakTextInput\n          id=\"kc-attribute-display-name\"\n          defaultValue=\"\"\n          data-testid=\"attribute-display-name\"\n          {...form.register(\"displayName\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"attributeGroup\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"realm-setting-help:attributeGroupHelp\")}\n            fieldLabelId=\"realm-setting:attributeGroup\"\n          />\n        }\n        fieldId=\"kc-attribute-group\"\n      >\n        <Controller\n          name=\"group\"\n          defaultValue=\"\"\n          control={form.control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-attributeGroup\"\n              onToggle={() =>\n                setIsAttributeGroupDropdownOpen(!isAttributeGroupDropdownOpen)\n              }\n              isOpen={isAttributeGroupDropdownOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setIsAttributeGroupDropdownOpen(false);\n              }}\n              selections={[field.value || t(\"common:none\")]}\n              variant={SelectVariant.single}\n            >\n              {[\n                <SelectOption key=\"empty\" value=\"\">\n                  {t(\"common:none\")}\n                </SelectOption>,\n                ...(config?.groups?.map((group) => (\n                  <SelectOption key={group.name} value={group.name}>\n                    {group.name}\n                  </SelectOption>\n                )) || []),\n              ]}\n            </Select>\n          )}\n        ></Controller>\n      </FormGroup>\n      {!USERNAME_EMAIL.includes(attributeName) && (\n        <>\n          <Divider />\n          <FormGroup\n            label={t(\"enabledWhen\")}\n            fieldId=\"enabledWhen\"\n            hasNoPaddingTop\n          >\n            <Radio\n              id=\"always\"\n              data-testid=\"always\"\n              isChecked={selectedScopes.length === clientScopes.length}\n              name=\"enabledWhen\"\n              label={t(\"always\")}\n              onChange={(value) => {\n                if (value) {\n                  form.setValue(\n                    \"selector.scopes\",\n                    clientScopes.map((s) => s.name)\n                  );\n                } else {\n                  form.setValue(\"selector.scopes\", []);\n                }\n              }}\n              className=\"pf-u-mb-md\"\n            />\n            <Radio\n              id=\"scopesAsRequested\"\n              data-testid=\"scopesAsRequested\"\n              isChecked={selectedScopes.length !== clientScopes.length}\n              name=\"enabledWhen\"\n              label={t(\"scopesAsRequested\")}\n              onChange={(value) => {\n                if (value) {\n                  form.setValue(\"selector.scopes\", []);\n                } else {\n                  form.setValue(\n                    \"selector.scopes\",\n                    clientScopes.map((s) => s.name)\n                  );\n                }\n              }}\n              className=\"pf-u-mb-md\"\n            />\n          </FormGroup>\n          <FormGroup fieldId=\"kc-scope-enabled-when\">\n            <Controller\n              name=\"selector.scopes\"\n              control={form.control}\n              defaultValue={clientScopes.map((s) => s.name)}\n              render={({ field }) => (\n                <Select\n                  name=\"scopes\"\n                  data-testid=\"enabled-when-scope-field\"\n                  variant={SelectVariant.typeaheadMulti}\n                  typeAheadAriaLabel=\"Select\"\n                  chipGroupProps={{\n                    numChips: 3,\n                    expandedText: t(\"common:hide\"),\n                    collapsedText: t(\"common:showRemaining\"),\n                  }}\n                  onToggle={(isOpen) => setSelectEnabledWhenOpen(isOpen)}\n                  selections={field.value}\n                  onSelect={(_, selectedValue) => {\n                    const option = selectedValue.toString();\n                    let changedValue = [\"\"];\n                    if (field.value) {\n                      changedValue = field.value.includes(option)\n                        ? field.value.filter((item: string) => item !== option)\n                        : [...field.value, option];\n                    } else {\n                      changedValue = [option];\n                    }\n\n                    field.onChange(changedValue);\n                  }}\n                  onClear={(selectedValues) => {\n                    selectedValues.stopPropagation();\n                    field.onChange([]);\n                  }}\n                  isOpen={selectEnabledWhenOpen}\n                  isDisabled={selectedScopes.length === clientScopes.length}\n                  aria-labelledby={\"scope\"}\n                >\n                  {clientScopes.map((option) => (\n                    <SelectOption key={option.name} value={option.name} />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n\n          <Divider />\n          <FormGroup\n            label={t(\"required\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"realm-settings-help:requiredHelp\")}\n                fieldLabelId=\"realm-settings:required\"\n              />\n            }\n            fieldId=\"kc-required\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name=\"isRequired\"\n              data-testid=\"required\"\n              defaultValue={false}\n              control={form.control}\n              render={({ field }) => (\n                <Switch\n                  id={\"kc-required\"}\n                  onChange={field.onChange}\n                  isChecked={field.value}\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  aria-label={t(\"required\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {required && (\n            <>\n              <FormGroup\n                label={t(\"requiredFor\")}\n                fieldId=\"requiredFor\"\n                hasNoPaddingTop\n              >\n                <Controller\n                  name=\"required.roles\"\n                  data-testid=\"requiredFor\"\n                  defaultValue={REQUIRED_FOR[0].value}\n                  control={form.control}\n                  render={({ field }) => (\n                    <div className=\"kc-requiredFor\">\n                      {REQUIRED_FOR.map((option) => (\n                        <Radio\n                          id={option.label}\n                          key={option.label}\n                          data-testid={option.label}\n                          isChecked={isEqual(field.value, option.value)}\n                          name=\"roles\"\n                          onChange={() => {\n                            field.onChange(option.value);\n                          }}\n                          label={t(option.label)}\n                          className=\"kc-requiredFor-option\"\n                        />\n                      ))}\n                    </div>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"requiredWhen\")}\n                fieldId=\"requiredWhen\"\n                hasNoPaddingTop\n              >\n                <Radio\n                  id=\"requiredAlways\"\n                  data-testid=\"requiredAlways\"\n                  isChecked={requiredScopes.length === clientScopes.length}\n                  name=\"requiredWhen\"\n                  label={t(\"always\")}\n                  onChange={(value) => {\n                    if (value) {\n                      form.setValue(\n                        \"required.scopes\",\n                        clientScopes.map((s) => s.name)\n                      );\n                    } else {\n                      form.setValue(\"required.scopes\", []);\n                    }\n                  }}\n                  className=\"pf-u-mb-md\"\n                />\n                <Radio\n                  id=\"requiredScopesAsRequested\"\n                  data-testid=\"requiredScopesAsRequested\"\n                  isChecked={requiredScopes.length !== clientScopes.length}\n                  name=\"requiredWhen\"\n                  label={t(\"scopesAsRequested\")}\n                  onChange={(value) => {\n                    if (value) {\n                      form.setValue(\"required.scopes\", []);\n                    } else {\n                      form.setValue(\n                        \"required.scopes\",\n                        clientScopes.map((s) => s.name)\n                      );\n                    }\n                  }}\n                  className=\"pf-u-mb-md\"\n                />\n              </FormGroup>\n              <FormGroup fieldId=\"kc-scope-required-when\">\n                <Controller\n                  name=\"required.scopes\"\n                  control={form.control}\n                  defaultValue={[]}\n                  render={({ field }) => (\n                    <Select\n                      name=\"scopeRequired\"\n                      data-testid=\"required-when-scope-field\"\n                      variant={SelectVariant.typeaheadMulti}\n                      typeAheadAriaLabel=\"Select\"\n                      chipGroupProps={{\n                        numChips: 3,\n                        expandedText: t(\"common:hide\"),\n                        collapsedText: t(\"common:showRemaining\"),\n                      }}\n                      onToggle={(isOpen) => setSelectRequiredForOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        const option = selectedValue.toString();\n                        let changedValue = [\"\"];\n                        if (field.value) {\n                          changedValue = field.value.includes(option)\n                            ? field.value.filter(\n                                (item: string) => item !== option\n                              )\n                            : [...field.value, option];\n                        } else {\n                          changedValue = [option];\n                        }\n                        field.onChange(changedValue);\n                      }}\n                      onClear={(selectedValues) => {\n                        selectedValues.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      isOpen={selectRequiredForOpen}\n                      isDisabled={requiredScopes.length === clientScopes.length}\n                      aria-labelledby={\"scope\"}\n                    >\n                      {clientScopes.map((option) => (\n                        <SelectOption key={option.name} value={option.name} />\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import { Checkbox, FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\n\nimport \"../../realm-settings-section.css\";\n\nconst Permissions = ({ name }: { name: string }) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { control } = useFormContext();\n\n  return (\n    <Grid>\n      <Controller\n        name={`permissions.${name}`}\n        control={control}\n        defaultValue={[]}\n        render={({ field }) => (\n          <>\n            <GridItem lg={4} sm={6}>\n              <Checkbox\n                id={`user-${name}`}\n                label={t(\"user\")}\n                value=\"user\"\n                data-testid={`user-${name}`}\n                isChecked={field.value.includes(\"user\")}\n                onChange={() => {\n                  const option = \"user\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n            <GridItem lg={8} sm={6}>\n              <Checkbox\n                id={`admin-${name}`}\n                label={t(\"admin\")}\n                value=\"admin\"\n                data-testid={`admin-${name}`}\n                isChecked={field.value.includes(\"admin\")}\n                onChange={() => {\n                  const option = \"admin\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n          </>\n        )}\n      />\n    </Grid>\n  );\n};\n\nexport const AttributePermission = () => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanEdit\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"realm-settings-help:whoCanEditHelp\")}\n            fieldLabelId=\"realm-settings:whoCanEdit\"\n          />\n        }\n        fieldId=\"kc-who-can-edit\"\n      >\n        <Permissions name=\"edit\" />\n      </FormGroup>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanView\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"realm-settings-help:whoCanViewHelp\")}\n            fieldLabelId=\"realm-settings:whoCanView\"\n          />\n        }\n        fieldId=\"kc-who-can-view\"\n      >\n        <Permissions name=\"view\" />\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { FormGroup, Select, SelectOption } from \"@patternfly/react-core\";\nimport { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport useToggle from \"../../../utils/useToggle\";\n\ntype ValidatorSelectProps = {\n  selectedValidators: string[];\n  onChange: (validator: ComponentTypeRepresentation) => void;\n};\n\nexport const ValidatorSelect = ({\n  selectedValidators,\n  onChange,\n}: ValidatorSelectProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const allValidator: ComponentTypeRepresentation[] =\n    useServerInfo().componentTypes?.[\"org.keycloak.validate.Validator\"] || [];\n  const validators = useMemo(\n    () => allValidator.filter(({ id }) => !selectedValidators.includes(id)),\n    [selectedValidators]\n  );\n  const [open, toggle] = useToggle();\n  const [value, setValue] = useState<ComponentTypeRepresentation>();\n\n  return (\n    <FormGroup label={t(\"validatorType\")} fieldId=\"validator\">\n      <Select\n        toggleId=\"validator\"\n        onToggle={toggle}\n        onSelect={(_, value) => {\n          const option = value as ComponentTypeRepresentation;\n          onChange(option);\n          setValue(option);\n          toggle();\n        }}\n        selections={value?.id}\n        variant=\"single\"\n        aria-label={t(\"selectOne\")}\n        isOpen={open}\n        placeholderText={t(\"common:choose\")}\n        menuAppendTo=\"parent\"\n        maxHeight={300}\n      >\n        {validators.map((option) => (\n          <SelectOption\n            selected={value?.id === option.id}\n            key={option.id}\n            value={option}\n            description={option.helpText}\n          >\n            {option.id}\n          </SelectOption>\n        ))}\n      </Select>\n    </FormGroup>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { Button, Form, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { DynamicComponents } from \"../../../components/dynamic/DynamicComponents\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { ValidatorSelect } from \"./ValidatorSelect\";\n\nexport type AddValidatorDialogProps = {\n  selectedValidators: IndexedValidations[];\n  toggleDialog: () => void;\n  onConfirm: (newValidator: ComponentRepresentation) => void;\n};\n\nexport const AddValidatorDialog = ({\n  selectedValidators,\n  toggleDialog,\n  onConfirm,\n}: AddValidatorDialogProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const [selectedValidator, setSelectedValidator] =\n    useState<ComponentTypeRepresentation>();\n\n  const allSelected =\n    useServerInfo().componentTypes?.[\"org.keycloak.validate.Validator\"]\n      .length === selectedValidators.length;\n  const form = useForm<ComponentTypeRepresentation>();\n  const { handleSubmit } = form;\n\n  const save = (newValidator: ComponentTypeRepresentation) => {\n    onConfirm({ ...newValidator, id: selectedValidator?.id });\n    toggleDialog();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"addValidator\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          key=\"save\"\n          data-testid=\"save-validator-role-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"add-validator\"\n        >\n          {t(\"common:save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel-validator-role-button\"\n          variant=\"link\"\n          onClick={toggleDialog}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      {allSelected ? (\n        t(\"emptyValidators\")\n      ) : (\n        <Form id=\"add-validator\" onSubmit={handleSubmit(save)}>\n          <ValidatorSelect\n            selectedValidators={selectedValidators.map(\n              (validator) => validator.key\n            )}\n            onChange={setSelectedValidator}\n          />\n          {selectedValidator && (\n            <FormProvider {...form}>\n              <DynamicComponents properties={selectedValidator.properties} />\n            </FormProvider>\n          )}\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport useToggle from \"../../../utils/useToggle\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { AddValidatorDialog } from \"../attribute/AddValidatorDialog\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeValidations = () => {\n  const { t } = useTranslation(\"realm-settings\");\n  const [addValidatorModalOpen, toggleModal] = useToggle();\n  const [validatorToDelete, setValidatorToDelete] = useState<string>();\n  const { setValue, control, register } = useFormContext();\n\n  const validators: IndexedValidations[] = useWatch({\n    name: \"validations\",\n    control,\n    defaultValue: [],\n  });\n\n  useEffect(() => {\n    register(\"validations\");\n  }, []);\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteValidatorConfirmTitle\"),\n    messageKey: t(\"deleteValidatorConfirmMsg\", {\n      validatorName: validatorToDelete,\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedValidators = validators.filter(\n        (validator) => validator.key !== validatorToDelete\n      );\n\n      setValue(\"validations\", [...updatedValidators]);\n    },\n  });\n\n  return (\n    <>\n      {addValidatorModalOpen && (\n        <AddValidatorDialog\n          selectedValidators={validators}\n          onConfirm={(newValidator) => {\n            setValue(\"validations\", [\n              ...validators,\n              { key: newValidator.id, value: newValidator.config },\n            ]);\n          }}\n          toggleDialog={toggleModal}\n        />\n      )}\n      <DeleteConfirm />\n      <div className=\"kc-attributes-validations\">\n        <Button\n          id=\"addValidator\"\n          onClick={() => toggleModal()}\n          variant=\"link\"\n          data-testid=\"addValidator\"\n          className=\"kc--attributes-validations--add-validation-button\"\n          icon={<PlusCircleIcon />}\n        >\n          {t(\"realm-settings:addValidator\")}\n        </Button>\n        <Divider />\n        {validators.length !== 0 ? (\n          <TableComposable>\n            <Thead>\n              <Tr>\n                <Th>{t(\"validatorColNames.colName\")}</Th>\n                <Th>{t(\"validatorColNames.colConfig\")}</Th>\n                <Th />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {validators.map((validator) => (\n                <Tr key={validator.key}>\n                  <Td dataLabel={t(\"validatorColNames.colName\")}>\n                    {validator.key}\n                  </Td>\n                  <Td dataLabel={t(\"validatorColNames.colConfig\")}>\n                    {JSON.stringify(validator.value)}\n                  </Td>\n                  <Td className=\"kc--attributes-validations--action-cell\">\n                    <Button\n                      key=\"validator\"\n                      variant=\"link\"\n                      data-testid=\"deleteValidator\"\n                      onClick={() => {\n                        toggleDeleteDialog();\n                        setValidatorToDelete(validator.key);\n                      }}\n                    >\n                      {t(\"common:delete\")}\n                    </Button>\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </TableComposable>\n        ) : (\n          <Text className=\"kc-emptyValidators\" component={TextVariants.h6}>\n            {t(\"realm-settings:emptyValidators\")}\n          </Text>\n        )}\n      </div>\n    </>\n  );\n};\n","import type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport type { UserProfileAttribute } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Form,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { flatten } from \"flat\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { convertToFormValues } from \"../util\";\nimport { useParams } from \"../utils/useParams\";\nimport type { AttributeParams } from \"./routes/Attribute\";\nimport { toUserProfile } from \"./routes/UserProfile\";\nimport { AttributeAnnotations } from \"./user-profile/attribute/AttributeAnnotations\";\nimport { AttributeGeneralSettings } from \"./user-profile/attribute/AttributeGeneralSettings\";\nimport { AttributePermission } from \"./user-profile/attribute/AttributePermission\";\nimport { AttributeValidations } from \"./user-profile/attribute/AttributeValidations\";\nimport { UserProfileProvider } from \"./user-profile/UserProfileContext\";\n\nimport \"./realm-settings-section.css\";\n\ntype IndexedAnnotations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\nexport type IndexedValidations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\ntype UserProfileAttributeType = Omit<\n  UserProfileAttribute,\n  \"validations\" | \"annotations\"\n> &\n  Attribute &\n  Permission & {\n    validations: IndexedValidations[];\n    annotations: IndexedAnnotations[];\n  };\n\ntype Attribute = {\n  roles: string[];\n  scopes: string[];\n  isRequired: boolean;\n};\n\ntype Permission = {\n  view: PermissionView[];\n  edit: PermissionEdit[];\n};\n\ntype PermissionView = [\n  {\n    adminView: boolean;\n    userView: boolean;\n  }\n];\n\ntype PermissionEdit = [\n  {\n    adminEdit: boolean;\n    userEdit: boolean;\n  }\n];\n\nexport const USERNAME_EMAIL = [\"username\", \"email\"];\n\nconst CreateAttributeFormContent = ({\n  save,\n}: {\n  save: (profileConfig: UserProfileConfig) => void;\n}) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const form = useFormContext();\n  const { realm, attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n\n  return (\n    <UserProfileProvider>\n      <ScrollForm\n        sections={[\n          { title: t(\"generalSettings\"), panel: <AttributeGeneralSettings /> },\n          { title: t(\"permission\"), panel: <AttributePermission /> },\n          { title: t(\"validations\"), panel: <AttributeValidations /> },\n          { title: t(\"annotations\"), panel: <AttributeAnnotations /> },\n        ]}\n      />\n      <Form onSubmit={form.handleSubmit(save)}>\n        <ActionGroup className=\"keycloak__form_actions\">\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"attribute-create\"\n          >\n            {editMode ? t(\"common:save\") : t(\"common:create\")}\n          </Button>\n          <Link\n            to={toUserProfile({ realm, tab: \"attributes\" })}\n            data-testid=\"attribute-cancel\"\n            className=\"kc-attributeCancel\"\n          >\n            {t(\"common:cancel\")}\n          </Link>\n        </ActionGroup>\n      </Form>\n    </UserProfileProvider>\n  );\n};\n\nexport default function NewAttributeSettings() {\n  const { realm, attributeName } = useParams<AttributeParams>();\n  const { adminClient } = useAdminClient();\n  const form = useForm<UserProfileAttributeType>();\n  const { t } = useTranslation(\"realm-settings\");\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const [config, setConfig] = useState<UserProfileConfig | null>(null);\n  const editMode = attributeName ? true : false;\n\n  useFetch(\n    () => adminClient.users.getProfile(),\n    (config) => {\n      setConfig(config);\n      const {\n        annotations,\n        validations,\n        permissions,\n        selector,\n        required,\n        ...values\n      } =\n        config.attributes!.find(\n          (attribute) => attribute.name === attributeName\n        ) || {};\n      convertToFormValues(values, form.setValue);\n      Object.entries(\n        flatten<any, any>({ permissions, selector, required }, { safe: true })\n      ).map(([key, value]) => form.setValue(key as any, value));\n      form.setValue(\n        \"annotations\",\n        Object.entries(annotations || {}).map(([key, value]) => ({\n          key,\n          value,\n        }))\n      );\n      form.setValue(\n        \"validations\",\n        Object.entries(validations || {}).map(([key, value]) => ({\n          key,\n          value,\n        }))\n      );\n      form.setValue(\"isRequired\", required !== undefined);\n    },\n    []\n  );\n\n  const save = async (profileConfig: UserProfileAttributeType) => {\n    const validations = profileConfig.validations.reduce(\n      (prevValidations, currentValidations) => {\n        prevValidations[currentValidations.key] =\n          currentValidations.value?.length === 0\n            ? {}\n            : currentValidations.value;\n        return prevValidations;\n      },\n      {} as Record<string, unknown>\n    );\n\n    const annotations = profileConfig.annotations.reduce(\n      (obj, item) => Object.assign(obj, { [item.key]: item.value }),\n      {}\n    );\n\n    const patchAttributes = () =>\n      config?.attributes!.map((attribute) => {\n        if (attribute.name !== attributeName) {\n          return attribute;\n        }\n\n        delete attribute.required;\n        return Object.assign(\n          {\n            ...attribute,\n            name: attributeName,\n            displayName: profileConfig.displayName!,\n            selector: profileConfig.selector,\n            permissions: profileConfig.permissions!,\n            annotations,\n            validations,\n          },\n          profileConfig.isRequired\n            ? { required: profileConfig.required }\n            : undefined,\n          profileConfig.group ? { group: profileConfig.group } : { group: null }\n        );\n      });\n\n    const addAttribute = () =>\n      config?.attributes!.concat([\n        Object.assign(\n          {\n            name: profileConfig.name,\n            displayName: profileConfig.displayName!,\n            required: profileConfig.isRequired ? profileConfig.required : {},\n            selector: profileConfig.selector,\n            permissions: profileConfig.permissions!,\n            annotations,\n          },\n          profileConfig.isRequired\n            ? { required: profileConfig.required }\n            : undefined,\n          profileConfig.group ? { group: profileConfig.group } : undefined\n        ),\n      ] as UserProfileAttribute);\n\n    const updatedAttributes = editMode ? patchAttributes() : addAttribute();\n\n    try {\n      await adminClient.users.updateProfile({\n        ...config,\n        attributes: updatedAttributes as UserProfileAttribute[],\n        realm,\n      });\n\n      navigate(toUserProfile({ realm, tab: \"attributes\" }));\n\n      addAlert(\n        t(\"realm-settings:createAttributeSuccess\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"realm-settings:createAttributeError\", error);\n    }\n  };\n\n  return (\n    <FormProvider {...form}>\n      <ViewHeader\n        titleKey={editMode ? attributeName : t(\"createAttribute\")}\n        subKey={editMode ? \"\" : t(\"createAttributeSubTitle\")}\n      />\n      <PageSection variant=\"light\">\n        <CreateAttributeFormContent save={() => form.handleSubmit(save)()} />\n      </PageSection>\n    </FormProvider>\n  );\n}\n"],"names":["AttributeAnnotations","useTranslation","jsx","FormAccess","FormGroup","Grid","GridItem","KeyValueInput","REQUIRED_FOR","AttributeGeneralSettings","adminClient","useAdminClient","form","useFormContext","clientScopes","setClientScopes","useState","config","setConfig","selectEnabledWhenOpen","setSelectEnabledWhenOpen","selectRequiredForOpen","setSelectRequiredForOpen","isAttributeGroupDropdownOpen","setIsAttributeGroupDropdownOpen","attributeName","useParams","editMode","selectedScopes","useWatch","requiredScopes","required","useFetch","jsxs","HelpItem","KeycloakTextInput","Controller","field","Select","_","value","SelectVariant","SelectOption","group","USERNAME_EMAIL","Fragment","Divider","Radio","s","isOpen","selectedValue","option","changedValue","item","selectedValues","Switch","isEqual","KeycloakSpinner","Permissions","name","t","control","Checkbox","AttributePermission","ValidatorSelect","selectedValidators","onChange","allValidator","useServerInfo","validators","useMemo","id","open","toggle","useToggle","setValue","AddValidatorDialog","toggleDialog","onConfirm","selectedValidator","setSelectedValidator","allSelected","useForm","handleSubmit","save","newValidator","Modal","ModalVariant","Button","Form","validator","FormProvider","DynamicComponents","AttributeValidations","addValidatorModalOpen","toggleModal","validatorToDelete","setValidatorToDelete","register","useEffect","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","updatedValidators","PlusCircleIcon","TableComposable","Thead","Tr","Th","Tbody","Td","Text","TextVariants","CreateAttributeFormContent","realm","UserProfileProvider","ScrollForm","ActionGroup","Link","toUserProfile","NewAttributeSettings","navigate","useNavigate","addAlert","addError","useAlerts","annotations","validations","permissions","selector","values","attribute","convertToFormValues","flatten","key","profileConfig","prevValidations","currentValidations","obj","updatedAttributes","AlertVariant","error","ViewHeader","PageSection"],"mappings":"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"}