{"version":3,"file":"Dashboard-721e5e27.js","sources":["../../../../node_modules/lodash-es/_baseFilter.js","../../../../node_modules/lodash-es/filter.js","../../../../node_modules/lodash-es/union.js","../../src/dashboard/ProviderInfo.tsx","../../src/dashboard/Dashboard.tsx"],"sourcesContent":["import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nexport default baseFilter;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default filter;\n","import baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport baseUniq from './_baseUniq.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */\nvar union = baseRest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nexport default union;\n","import { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ExpandableSection, PageSection } from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { TableToolbar } from \"../components/table-toolbar/TableToolbar\";\nimport { isDefined } from \"ui-shared\";\n\nexport const ProviderInfo = () => {\n  const { t } = useTranslation(\"dashboard\");\n  const serverInfo = useServerInfo();\n  const [filter, setFilter] = useState(\"\");\n  const [open, setOpen] = useState<string[]>([]);\n\n  const providerInfo = useMemo(\n    () =>\n      Object.entries(serverInfo.providers || []).filter(([key]) =>\n        key.includes(filter)\n      ),\n    [filter]\n  );\n\n  const toggleOpen = (option: string) => {\n    if (open.includes(option)) {\n      setOpen(open.filter((item: string) => item !== option));\n    } else {\n      setOpen([...open, option]);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <TableToolbar\n        inputGroupName=\"search\"\n        inputGroupPlaceholder={t(\"common:search\")}\n        inputGroupOnEnter={setFilter}\n      >\n        <TableComposable variant=\"compact\">\n          <Thead>\n            <Tr>\n              <Th width={20}>{t(\"spi\")}</Th>\n              <Th>{t(\"providers\")}</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {providerInfo.map(([name, { providers }]) => (\n              <Tr key={name}>\n                <Td>{name}</Td>\n                <Td>\n                  <ul>\n                    {Object.entries(providers).map(([key]) => (\n                      <li key={key}>{key}</li>\n                    ))}\n                  </ul>\n                  {Object.entries(providers)\n                    .map(([key, { operationalInfo }]) =>\n                      operationalInfo ? (\n                        <ExpandableSection\n                          key={key}\n                          isExpanded={open.includes(key)}\n                          onToggle={() => toggleOpen(key)}\n                          toggleText={\n                            open.includes(key) ? t(\"showLess\") : t(\"showMore\")\n                          }\n                        >\n                          <TableComposable borders={false}>\n                            <Tbody>\n                              {Object.entries(operationalInfo).map(\n                                ([key, value]) => (\n                                  <Tr key={key}>\n                                    <Td>{key}</Td>\n                                    <Td>{value}</Td>\n                                  </Tr>\n                                )\n                              )}\n                            </Tbody>\n                          </TableComposable>\n                        </ExpandableSection>\n                      ) : null\n                    )\n                    .filter(isDefined)}\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      </TableToolbar>\n    </PageSection>\n  );\n};\n","import { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { union, filter } from \"lodash-es\";\nimport {\n  Brand,\n  Card,\n  CardBody,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  EmptyState,\n  EmptyStateBody,\n  Grid,\n  GridItem,\n  Label,\n  List,\n  ListItem,\n  ListVariant,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\n\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { toUpperCase } from \"../util\";\nimport { HelpItem } from \"ui-shared\";\nimport environment from \"../environment\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport useLocaleSort from \"../utils/useLocaleSort\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { DashboardTab, toDashboard } from \"./routes/Dashboard\";\nimport { ProviderInfo } from \"./ProviderInfo\";\n\nimport \"./dashboard.css\";\n\nconst EmptyDashboard = () => {\n  const { t } = useTranslation(\"dashboard\");\n  const { realm } = useRealm();\n  return (\n    <PageSection variant=\"light\">\n      <EmptyState variant=\"large\">\n        <Brand\n          src={environment.resourceUrl + \"/icon.svg\"}\n          alt=\"Keycloak icon\"\n          className=\"keycloak__dashboard_icon\"\n        />\n        <Title headingLevel=\"h2\" size=\"3xl\">\n          {t(\"welcome\")}\n        </Title>\n        <Title headingLevel=\"h1\" size=\"4xl\">\n          {realm}\n        </Title>\n        <EmptyStateBody>{t(\"introduction\")}</EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n\nconst Dashboard = () => {\n  const { t } = useTranslation(\"dashboard\");\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const localeSort = useLocaleSort();\n\n  const isDeprecatedFeature = (feature: string) =>\n    disabledFeatures.includes(feature);\n\n  const isExperimentalFeature = (feature: string) =>\n    serverInfo.profileInfo?.experimentalFeatures?.includes(feature);\n\n  const isPreviewFeature = (feature: string) =>\n    serverInfo.profileInfo?.previewFeatures?.includes(feature);\n\n  const isSupportedFeature = (feature: string) =>\n    !isExperimentalFeature(feature) && !isPreviewFeature(feature);\n\n  const disabledFeatures = useMemo(\n    () =>\n      localeSort(\n        serverInfo.profileInfo?.disabledFeatures ?? [],\n        (item) => item\n      ),\n    [serverInfo.profileInfo]\n  );\n\n  const enabledFeatures = useMemo(\n    () =>\n      localeSort(\n        filter(\n          union(\n            serverInfo.profileInfo?.experimentalFeatures,\n            serverInfo.profileInfo?.previewFeatures\n          ),\n          (feature) => {\n            return !isDeprecatedFeature(feature);\n          }\n        ),\n        (item) => item\n      ),\n    [serverInfo.profileInfo]\n  );\n\n  const useTab = (tab: DashboardTab) =>\n    useRoutableTab(\n      toDashboard({\n        realm,\n        tab,\n      })\n    );\n\n  const infoTab = useTab(\"info\");\n  const providersTab = useTab(\"providers\");\n\n  if (Object.keys(serverInfo).length === 0) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <PageSection variant=\"light\">\n        <TextContent className=\"pf-u-mr-sm\">\n          <Text component=\"h1\">{t(\"realmName\", { name: realm })}</Text>\n        </TextContent>\n      </PageSection>\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          data-testid=\"dashboard-tabs\"\n          defaultLocation={toDashboard({\n            realm,\n            tab: \"info\",\n          })}\n          isBox\n          mountOnEnter\n        >\n          <Tab\n            id=\"info\"\n            data-testid=\"infoTab\"\n            title={<TabTitleText>{t(\"serverInfo\")}</TabTitleText>}\n            {...infoTab}\n          >\n            <PageSection variant=\"light\">\n              <Grid hasGutter>\n                <GridItem lg={2} sm={12}>\n                  <Card className=\"keycloak__dashboard_card\">\n                    <CardTitle>{t(\"serverInfo\")}</CardTitle>\n                    <CardBody>\n                      <DescriptionList>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"version\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.systemInfo?.version}\n                          </DescriptionListDescription>\n                          <DescriptionListTerm>\n                            {t(\"product\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {toUpperCase(serverInfo.profileInfo?.name!)}\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                      </DescriptionList>\n                    </CardBody>\n                    <CardTitle>{t(\"memory\")}</CardTitle>\n                    <CardBody>\n                      <DescriptionList>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"totalMemory\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.memoryInfo?.totalFormated}\n                          </DescriptionListDescription>\n                          <DescriptionListTerm>\n                            {t(\"freeMemory\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.memoryInfo?.freeFormated}\n                          </DescriptionListDescription>\n                          <DescriptionListTerm>\n                            {t(\"usedMemory\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.memoryInfo?.usedFormated}\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                      </DescriptionList>\n                    </CardBody>\n                  </Card>\n                </GridItem>\n                <GridItem lg={10} sm={12}>\n                  <Card className=\"keycloak__dashboard_card\">\n                    <CardTitle>{t(\"profile\")}</CardTitle>\n                    <CardBody>\n                      <DescriptionList>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"enabledFeatures\")}{\" \"}\n                            <HelpItem\n                              fieldLabelId=\"dashboard:enabledFeatures\"\n                              helpText={t(\"dashboard:infoEnabledFeatures\")}\n                            />\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            <List variant={ListVariant.inline}>\n                              {enabledFeatures.map((feature) => (\n                                <ListItem key={feature} className=\"pf-u-mb-sm\">\n                                  {feature}{\" \"}\n                                  {isExperimentalFeature(feature) ? (\n                                    <Label color=\"orange\">\n                                      {t(\"experimental\")}\n                                    </Label>\n                                  ) : null}\n                                  {isPreviewFeature(feature) ? (\n                                    <Label color=\"blue\">{t(\"preview\")}</Label>\n                                  ) : null}\n                                </ListItem>\n                              ))}\n                            </List>\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"disabledFeatures\")}{\" \"}\n                            <HelpItem\n                              fieldLabelId=\"dashboard:disabledFeatures\"\n                              helpText={t(\"dashboard:infoDisabledFeatures\")}\n                            />\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            <List variant={ListVariant.inline}>\n                              {disabledFeatures.map((feature) => (\n                                <ListItem key={feature} className=\"pf-u-mb-sm\">\n                                  {feature}{\" \"}\n                                  {isExperimentalFeature(feature) ? (\n                                    <Label color=\"orange\">\n                                      {t(\"experimental\")}\n                                    </Label>\n                                  ) : null}\n                                  {isPreviewFeature(feature) ? (\n                                    <Label color=\"blue\">{t(\"preview\")}</Label>\n                                  ) : null}\n                                  {isSupportedFeature(feature) ? (\n                                    <Label color=\"green\">\n                                      {t(\"supported\")}\n                                    </Label>\n                                  ) : null}\n                                </ListItem>\n                              ))}\n                            </List>\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                      </DescriptionList>\n                    </CardBody>\n                  </Card>\n                </GridItem>\n              </Grid>\n            </PageSection>\n          </Tab>\n          <Tab\n            id=\"providers\"\n            data-testid=\"providersTab\"\n            title={<TabTitleText>{t(\"providerInfo\")}</TabTitleText>}\n            {...providersTab}\n          >\n            <ProviderInfo />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n};\n\nexport default function DashboardSection() {\n  const { realm } = useRealm();\n  const isMasterRealm = realm === \"master\";\n  return (\n    <>\n      {!isMasterRealm && <EmptyDashboard />}\n      {isMasterRealm && <Dashboard />}\n    </>\n  );\n}\n"],"names":["baseFilter","collection","predicate","result","baseEach","value","index","filter","func","isArray","arrayFilter","baseIteratee","union","baseRest","arrays","baseUniq","baseFlatten","isArrayLikeObject","union$1","ProviderInfo","t","useTranslation","serverInfo","useServerInfo","setFilter","useState","open","setOpen","providerInfo","useMemo","key","toggleOpen","option","item","jsx","PageSection","TableToolbar","jsxs","TableComposable","Thead","Tr","Th","Tbody","name","providers","Td","operationalInfo","ExpandableSection","isDefined","EmptyDashboard","realm","useRealm","EmptyState","Brand","environment","Title","EmptyStateBody","Dashboard","localeSort","useLocaleSort","isDeprecatedFeature","feature","disabledFeatures","isExperimentalFeature","isPreviewFeature","isSupportedFeature","enabledFeatures","useTab","tab","useRoutableTab","toDashboard","infoTab","providersTab","KeycloakSpinner","Fragment","TextContent","Text","RoutableTabs","Tab","TabTitleText","Grid","GridItem","Card","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","toUpperCase","HelpItem","List","ListVariant","ListItem","Label","DashboardSection","isMasterRealm"],"mappings":"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","x_google_ignoreList":[0,1,2]}