import{u as q,d as N,e as U,r as g,k as W,A as _,j as t,B as F,aZ as H,a8 as E,aW as Q,D as Z,v as z,w as G}from"./index-a3421f29.js";import{K as O}from"./KeycloakDataTable-10a62d94.js";import{u as J}from"./useLocaleSort-3efc7c31.js";import{g as X,b as Y}from"./resource-08ae7dbc.js";import{L as V}from"./PaginatingTableToolbar-08ca9efb.js";import{F as ee}from"./filter-icon-9d72dc58.js";import{M as te,a as se}from"./Modal-21c37af7.js";import{b as k}from"./ToolbarContent-7b435752.js";import{u as ne}from"./ConfirmDialog-09ff7a12.js";import{N as oe}from"./Td-6d4ab209.js";import{C as le}from"./Checkbox-d00621d8.js";const L={delete:["delClientRoleMappings","delRealmRoleMappings"],listEffective:["listRoleMappings","listCompositeRealmRoleMappings","listCompositeClientRoleMappings"],listAvailable:["listAvailableClientRoleMappings","listAvailableRealmRoleMappings"]},P={delete:["delClientScopeMappings","delRealmScopeMappings"],listEffective:["listScopeMappings","listAvailableRealmScopeMappings","listCompositeClientScopeMappings"],listAvailable:["listAvailableClientScopeMappings","listAvailableRealmScopeMappings"]},K={groups:L,users:L,clientScopes:P,clients:P,roles:{delete:["delCompositeRoles","delCompositeRoles"],listEffective:["getCompositeRoles","getCompositeRoles","getCompositeRolesForClient"],listAvailable:["listRoles","find"]}},ie=(s,e)=>s[e],S=(s,e,n,...o)=>ie(s,e)[n](...o),ae=(s,e,n,o)=>o.map(r=>{const l={id:r.role.id,name:r.role.name},c=K[e]?.delete[r.client?0:1];return S(s,e,c,{id:n,clientUniqueId:r.client?.id,client:r.client?.id,roles:[l]},[l])}),re=async(s,e,n)=>{const o=K[e].listEffective[0],r=S(s,e,o,{id:n});if(e!=="roles")return r;const l=await r;return{clientMappings:await Promise.all(l.filter(a=>a.clientRole).map(async a=>{const u=await s.clients.findOne({id:a.containerId});return a.containerId=u?.clientId,{...u,mappings:[a]}})),realmMappings:l.filter(a=>!a.clientRole)}},ce=async(s,e,n)=>{const o=K[e].listEffective[1];if(e!=="roles")return(await S(s,e,o,{id:n})).map(c=>({role:c}));const r=await S(s,e,o,{id:n}),l=await Promise.all(r.filter(c=>c.composite).map(c=>S(s,e,o,{id:c.id})));return[...r,...l.flat()].map(c=>({role:c}))},me=async(s,e,n)=>{const o=K[e].listAvailable[1];return(await S(s,e,o,n)).map(r=>({role:r}))};const de=(s,e,n)=>[...n?s.map(o=>({...o,role:{...o.role,isInherited:!1}})):e.map(o=>({...o,role:{...o.role,isInherited:s.find(r=>r.role.id===o.role.id)===void 0}}))],$=({role:s,client:e})=>t.jsxs(t.Fragment,{children:[e?.clientId&&t.jsx(Q,{isRead:!0,className:"keycloak-admin--role-mapping__client-name",children:e.clientId}),s.name]}),Me=({name:s,id:e,type:n,isManager:o=!0,save:r})=>{const{t:l}=q(n),{adminClient:c}=N(),{addAlert:a,addError:u}=U(),[A,M]=g.useState(0),p=()=>M(A+1),[f,j]=g.useState(!0),[T,h]=g.useState(!1),[v,x]=g.useState([]),b=async i=>{await r(i),p()},B=async()=>{let i=[],y=[];f||(i=await ce(c,n,e),y=(await X({adminClient:c,type:n,id:e})).map(m=>({client:{clientId:m.client,id:m.clientId},role:{id:m.id,name:m.role,description:m.description}})));const R=await re(c,n,e),C=R.realmMappings?.map(m=>({role:m}))||[],d=Object.values(R.clientMappings||{}).map(m=>m.mappings.map(w=>({client:{clientId:m.client,...m},role:w}))).flat();return[...de([...C,...d],[...y,...i],f)]},[I,D]=ne({titleKey:"clients:removeMappingTitle",messageKey:l("clients:removeMappingConfirm",{count:v.length}),continueButtonLabel:"common:remove",continueButtonVariant:W.danger,onConfirm:async()=>{try{await Promise.all(ae(c,n,e,v)),a(l("clients:clientScopeRemoveSuccess"),_.success),p()}catch(i){u("clients:clientScopeRemoveError",i)}}});return t.jsxs(t.Fragment,{children:[T&&t.jsx(pe,{id:e,type:n,name:s,onAssign:b,onClose:()=>h(!1)}),t.jsx(D,{}),t.jsx(O,{"data-testid":"assigned-roles",loader:B,canSelectAll:!0,onSelect:i=>x(i),searchPlaceholderKey:"clients:searchByName",ariaLabelKey:"clients:clientScopeList",isRowDisabled:i=>i.role.isInherited||!1,toolbarItem:t.jsxs(t.Fragment,{children:[t.jsx(k,{children:t.jsx(le,{label:l("common:hideInheritedRoles"),id:"hideInheritedRoles","data-testid":"hideInheritedRoles",isChecked:f,onChange:i=>{j(i),p()}})}),o&&t.jsxs(t.Fragment,{children:[t.jsx(k,{children:t.jsx(F,{"data-testid":"assignRole",onClick:()=>h(!0),children:l("common:assignRole")})}),t.jsx(k,{children:t.jsx(F,{variant:"link","data-testid":"unAssignRole",onClick:I,isDisabled:v.length===0,children:l("common:unAssignRole")})})]})]}),actions:o?[{title:l("common:unAssignRole"),onRowClick:async i=>(x([i]),I(),!1)}]:[],columns:[{name:"role.name",displayKey:l("common:name"),transforms:[oe(30)],cellRenderer:$},{name:"role.isInherited",displayKey:l("common:inherent"),cellFormatters:[H(),E()]},{name:"role.description",displayKey:l("common:description"),cellFormatters:[E()]}],emptyState:t.jsx(V,{message:l("noRoles"),instructions:l("noRolesInstructions"),primaryActionText:l("common:assignRole"),onPrimaryAction:()=>h(!0)})},`${e}${A}`)]})},pe=({id:s,name:e,type:n,isRadio:o=!1,isLDAPmapper:r,onAssign:l,onClose:c})=>{const{t:a}=q(n),{adminClient:u}=N(),[A,M]=g.useState(!1),[p,f]=g.useState("roles"),[j,T]=g.useState([]),[h,v]=g.useState(0),x=()=>v(h+1),b=J(),B=({role:{name:i}})=>i?.toUpperCase(),I=async(i,y,R)=>{const C={first:i,max:y};R&&(C.search=R);const d=await me(u,n,{...C,id:s});return b(d,B).map(w=>({role:w.role,id:w.role.id}))},D=async(i,y,R)=>{const C=await Y({adminClient:u,id:s,type:n,first:i||0,max:y||10,search:R});return b(C.map(d=>({client:{clientId:d.client,id:d.clientId},role:{id:d.id,name:d.role,description:d.description},id:d.id})),({client:{clientId:d},role:{name:m}})=>`${d}${m}`)};return t.jsx(te,{variant:se.large,title:r?a("common:assignRole"):a("common:assignRolesTo",{client:e}),isOpen:!0,onClose:c,actions:[t.jsx(F,{"data-testid":"assign",isDisabled:j.length===0,variant:"primary",onClick:()=>{l(j),c()},children:a("common:assign")},"confirm"),t.jsx(F,{"data-testid":"cancel",variant:"link",onClick:c,children:a("common:cancel")},"cancel")],children:t.jsx(O,{onSelect:i=>T([...i]),searchPlaceholderKey:"clients:searchByRoleName",isPaginated:!(p==="roles"&&n==="users"),searchTypeComponent:t.jsx(k,{children:t.jsx(Z,{onSelect:()=>{f(p==="roles"?"clients":"roles"),M(!1),x()},"data-testid":"filter-type-dropdown",toggle:t.jsx(z,{onToggle:M,icon:t.jsx(ee,{}),children:a(p==="roles"?"common:filterByRoles":"common:filterByClients")}),isOpen:A,dropdownItems:[t.jsx(G,{"data-testid":p,children:a(p==="roles"?"common:filterByClients":"common:filterByRoles")},"filter-type")]})}),canSelectAll:!0,isRadio:o,loader:p==="roles"?I:D,ariaLabelKey:"clients:roles",columns:[{name:"name",cellRenderer:$},{name:"role.description",displayKey:"common:description"}],emptyState:t.jsx(V,{message:a("noRoles"),instructions:a("common:noRealmRolesToAssign"),secondaryActions:[{text:a("common:filterByClients"),onClick:()=>{f("clients"),x()}}]})},h)})};export{pe as A,Me as R,$ as S};
//# sourceMappingURL=AddRoleMappingModal-abb19beb.js.map
