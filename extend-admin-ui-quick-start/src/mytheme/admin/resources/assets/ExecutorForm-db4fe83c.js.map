{"version":3,"file":"ExecutorForm-db4fe83c.js","sources":["../../src/realm-settings/ExecutorForm.tsx"],"sourcesContent":["import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\nimport type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { DynamicComponents } from \"../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useParams } from \"../utils/useParams\";\nimport { ClientProfileParams, toClientProfile } from \"./routes/ClientProfile\";\nimport type { ExecutorParams } from \"./routes/Executor\";\n\ntype ExecutorForm = {\n  config?: object;\n  executor: string;\n};\n\nconst defaultValues: ExecutorForm = {\n  config: {},\n  executor: \"\",\n};\n\nexport default function ExecutorForm() {\n  const { t } = useTranslation(\"realm-settings\");\n  const navigate = useNavigate();\n  const { realm, profileName } = useParams<ClientProfileParams>();\n  const { executorName } = useParams<ExecutorParams>();\n  const { addAlert, addError } = useAlerts();\n  const [selectExecutorTypeOpen, setSelectExecutorTypeOpen] = useState(false);\n  const serverInfo = useServerInfo();\n  const { adminClient } = useAdminClient();\n  const executorTypes =\n    serverInfo.componentTypes?.[\n      \"org.keycloak.services.clientpolicy.executor.ClientPolicyExecutorProvider\"\n    ];\n  const [executors, setExecutors] = useState<ComponentTypeRepresentation[]>([]);\n  const [executorProperties, setExecutorProperties] = useState<\n    ConfigPropertyRepresentation[]\n  >([]);\n  const [globalProfiles, setGlobalProfiles] = useState<\n    ClientProfileRepresentation[]\n  >([]);\n  const [profiles, setProfiles] = useState<ClientProfileRepresentation[]>([]);\n  const form = useForm({ defaultValues });\n  const { control, reset, handleSubmit } = form;\n  const editMode = !!executorName;\n\n  const setupForm = (profiles: ClientProfileRepresentation[]) => {\n    const profile = profiles.find((profile) => profile.name === profileName);\n    const executor = profile?.executors?.find(\n      (executor) => executor.executor === executorName\n    );\n    if (executor) reset({ config: executor.configuration });\n  };\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({ includeGlobalProfiles: true }),\n    (profiles) => {\n      setGlobalProfiles(profiles.globalProfiles!);\n      setProfiles(profiles.profiles!);\n\n      setupForm(profiles.profiles!);\n      setupForm(profiles.globalProfiles!);\n    },\n    []\n  );\n\n  const save = async () => {\n    const formValues = form.getValues();\n    const updatedProfiles = profiles.map((profile) => {\n      if (profile.name !== profileName) {\n        return profile;\n      }\n\n      const executors = (profile.executors ?? []).concat({\n        executor: formValues.executor,\n        configuration: formValues.config || {},\n      });\n\n      if (editMode) {\n        const profileExecutor = profile.executors!.find(\n          (executor) => executor.executor === executorName\n        );\n        profileExecutor!.configuration = {\n          ...profileExecutor!.configuration,\n          ...formValues.config,\n        };\n      }\n\n      if (editMode) {\n        return profile;\n      }\n      return {\n        ...profile,\n        executors,\n      };\n    });\n    try {\n      await adminClient.clientPolicies.createProfiles({\n        profiles: updatedProfiles,\n        globalProfiles: globalProfiles,\n      });\n      addAlert(\n        editMode\n          ? t(\"realm-settings:updateExecutorSuccess\")\n          : t(\"realm-settings:addExecutorSuccess\"),\n        AlertVariant.success\n      );\n\n      navigate(toClientProfile({ realm, profileName }));\n    } catch (error) {\n      addError(\n        editMode\n          ? \"realm-settings:updateExecutorError\"\n          : \"realm-settings:addExecutorError\",\n        error\n      );\n    }\n  };\n\n  const globalProfile = globalProfiles.find(\n    (globalProfile) => globalProfile.name === profileName\n  );\n\n  const profileExecutorType = executorTypes?.find(\n    (executor) => executor.id === executorName\n  );\n\n  const editedProfileExecutors =\n    profileExecutorType?.properties.map<ConfigPropertyRepresentation>(\n      (property) => {\n        const globalDefaultValues = editMode ? property.defaultValue : \"\";\n        return {\n          ...property,\n          defaultValue: globalDefaultValues,\n        };\n      }\n    );\n\n  return (\n    <>\n      <ViewHeader\n        titleKey={editMode ? executorName : t(\"addExecutor\")}\n        divider\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          isReadOnly={!!globalProfile}\n        >\n          <FormGroup\n            label={t(\"executorType\")}\n            fieldId=\"kc-executorType\"\n            labelIcon={\n              executors.length > 0 && executors[0].helpText! !== \"\" ? (\n                <HelpItem\n                  helpText={executors[0].helpText}\n                  fieldLabelId=\"realm-settings:executorTypeHelpText\"\n                />\n              ) : editMode ? (\n                <HelpItem\n                  helpText={profileExecutorType?.helpText}\n                  fieldLabelId=\"realm-settings:executorTypeHelpText\"\n                />\n              ) : undefined\n            }\n          >\n            <Controller\n              name=\"executor\"\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-executor\"\n                  placeholderText=\"Select an executor\"\n                  onToggle={(isOpen) => setSelectExecutorTypeOpen(isOpen)}\n                  onSelect={(_, value) => {\n                    reset({ ...defaultValues, executor: value.toString() });\n                    const selectedExecutor = executorTypes?.filter(\n                      (type) => type.id === value\n                    );\n                    setExecutors(selectedExecutor ?? []);\n                    setExecutorProperties(\n                      selectedExecutor?.[0].properties ?? []\n                    );\n                    setSelectExecutorTypeOpen(false);\n                  }}\n                  selections={editMode ? executorName : field.value}\n                  variant={SelectVariant.single}\n                  data-testid=\"executorType-select\"\n                  aria-label={t(\"executorType\")}\n                  isOpen={selectExecutorTypeOpen}\n                  maxHeight={580}\n                  isDisabled={editMode}\n                >\n                  {executorTypes?.map((option) => (\n                    <SelectOption\n                      selected={option.id === field.value}\n                      key={option.id}\n                      value={option.id}\n                      description={option.helpText}\n                    />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormProvider {...form}>\n            <DynamicComponents\n              properties={\n                editMode ? editedProfileExecutors! : executorProperties\n              }\n            />\n          </FormProvider>\n          {!globalProfile && (\n            <ActionGroup>\n              <Button\n                variant=\"primary\"\n                onClick={() => handleSubmit(save)()}\n                data-testid=\"addExecutor-saveBtn\"\n              >\n                {editMode ? t(\"common:save\") : t(\"common:add\")}\n              </Button>\n              <Button\n                variant=\"link\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toClientProfile({ realm, profileName })}\n                  />\n                )}\n                data-testid=\"addExecutor-cancelBtn\"\n              >\n                {t(\"common:cancel\")}\n              </Button>\n            </ActionGroup>\n          )}\n        </FormAccess>\n        {editMode && globalProfile && (\n          <div className=\"kc-backToProfile\">\n            <Button\n              component={(props) => (\n                <Link {...props} to={toClientProfile({ realm, profileName })} />\n              )}\n              variant=\"primary\"\n            >\n              {t(\"realm-settings:back\")}\n            </Button>\n          </div>\n        )}\n      </PageSection>\n    </>\n  );\n}\n"],"names":["defaultValues","ExecutorForm","t","useTranslation","navigate","useNavigate","realm","profileName","useParams","executorName","addAlert","addError","useAlerts","selectExecutorTypeOpen","setSelectExecutorTypeOpen","useState","serverInfo","useServerInfo","adminClient","useAdminClient","executorTypes","executors","setExecutors","executorProperties","setExecutorProperties","globalProfiles","setGlobalProfiles","profiles","setProfiles","form","useForm","control","reset","handleSubmit","editMode","setupForm","executor","profile","useFetch","save","formValues","updatedProfiles","profileExecutor","AlertVariant","toClientProfile","error","globalProfile","profileExecutorType","editedProfileExecutors","property","globalDefaultValues","jsxs","Fragment","jsx","ViewHeader","PageSection","FormAccess","FormGroup","HelpItem","Controller","field","Select","isOpen","_","value","selectedExecutor","type","SelectVariant","option","SelectOption","FormProvider","DynamicComponents","ActionGroup","Button","props","Link"],"mappings":"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"}