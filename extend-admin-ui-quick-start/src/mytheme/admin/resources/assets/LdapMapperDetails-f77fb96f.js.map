{"version":3,"file":"LdapMapperDetails-f77fb96f.js","sources":["../../src/user-federation/ldap/mappers/LdapMapperDetails.tsx"],"sourcesContent":["import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { DirectionType } from \"@keycloak/keycloak-admin-client/lib/resources/userStorageProvider\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Form,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport { DynamicComponents } from \"../../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakSpinner } from \"../../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { useRealm } from \"../../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../../util\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { toUserFederationLdap } from \"../../routes/UserFederationLdap\";\nimport { UserFederationLdapMapperParams } from \"../../routes/UserFederationLdapMapper\";\n\nexport default function LdapMapperDetails() {\n  const form = useForm<ComponentRepresentation>();\n  const [mapping, setMapping] = useState<ComponentRepresentation>();\n  const [components, setComponents] = useState<ComponentTypeRepresentation[]>();\n\n  const { adminClient } = useAdminClient();\n  const { id, mapperId } = useParams<UserFederationLdapMapperParams>();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const { t } = useTranslation(\"user-federation\");\n  const { addAlert, addError } = useAlerts();\n\n  const [isMapperDropdownOpen, setIsMapperDropdownOpen] = useState(false);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  useFetch(\n    async () => {\n      const components = await adminClient.components.listSubComponents({\n        id,\n        type: \"org.keycloak.storage.ldap.mappers.LDAPStorageMapper\",\n      });\n      if (mapperId && mapperId !== \"new\") {\n        const fetchedMapper = await adminClient.components.findOne({\n          id: mapperId,\n        });\n        return { components, fetchedMapper };\n      }\n      return { components };\n    },\n    ({ components, fetchedMapper }) => {\n      setMapping(fetchedMapper);\n      setComponents(components);\n      if (mapperId !== \"new\" && !fetchedMapper)\n        throw new Error(t(\"common:notFound\"));\n\n      if (fetchedMapper) setupForm(fetchedMapper);\n    },\n    []\n  );\n\n  const setupForm = (mapper: ComponentRepresentation) => {\n    convertToFormValues(mapper, form.setValue);\n  };\n\n  const save = async (mapper: ComponentRepresentation) => {\n    const component: ComponentRepresentation =\n      convertFormValuesToObject(mapper);\n    const map = {\n      ...component,\n      config: Object.entries(component.config || {}).reduce(\n        (result, [key, value]) => {\n          result[key] = Array.isArray(value) ? value : [value];\n          return result;\n        },\n        {} as Record<string, string | string[]>\n      ),\n    };\n\n    try {\n      if (mapperId === \"new\") {\n        await adminClient.components.create(map);\n        navigate(\n          toUserFederationLdap({ realm, id: mapper.parentId!, tab: \"mappers\" })\n        );\n      } else {\n        await adminClient.components.update({ id: mapperId }, map);\n      }\n      setupForm(map as ComponentRepresentation);\n      addAlert(\n        t(\n          mapperId === \"new\"\n            ? \"common:mappingCreatedSuccess\"\n            : \"common:mappingUpdatedSuccess\"\n        ),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\n        mapperId === \"new\"\n          ? \"common:mappingCreatedError\"\n          : \"common:mappingUpdatedError\",\n        error\n      );\n    }\n  };\n\n  const sync = async (direction: DirectionType) => {\n    try {\n      const result = await adminClient.userStorageProvider.mappersSync({\n        parentId: mapping?.parentId || \"\",\n        id: mapperId,\n        direction,\n      });\n      addAlert(\n        t(\"syncLDAPGroupsSuccessful\", {\n          result: result.status,\n        })\n      );\n    } catch (error) {\n      addError(\"user-federation:syncLDAPGroupsError\", error);\n    }\n    refresh();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"common:deleteMappingTitle\",\n    messageKey: \"common:deleteMappingConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.components.del({\n          id: mapping!.id!,\n        });\n        addAlert(t(\"common:mappingDeletedSuccess\"), AlertVariant.success);\n        navigate(toUserFederationLdap({ id, realm, tab: \"mappers\" }));\n      } catch (error) {\n        addError(\"common:mappingDeletedError\", error);\n      }\n    },\n  });\n\n  const mapperType = useWatch({\n    control: form.control,\n    name: \"providerId\",\n  });\n\n  if (!components) {\n    return <KeycloakSpinner />;\n  }\n\n  const isNew = mapperId === \"new\";\n  const mapper = components.find((c) => c.id === mapperType);\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        key={key}\n        titleKey={mapping ? mapping.name! : t(\"common:createNewMapper\")}\n        dropdownItems={\n          isNew\n            ? undefined\n            : [\n                <DropdownItem key=\"delete\" onClick={toggleDeleteDialog}>\n                  {t(\"common:delete\")}\n                </DropdownItem>,\n                mapper?.metadata.fedToKeycloakSyncSupported && (\n                  <DropdownItem\n                    key=\"fedSync\"\n                    onClick={() => sync(\"fedToKeycloak\")}\n                  >\n                    {t(\"syncLDAPGroupsToKeycloak\")}\n                  </DropdownItem>\n                ),\n                mapper?.metadata.keycloakToFedSyncSupported && (\n                  <DropdownItem\n                    key=\"ldapSync\"\n                    onClick={() => {\n                      sync(\"keycloakToFed\");\n                    }}\n                  >\n                    {t(\"syncKeycloakGroupsToLDAP\")}\n                  </DropdownItem>\n                ),\n              ]\n        }\n      />\n      <PageSection variant=\"light\" isFilled>\n        <FormAccess role=\"manage-realm\" isHorizontal>\n          {!isNew && (\n            <FormGroup label={t(\"common:id\")} fieldId=\"kc-ldap-mapper-id\">\n              <KeycloakTextInput\n                isDisabled\n                id=\"kc-ldap-mapper-id\"\n                data-testid=\"ldap-mapper-id\"\n                {...form.register(\"id\")}\n              />\n            </FormGroup>\n          )}\n          <FormGroup\n            label={t(\"common:name\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"user-federation-help:nameHelp\")}\n                fieldLabelId=\"name\"\n              />\n            }\n            fieldId=\"kc-ldap-mapper-name\"\n            isRequired\n          >\n            <KeycloakTextInput\n              isDisabled={!isNew}\n              isRequired\n              id=\"kc-ldap-mapper-name\"\n              data-testid=\"ldap-mapper-name\"\n              validated={\n                form.formState.errors.name\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              {...form.register(\"name\", { required: true })}\n            />\n            <KeycloakTextInput\n              hidden\n              defaultValue={isNew ? id : mapping ? mapping.parentId : \"\"}\n              id=\"kc-ldap-parentId\"\n              data-testid=\"ldap-mapper-parentId\"\n              {...form.register(\"parentId\")}\n            />\n            <KeycloakTextInput\n              hidden\n              defaultValue=\"org.keycloak.storage.ldap.mappers.LDAPStorageMapper\"\n              id=\"kc-ldap-provider-type\"\n              data-testid=\"ldap-mapper-provider-type\"\n              {...form.register(\"providerType\")}\n            />\n          </FormGroup>\n          {!isNew ? (\n            <FormGroup\n              label={t(\"common:mapperType\")}\n              labelIcon={\n                <HelpItem\n                  helpText={\n                    mapper?.helpText\n                      ? mapper.helpText\n                      : t(\"user-federation-help:mapperTypeHelp\")\n                  }\n                  fieldLabelId=\"mapperType\"\n                />\n              }\n              fieldId=\"kc-ldap-mapper-type\"\n              isRequired\n            >\n              <KeycloakTextInput\n                isDisabled={!isNew}\n                isRequired\n                id=\"kc-ldap-mapper-type\"\n                data-testid=\"ldap-mapper-type-fld\"\n                {...form.register(\"providerId\")}\n              />\n            </FormGroup>\n          ) : (\n            <FormGroup\n              label={t(\"common:mapperType\")}\n              labelIcon={\n                <HelpItem\n                  helpText={\n                    mapper?.helpText\n                      ? mapper.helpText\n                      : t(\"user-federation-help:mapperTypeHelp\")\n                  }\n                  fieldLabelId=\"mapperType\"\n                />\n              }\n              fieldId=\"kc-providerId\"\n              isRequired\n            >\n              <Controller\n                name=\"providerId\"\n                defaultValue=\"\"\n                control={form.control}\n                data-testid=\"ldap-mapper-type-select\"\n                render={({ field }) => (\n                  <Select\n                    toggleId=\"kc-providerId\"\n                    required\n                    onToggle={() =>\n                      setIsMapperDropdownOpen(!isMapperDropdownOpen)\n                    }\n                    isOpen={isMapperDropdownOpen}\n                    onSelect={(_, value) => {\n                      field.onChange(value as string);\n                      setIsMapperDropdownOpen(false);\n                    }}\n                    selections={field.value}\n                    variant={SelectVariant.typeahead}\n                  >\n                    {components.map((c) => (\n                      <SelectOption key={c.id} value={c.id} />\n                    ))}\n                  </Select>\n                )}\n              ></Controller>\n            </FormGroup>\n          )}\n          <FormProvider {...form}>\n            {!!mapperType && (\n              <DynamicComponents properties={mapper?.properties!} />\n            )}\n          </FormProvider>\n        </FormAccess>\n\n        <Form onSubmit={form.handleSubmit(() => save(form.getValues()))}>\n          <ActionGroup>\n            <Button\n              isDisabled={!form.formState.isDirty}\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"ldap-mapper-save\"\n            >\n              {t(\"common:save\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              onClick={() =>\n                isNew\n                  ? navigate(-1)\n                  : navigate(\n                      `/${realm}/user-federation/ldap/${\n                        mapping!.parentId\n                      }/mappers`\n                    )\n              }\n              data-testid=\"ldap-mapper-cancel\"\n            >\n              {t(\"common:cancel\")}\n            </Button>\n          </ActionGroup>\n        </Form>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["LdapMapperDetails","form","useForm","mapping","setMapping","useState","components","setComponents","adminClient","useAdminClient","id","mapperId","useParams","navigate","useNavigate","realm","useRealm","useTranslation","addAlert","addError","useAlerts","isMapperDropdownOpen","setIsMapperDropdownOpen","key","setKey","refresh","useFetch","fetchedMapper","setupForm","mapper","save","component","convertFormValuesToObject","map","result","value","toUserFederationLdap","AlertVariant","error","sync","direction","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","mapperType","useWatch","KeycloakSpinner","isNew","c","jsxs","Fragment","jsx","ViewHeader","DropdownItem","PageSection","FormAccess","FormGroup","KeycloakTextInput","HelpItem","ValidatedOptions","Controller","field","Select","_","SelectVariant","SelectOption","FormProvider","DynamicComponents","Form","ActionGroup","Button"],"mappings":"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"}