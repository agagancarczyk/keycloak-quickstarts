{"version":3,"file":"GeneralSettings-eaaddf99.js","sources":["../../src/identity-providers/component/ExtendedFieldsForm.tsx","../../src/identity-providers/add/GeneralSettings.tsx"],"sourcesContent":["import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { FormGroup, Switch, ValidatedOptions } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\ntype ExtendedFieldsFormProps = {\n  providerId: string;\n};\n\nexport const ExtendedFieldsForm = ({ providerId }: ExtendedFieldsFormProps) => {\n  switch (providerId) {\n    case \"facebook\":\n      return <FacebookFields />;\n    case \"github\":\n      return <GithubFields />;\n    case \"google\":\n      return <GoogleFields />;\n    case \"openshift-v3\":\n    case \"openshift-v4\":\n      return <OpenshiftFields />;\n    case \"paypal\":\n      return <PaypalFields />;\n    case \"stackoverflow\":\n      return <StackoverflowFields />;\n    case \"linkedin\":\n      return <LinkedInFields />;\n    default:\n      return null;\n  }\n};\n\nconst FacebookFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"facebook.fetchedFields\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"identity-providers-help:facebook:fetchedFields\")}\n          fieldLabelId=\"identity-providers:facebook:fetchedFields\"\n        />\n      }\n      fieldId=\"facebookFetchedFields\"\n    >\n      <KeycloakTextInput\n        id=\"facebookFetchedFields\"\n        {...register(\"config.fetchedFields\")}\n      />\n    </FormGroup>\n  );\n};\n\nconst GithubFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { register } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"baseUrl\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:baseUrl\")}\n            fieldLabelId=\"identity-providers:baseUrl\"\n          />\n        }\n        fieldId=\"baseUrl\"\n      >\n        <KeycloakTextInput\n          id=\"baseUrl\"\n          type=\"url\"\n          {...register(\"config.baseUrl\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"apiUrl\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:apiUrl\")}\n            fieldLabelId=\"identity-providers:apiUrl\"\n          />\n        }\n        fieldId=\"apiUrl\"\n      >\n        <KeycloakTextInput\n          id=\"apiUrl\"\n          type=\"url\"\n          {...register(\"config.apiUrl\")}\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nconst GoogleFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { register, control } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"google.hostedDomain\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:google:hostedDomain\")}\n            fieldLabelId=\"identity-providers:google:hostedDomain\"\n          />\n        }\n        fieldId=\"googleHostedDomain\"\n      >\n        <KeycloakTextInput\n          id=\"googleHostedDomain\"\n          {...register(\"config.hostedDomain\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"google.userIp\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:google:userIp\")}\n            fieldLabelId=\"identity-providers:google:userIp\"\n          />\n        }\n        fieldId=\"googleUserIp\"\n      >\n        <Controller\n          name=\"config.userIp\"\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"googleUserIp\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"google.userIp\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"google.offlineAccess\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identity-providers-help:google:offlineAccess\")}\n            fieldLabelId=\"identity-providers:google:offlineAccess\"\n          />\n        }\n        fieldId=\"googleOfflineAccess\"\n      >\n        <Controller\n          name=\"config.offlineAccess\"\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"googleOfflineAccess\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"google.offlineAccess\")}\n            />\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nconst OpenshiftFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n\n  return (\n    <FormGroup\n      label={t(\"baseUrl\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"identity-providers-help:openshift:baseUrl\")}\n          fieldLabelId=\"identity-providers:baseUrl\"\n        />\n      }\n      fieldId=\"baseUrl\"\n      isRequired\n      validated={\n        errors.config?.baseUrl\n          ? ValidatedOptions.error\n          : ValidatedOptions.default\n      }\n      helperTextInvalid={t(\"common:required\")}\n    >\n      <KeycloakTextInput\n        id=\"baseUrl\"\n        type=\"url\"\n        isRequired\n        {...register(\"config.baseUrl\", { required: true })}\n      />\n    </FormGroup>\n  );\n};\n\nconst PaypalFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"paypal.sandbox\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"identity-providers-help:paypal:sandbox\")}\n          fieldLabelId=\"identity-providers:paypal:sandbox\"\n        />\n      }\n      fieldId=\"paypalSandbox\"\n    >\n      <Controller\n        name=\"config.sandbox\"\n        defaultValue=\"false\"\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id=\"paypalSandbox\"\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n            isChecked={field.value === \"true\"}\n            onChange={(value) => field.onChange(value.toString())}\n            aria-label={t(\"paypal.sandbox\")}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n\nconst StackoverflowFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n\n  return (\n    <FormGroup\n      label={t(\"stackoverflow.key\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"identity-providers-help:stackoverflow:key\")}\n          fieldLabelId=\"identity-providers:stackoverflow:key\"\n        />\n      }\n      fieldId=\"stackoverflowKey\"\n      isRequired\n      validated={\n        errors.config?.key ? ValidatedOptions.error : ValidatedOptions.default\n      }\n      helperTextInvalid={t(\"common:required\")}\n    >\n      <KeycloakTextInput\n        id=\"stackoverflowKey\"\n        isRequired\n        {...register(\"config.key\", { required: true })}\n      />\n    </FormGroup>\n  );\n};\n\nconst LinkedInFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"linkedin.profileProjection\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"identity-providers-help:linkedin.profileProjection\")}\n          fieldLabelId=\"identity-providers:linkedin.profileProjection\"\n        />\n      }\n      fieldId=\"profileProjection\"\n    >\n      <KeycloakTextInput\n        id=\"profileProjection\"\n        {...register(\"config.profileProjection\")}\n      />\n    </FormGroup>\n  );\n};\n","import { RedirectUrl } from \"../component/RedirectUrl\";\nimport { ClientIdSecret } from \"../component/ClientIdSecret\";\nimport { DisplayOrder } from \"../component/DisplayOrder\";\n\ntype GeneralSettingsProps = {\n  id: string;\n  create?: boolean;\n};\n\nexport const GeneralSettings = ({\n  create = true,\n  id,\n}: GeneralSettingsProps) => (\n  <>\n    <RedirectUrl id={id} />\n    <ClientIdSecret create={create} />\n    <DisplayOrder />\n  </>\n);\n"],"names":["ExtendedFieldsForm","providerId","FacebookFields","GithubFields","GoogleFields","OpenshiftFields","PaypalFields","StackoverflowFields","LinkedInFields","t","useTranslation","register","useFormContext","jsx","FormGroup","HelpItem","KeycloakTextInput","jsxs","Fragment","control","Controller","field","Switch","value","errors","ValidatedOptions","GeneralSettings","create","id","RedirectUrl","ClientIdSecret","DisplayOrder"],"mappings":"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"}